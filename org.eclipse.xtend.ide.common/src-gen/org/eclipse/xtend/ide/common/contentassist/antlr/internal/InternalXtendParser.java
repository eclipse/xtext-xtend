package org.eclipse.xtend.ide.common.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.eclipse.xtend.core.services.XtendGrammarAccess;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
/*******************************************************************************
 * Copyright (c) 2010, 2018 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
@SuppressWarnings("all")
public class InternalXtendParser extends AbstractInternalContentAssistParser {
    @Override protected boolean isBacktracking() { return false; }
    @Override public void announceMark(int marker) { /* do nothing */ }
    @Override protected int getLookaheadThreshold() { return 5; }
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "KW_Package", "KW_Semicolon", "KW_Class", "KW_LessThanSign", "KW_Comma", "KW_GreaterThanSign", "KW_Extends", "KW_Implements", "KW_LeftCurlyBracket", "KW_RightCurlyBracket", "KW_Interface", "KW_Enum", "KW_Annotation", "KW_LeftParenthesis", "KW_RightParenthesis", "KW_EqualsSignGreaterThanSign", "KW_EqualsSign", "KW_Extension", "KW_Throws", "KW_New", "KW_FullStop", "KW_Public", "KW_Private", "KW_Protected", "KW_Abstract", "KW_Static", "KW_Dispatch", "KW_Final", "KW_Strictfp", "KW_Native", "KW_Volatile", "KW_Synchronized", "KW_Transient", "KW_Val", "KW_Var", "KW_Def", "KW_Override", "KW_Create", "KW_Colon", "KW_AFTER", "KW_BEFORE", "KW_SEPARATOR", "KW_Import", "KW_FullStopFullStopFullStop", "KW_QuestionMark", "KW_Try", "KW_Finally", "KW_VerticalLine", "KW_Switch", "KW_Default", "KW_Case", "KW_FOR", "KW_ENDFOR", "KW_IF", "KW_ELSE", "KW_ENDIF", "KW_ELSEIF", "KW_CommercialAt", "KW_NumberSign", "KW_LeftSquareBracket", "KW_RightSquareBracket", "KW_PlusSignEqualsSign", "KW_HyphenMinusEqualsSign", "KW_AsteriskEqualsSign", "KW_SolidusEqualsSign", "KW_PercentSignEqualsSign", "KW_GreaterThanSignEqualsSign", "KW_VerticalLineVerticalLine", "KW_AmpersandAmpersand", "KW_EqualsSignEqualsSign", "KW_ExclamationMarkEqualsSign", "KW_EqualsSignEqualsSignEqualsSign", "KW_ExclamationMarkEqualsSignEqualsSign", "KW_Instanceof", "KW_HyphenMinusGreaterThanSign", "KW_FullStopFullStopLessThanSign", "KW_FullStopFullStop", "KW_LessThanSignGreaterThanSign", "KW_QuestionMarkColon", "KW_PlusSign", "KW_HyphenMinus", "KW_Asterisk", "KW_AsteriskAsterisk", "KW_Solidus", "KW_PercentSign", "KW_ExclamationMark", "KW_As", "KW_PlusSignPlusSign", "KW_HyphenMinusHyphenMinus", "KW_ColonColon", "KW_QuestionMarkFullStop", "KW_If", "KW_Else", "KW_For", "KW_While", "KW_Do", "KW_Super", "KW_False", "KW_True", "KW_Null", "KW_Typeof", "KW_Throw", "KW_Return", "KW_Catch", "KW_Ampersand", "RULE_ID", "RULE_HEX", "RULE_INT", "RULE_DECIMAL", "RULE_STRING", "RULE_RICH_TEXT", "RULE_RICH_TEXT_START", "RULE_RICH_TEXT_INBETWEEN", "RULE_COMMENT_RICH_TEXT_INBETWEEN", "RULE_RICH_TEXT_END", "RULE_COMMENT_RICH_TEXT_END", "RULE_IDENTIFIER_START", "RULE_UNICODE_ESCAPE", "RULE_IDENTIFIER_PART", "RULE_HEX_DIGIT", "RULE_IN_RICH_STRING", "RULE_IDENTIFIER_PART_IMPL", "RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS", "RULE_ANY_OTHER"
    };
    public static final int KW_Case=54;
    public static final int RULE_HEX=110;
    public static final int KW_SolidusEqualsSign=68;
    public static final int KW_Else=96;
    public static final int KW_Throw=105;
    public static final int KW_PlusSignEqualsSign=65;
    public static final int KW_Solidus=87;
    public static final int KW_Comma=8;
    public static final int KW_Do=99;
    public static final int KW_ExclamationMarkEqualsSignEqualsSign=76;
    public static final int KW_Extends=10;
    public static final int KW_ExclamationMarkEqualsSign=74;
    public static final int KW_Package=4;
    public static final int KW_Finally=50;
    public static final int KW_Dispatch=30;
    public static final int RULE_ID=109;
    public static final int KW_QuestionMark=48;
    public static final int KW_False=101;
    public static final int RULE_RICH_TEXT_START=115;
    public static final int KW_AmpersandAmpersand=72;
    public static final int KW_AFTER=43;
    public static final int KW_Import=46;
    public static final int KW_HyphenMinus=84;
    public static final int KW_While=98;
    public static final int KW_Return=106;
    public static final int RULE_INT=111;
    public static final int KW_Catch=107;
    public static final int RULE_ML_COMMENT=126;
    public static final int KW_BEFORE=44;
    public static final int KW_PlusSignPlusSign=91;
    public static final int KW_Var=38;
    public static final int KW_Protected=27;
    public static final int KW_As=90;
    public static final int KW_FullStop=24;
    public static final int RULE_UNICODE_ESCAPE=121;
    public static final int KW_Enum=15;
    public static final int KW_GreaterThanSign=9;
    public static final int RULE_IDENTIFIER_PART=122;
    public static final int KW_RightSquareBracket=64;
    public static final int KW_VerticalLineVerticalLine=71;
    public static final int KW_Private=26;
    public static final int KW_Val=37;
    public static final int KW_ELSEIF=60;
    public static final int KW_Implements=11;
    public static final int KW_EqualsSign=20;
    public static final int KW_Transient=36;
    public static final int KW_LessThanSignGreaterThanSign=81;
    public static final int KW_Def=39;
    public static final int KW_FullStopFullStopFullStop=47;
    public static final int KW_FullStopFullStopLessThanSign=79;
    public static final int KW_ELSE=58;
    public static final int KW_NumberSign=62;
    public static final int KW_Interface=14;
    public static final int KW_EqualsSignEqualsSign=73;
    public static final int KW_ENDFOR=56;
    public static final int KW_HyphenMinusEqualsSign=66;
    public static final int RULE_HEX_DIGIT=123;
    public static final int KW_VerticalLine=51;
    public static final int KW_EqualsSignGreaterThanSign=19;
    public static final int KW_Synchronized=35;
    public static final int KW_Create=41;
    public static final int RULE_COMMENT_RICH_TEXT_END=119;
    public static final int KW_Volatile=34;
    public static final int KW_LeftSquareBracket=63;
    public static final int KW_LeftParenthesis=17;
    public static final int RULE_IDENTIFIER_START=120;
    public static final int KW_Override=40;
    public static final int KW_Ampersand=108;
    public static final int KW_Semicolon=5;
    public static final int KW_Public=25;
    public static final int KW_IF=57;
    public static final int KW_Colon=42;
    public static final int KW_Final=31;
    public static final int KW_HyphenMinusGreaterThanSign=78;
    public static final int KW_HyphenMinusHyphenMinus=92;
    public static final int KW_FOR=55;
    public static final int KW_For=97;
    public static final int KW_CommercialAt=61;
    public static final int KW_FullStopFullStop=80;
    public static final int KW_GreaterThanSignEqualsSign=70;
    public static final int KW_PercentSign=88;
    public static final int KW_Asterisk=85;
    public static final int RULE_DECIMAL=112;
    public static final int KW_RightParenthesis=18;
    public static final int KW_AsteriskAsterisk=86;
    public static final int KW_Try=49;
    public static final int KW_If=95;
    public static final int KW_Annotation=16;
    public static final int KW_Native=33;
    public static final int KW_RightCurlyBracket=13;
    public static final int KW_ENDIF=59;
    public static final int KW_LeftCurlyBracket=12;
    public static final int KW_Strictfp=32;
    public static final int KW_Instanceof=77;
    public static final int KW_Abstract=28;
    public static final int RULE_STRING=113;
    public static final int RULE_SL_COMMENT=127;
    public static final int RULE_IN_RICH_STRING=124;
    public static final int KW_Null=103;
    public static final int KW_Super=100;
    public static final int KW_Typeof=104;
    public static final int KW_SEPARATOR=45;
    public static final int RULE_COMMENT_RICH_TEXT_INBETWEEN=117;
    public static final int KW_ExclamationMark=89;
    public static final int KW_New=23;
    public static final int EOF=-1;
    public static final int KW_AsteriskEqualsSign=67;
    public static final int KW_ColonColon=93;
    public static final int RULE_RICH_TEXT=114;
    public static final int KW_Switch=52;
    public static final int RULE_WS=128;
    public static final int KW_QuestionMarkFullStop=94;
    public static final int RULE_RICH_TEXT_END=118;
    public static final int KW_Throws=22;
    public static final int KW_LessThanSign=7;
    public static final int KW_True=102;
    public static final int RULE_ANY_OTHER=129;
    public static final int RULE_RICH_TEXT_INBETWEEN=116;
    public static final int KW_Default=53;
    public static final int RULE_IDENTIFIER_PART_IMPL=125;
    public static final int KW_Class=6;
    public static final int KW_EqualsSignEqualsSignEqualsSign=75;
    public static final int KW_Static=29;
    public static final int KW_QuestionMarkColon=82;
    public static final int KW_PlusSign=83;
    public static final int KW_Extension=21;
    public static final int KW_PercentSignEqualsSign=69;


        public InternalXtendParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public InternalXtendParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        

    public String[] getTokenNames() { return InternalXtendParser.tokenNames; }
    public String getGrammarFileName() { return "InternalXtend.g"; }


    	private XtendGrammarAccess grammarAccess;

    	public void setGrammarAccess(XtendGrammarAccess grammarAccess) {
    		this.grammarAccess = grammarAccess;
    	}

    	@Override
    	protected Grammar getGrammar() {
    		return grammarAccess.getGrammar();
    	}

    	@Override
    	protected String getValueForTokenName(String tokenName) {
    		return tokenName;
    	}
    public final void entryRuleFile() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getFileRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleFile();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getFileRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleFile() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getFileAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__File__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getFileAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleType() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleType();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleType() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Type__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleJvmSuperTypeReference() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmSuperTypeReferenceRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleJvmSuperTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getJvmSuperTypeReferenceRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleJvmSuperTypeReference() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmSuperTypeReferenceAccess().getAlternatives()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__JvmSuperTypeReference__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmSuperTypeReferenceAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXFunctionSuperTypeRef() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFunctionSuperTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXFunctionSuperTypeRef();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXFunctionSuperTypeRefRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXFunctionSuperTypeRef() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFunctionSuperTypeRefAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XFunctionSuperTypeRef__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXFunctionSuperTypeRefAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleAnnotationField() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleAnnotationField();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleAnnotationField() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleMember() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleMember();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleMember() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleTypeReferenceNoTypeArgs() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeReferenceNoTypeArgsRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleTypeReferenceNoTypeArgs();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeReferenceNoTypeArgsRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleTypeReferenceNoTypeArgs() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeReferenceNoTypeArgsAccess().getTypeAssignment()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__TypeReferenceNoTypeArgs__TypeAssignment();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeReferenceNoTypeArgsAccess().getTypeAssignment()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleTypeReferenceWithTypeArgs() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeReferenceWithTypeArgsRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleTypeReferenceWithTypeArgs();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeReferenceWithTypeArgsRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleTypeReferenceWithTypeArgs() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeReferenceWithTypeArgsAccess().getAlternatives()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__TypeReferenceWithTypeArgs__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeReferenceWithTypeArgsAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleParameterizedTypeReferenceWithTypeArgs() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterizedTypeReferenceWithTypeArgsRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleParameterizedTypeReferenceWithTypeArgs();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getParameterizedTypeReferenceWithTypeArgsRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleParameterizedTypeReferenceWithTypeArgs() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__ParameterizedTypeReferenceWithTypeArgs__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleFunctionID() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getFunctionIDRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleFunctionID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getFunctionIDRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleFunctionID() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getFunctionIDAccess().getAlternatives()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__FunctionID__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getFunctionIDAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleOperators() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOperatorsRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleOperators();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getOperatorsRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleOperators() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOperatorsAccess().getAlternatives()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Operators__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getOperatorsAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXtendEnumLiteral() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXtendEnumLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXtendEnumLiteral();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXtendEnumLiteralRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXtendEnumLiteral() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXtendEnumLiteralAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XtendEnumLiteral__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXtendEnumLiteralAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleCommonModifier() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getCommonModifierRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleCommonModifier();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getCommonModifierRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleCommonModifier() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getCommonModifierAccess().getAlternatives()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__CommonModifier__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getCommonModifierAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleFieldModifier() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getFieldModifierRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleFieldModifier();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getFieldModifierRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleFieldModifier() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getFieldModifierAccess().getAlternatives()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__FieldModifier__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getFieldModifierAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleMethodModifier() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMethodModifierRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleMethodModifier();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMethodModifierRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleMethodModifier() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMethodModifierAccess().getAlternatives()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__MethodModifier__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMethodModifierAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleCreateExtensionInfo() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getCreateExtensionInfoRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleCreateExtensionInfo();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getCreateExtensionInfoRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleCreateExtensionInfo() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getCreateExtensionInfoAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__CreateExtensionInfo__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getCreateExtensionInfoAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleValidID() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getValidIDRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleValidID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getValidIDRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleValidID() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getValidIDAccess().getAlternatives()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__ValidID__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getValidIDAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleFeatureCallID() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getFeatureCallIDRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleFeatureCallID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getFeatureCallIDRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleFeatureCallID() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getFeatureCallIDAccess().getAlternatives()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__FeatureCallID__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getFeatureCallIDAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleInnerVarID() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getInnerVarIDRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleInnerVarID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getInnerVarIDRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleInnerVarID() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getInnerVarIDAccess().getAlternatives()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__InnerVarID__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getInnerVarIDAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleParameter() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleParameter();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getParameterRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleParameter() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Parameter__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getParameterAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXAssignment() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAssignmentRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXAssignment();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAssignmentRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXAssignment() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAssignmentAccess().getAlternatives()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XAssignment__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAssignmentAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXConditionalExpression() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXConditionalExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXConditionalExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXConditionalExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXConditionalExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXConditionalExpressionAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XConditionalExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXConditionalExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXTryCatchFinallyExpression() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTryCatchFinallyExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXTryCatchFinallyExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXTryCatchFinallyExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXTryCatchFinallyExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTryCatchFinallyExpressionAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XTryCatchFinallyExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXTryCatchFinallyExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXVariableDeclaration() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXVariableDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXVariableDeclarationRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXVariableDeclaration() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXVariableDeclarationAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XVariableDeclaration__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXVariableDeclarationAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleInitializedVariableDeclaration() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getInitializedVariableDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleInitializedVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getInitializedVariableDeclarationRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleInitializedVariableDeclaration() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getInitializedVariableDeclarationAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__InitializedVariableDeclaration__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getInitializedVariableDeclarationAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void ruleVariableModifier() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getVariableModifierAccess().getAlternatives()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__VariableModifier__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getVariableModifierAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXConstructorCall() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXConstructorCallRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXConstructorCall();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXConstructorCallRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXConstructorCall() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXConstructorCallAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XConstructorCall__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXConstructorCallAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXbaseConstructorCall() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXbaseConstructorCallRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXbaseConstructorCall();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXbaseConstructorCallRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXbaseConstructorCall() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXbaseConstructorCallAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XbaseConstructorCall__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXbaseConstructorCallAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleJvmFormalParameter() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmFormalParameterRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleJvmFormalParameter();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getJvmFormalParameterRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleJvmFormalParameter() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmFormalParameterAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__JvmFormalParameter__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmFormalParameterAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleFullJvmFormalParameter() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getFullJvmFormalParameterRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleFullJvmFormalParameter();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getFullJvmFormalParameterRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleFullJvmFormalParameter() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getFullJvmFormalParameterAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__FullJvmFormalParameter__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getFullJvmFormalParameterAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleMultiTypeReference() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMultiTypeReferenceRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleMultiTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMultiTypeReferenceRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleMultiTypeReference() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMultiTypeReferenceAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__MultiTypeReference__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMultiTypeReferenceAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXStringLiteral() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXStringLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXStringLiteral();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXStringLiteralRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXStringLiteral() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXStringLiteralAccess().getAlternatives()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XStringLiteral__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXStringLiteralAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXSwitchExpression() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSwitchExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXSwitchExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXSwitchExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXSwitchExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSwitchExpressionAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XSwitchExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXSwitchExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXCasePart() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXCasePartRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXCasePart();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXCasePartRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXCasePart() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXCasePartAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XCasePart__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXCasePartAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXExpressionOrSimpleConstructorCall() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXExpressionOrSimpleConstructorCallRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXExpressionOrSimpleConstructorCall();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXExpressionOrSimpleConstructorCallRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXExpressionOrSimpleConstructorCall() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXExpressionOrSimpleConstructorCallAccess().getAlternatives()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XExpressionOrSimpleConstructorCall__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXExpressionOrSimpleConstructorCallAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleSimpleStringLiteral() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getSimpleStringLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSimpleStringLiteral();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getSimpleStringLiteralRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleSimpleStringLiteral() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getSimpleStringLiteralAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__SimpleStringLiteral__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getSimpleStringLiteralAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleRichString() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleRichString();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleRichString() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__RichString__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleRichStringLiteral() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleRichStringLiteral();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringLiteralRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleRichStringLiteral() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringLiteralAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__RichStringLiteral__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringLiteralAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleRichStringLiteralStart() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringLiteralStartRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleRichStringLiteralStart();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringLiteralStartRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleRichStringLiteralStart() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringLiteralStartAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__RichStringLiteralStart__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringLiteralStartAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleRichStringLiteralInbetween() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringLiteralInbetweenRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleRichStringLiteralInbetween();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringLiteralInbetweenRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleRichStringLiteralInbetween() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringLiteralInbetweenAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__RichStringLiteralInbetween__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringLiteralInbetweenAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleRichStringLiteralEnd() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringLiteralEndRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleRichStringLiteralEnd();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringLiteralEndRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleRichStringLiteralEnd() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringLiteralEndAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__RichStringLiteralEnd__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringLiteralEndAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleInternalRichString() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getInternalRichStringRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleInternalRichString();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getInternalRichStringRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleInternalRichString() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getInternalRichStringAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__InternalRichString__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getInternalRichStringAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleRichStringPart() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringPartRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleRichStringPart();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringPartRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleRichStringPart() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringPartAccess().getAlternatives()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__RichStringPart__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringPartAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleRichStringForLoop() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringForLoopRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleRichStringForLoop();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringForLoopRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleRichStringForLoop() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringForLoopAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__RichStringForLoop__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringForLoopAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleRichStringIf() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringIfRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleRichStringIf();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringIfRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleRichStringIf() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringIfAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__RichStringIf__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringIfAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleRichStringElseIf() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringElseIfRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleRichStringElseIf();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringElseIfRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleRichStringElseIf() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringElseIfAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__RichStringElseIf__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringElseIfAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXAnnotation() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXAnnotation();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXAnnotation() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XAnnotation__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXAnnotationElementValuePair() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValuePairRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXAnnotationElementValuePair();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValuePairRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXAnnotationElementValuePair() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValuePairAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValuePair__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValuePairAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXAnnotationElementValueOrCommaList() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValueOrCommaListRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXAnnotationElementValueOrCommaList();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValueOrCommaListRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXAnnotationElementValueOrCommaList() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getAlternatives()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValueOrCommaList__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXAnnotationElementValue() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValueRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXAnnotationElementValue();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValueRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXAnnotationElementValue() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValueAccess().getAlternatives()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValue__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValueAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXAnnotationOrExpression() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationOrExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXAnnotationOrExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationOrExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXAnnotationOrExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationOrExpressionAccess().getAlternatives()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XAnnotationOrExpression__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationOrExpressionAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXExpression() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXExpressionAccess().getXAssignmentParserRuleCall()); 
            }
            pushFollow(FOLLOW_2);
            ruleXAssignment();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXExpressionAccess().getXAssignmentParserRuleCall()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleOpSingleAssign() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOpSingleAssignRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleOpSingleAssign();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getOpSingleAssignRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleOpSingleAssign() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOpSingleAssignAccess().getEqualsSignKeyword()); 
            }
            match(input,KW_EqualsSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getOpSingleAssignAccess().getEqualsSignKeyword()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleOpMultiAssign() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOpMultiAssignRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleOpMultiAssign();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getOpMultiAssignRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleOpMultiAssign() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOpMultiAssignAccess().getAlternatives()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__OpMultiAssign__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getOpMultiAssignAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXOrExpression() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXOrExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXOrExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXOrExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXOrExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXOrExpressionAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XOrExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXOrExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleOpOr() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOpOrRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleOpOr();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getOpOrRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleOpOr() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOpOrAccess().getVerticalLineVerticalLineKeyword()); 
            }
            match(input,KW_VerticalLineVerticalLine,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getOpOrAccess().getVerticalLineVerticalLineKeyword()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXAndExpression() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAndExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXAndExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAndExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXAndExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAndExpressionAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XAndExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAndExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleOpAnd() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOpAndRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleOpAnd();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getOpAndRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleOpAnd() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOpAndAccess().getAmpersandAmpersandKeyword()); 
            }
            match(input,KW_AmpersandAmpersand,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getOpAndAccess().getAmpersandAmpersandKeyword()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXEqualityExpression() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXEqualityExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXEqualityExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXEqualityExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXEqualityExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXEqualityExpressionAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XEqualityExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXEqualityExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleOpEquality() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOpEqualityRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleOpEquality();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getOpEqualityRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleOpEquality() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOpEqualityAccess().getAlternatives()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__OpEquality__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getOpEqualityAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXRelationalExpression() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXRelationalExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXRelationalExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXRelationalExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXRelationalExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXRelationalExpressionAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XRelationalExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXRelationalExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleOpCompare() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOpCompareRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleOpCompare();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getOpCompareRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleOpCompare() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOpCompareAccess().getAlternatives()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__OpCompare__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getOpCompareAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXOtherOperatorExpression() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXOtherOperatorExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXOtherOperatorExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXOtherOperatorExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXOtherOperatorExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXOtherOperatorExpressionAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XOtherOperatorExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXOtherOperatorExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleOpOther() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOpOtherRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleOpOther();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getOpOtherRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleOpOther() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOpOtherAccess().getAlternatives()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__OpOther__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getOpOtherAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXAdditiveExpression() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAdditiveExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXAdditiveExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAdditiveExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXAdditiveExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAdditiveExpressionAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XAdditiveExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAdditiveExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleOpAdd() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOpAddRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleOpAdd();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getOpAddRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleOpAdd() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOpAddAccess().getAlternatives()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__OpAdd__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getOpAddAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXMultiplicativeExpression() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMultiplicativeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXMultiplicativeExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXMultiplicativeExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXMultiplicativeExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMultiplicativeExpressionAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XMultiplicativeExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXMultiplicativeExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleOpMulti() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOpMultiRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleOpMulti();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getOpMultiRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleOpMulti() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOpMultiAccess().getAlternatives()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__OpMulti__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getOpMultiAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXUnaryOperation() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXUnaryOperationRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXUnaryOperation();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXUnaryOperationRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXUnaryOperation() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXUnaryOperationAccess().getAlternatives()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XUnaryOperation__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXUnaryOperationAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleOpUnary() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOpUnaryRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleOpUnary();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getOpUnaryRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleOpUnary() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOpUnaryAccess().getAlternatives()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__OpUnary__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getOpUnaryAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXCastedExpression() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXCastedExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXCastedExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXCastedExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXCastedExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXCastedExpressionAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XCastedExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXCastedExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXPostfixOperation() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXPostfixOperationRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXPostfixOperation();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXPostfixOperationRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXPostfixOperation() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXPostfixOperationAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XPostfixOperation__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXPostfixOperationAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleOpPostfix() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOpPostfixRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleOpPostfix();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getOpPostfixRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleOpPostfix() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOpPostfixAccess().getAlternatives()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__OpPostfix__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getOpPostfixAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXMemberFeatureCall() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXMemberFeatureCall();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXMemberFeatureCall() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXPrimaryExpression() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXPrimaryExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXPrimaryExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXPrimaryExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXPrimaryExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXPrimaryExpressionAccess().getAlternatives()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XPrimaryExpression__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXPrimaryExpressionAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXLiteral() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXLiteral();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXLiteralRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXLiteral() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXLiteralAccess().getAlternatives()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XLiteral__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXLiteralAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXCollectionLiteral() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXCollectionLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXCollectionLiteral();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXCollectionLiteralRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXCollectionLiteral() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXCollectionLiteralAccess().getAlternatives()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XCollectionLiteral__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXCollectionLiteralAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXSetLiteral() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSetLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXSetLiteral();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXSetLiteralRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXSetLiteral() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSetLiteralAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XSetLiteral__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXSetLiteralAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXListLiteral() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXListLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXListLiteral();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXListLiteralRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXListLiteral() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXListLiteralAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XListLiteral__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXListLiteralAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXClosure() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXClosureRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXClosure();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXClosureRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXClosure() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXClosureAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XClosure__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXClosureAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXExpressionInClosure() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXExpressionInClosureRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXExpressionInClosure();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXExpressionInClosureRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXExpressionInClosure() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXExpressionInClosureAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XExpressionInClosure__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXExpressionInClosureAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXShortClosure() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXShortClosureRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXShortClosure();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXShortClosureRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXShortClosure() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXShortClosureAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XShortClosure__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXShortClosureAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXParenthesizedExpression() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXParenthesizedExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXParenthesizedExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXParenthesizedExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXParenthesizedExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXParenthesizedExpressionAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XParenthesizedExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXParenthesizedExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXIfExpression() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXIfExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXIfExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXIfExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXIfExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXIfExpressionAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XIfExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXIfExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXForLoopExpression() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXForLoopExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXForLoopExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXForLoopExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXForLoopExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXForLoopExpressionAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XForLoopExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXForLoopExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXBasicForLoopExpression() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXBasicForLoopExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXBasicForLoopExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXBasicForLoopExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXBasicForLoopExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXBasicForLoopExpressionAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XBasicForLoopExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXBasicForLoopExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXWhileExpression() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXWhileExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXWhileExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXWhileExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXWhileExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXWhileExpressionAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XWhileExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXWhileExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXDoWhileExpression() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXDoWhileExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXDoWhileExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXDoWhileExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXDoWhileExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXDoWhileExpressionAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XDoWhileExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXDoWhileExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXBlockExpression() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXBlockExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXBlockExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXBlockExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXBlockExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXBlockExpressionAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XBlockExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXBlockExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXExpressionOrVarDeclaration() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXExpressionOrVarDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXExpressionOrVarDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXExpressionOrVarDeclarationRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXExpressionOrVarDeclaration() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXExpressionOrVarDeclarationAccess().getAlternatives()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XExpressionOrVarDeclaration__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXExpressionOrVarDeclarationAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXFeatureCall() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFeatureCallRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXFeatureCall();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXFeatureCallRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXFeatureCall() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFeatureCallAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XFeatureCall__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXFeatureCallAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleIdOrSuper() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getIdOrSuperRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleIdOrSuper();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getIdOrSuperRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleIdOrSuper() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getIdOrSuperAccess().getAlternatives()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__IdOrSuper__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getIdOrSuperAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXBooleanLiteral() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXBooleanLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXBooleanLiteral();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXBooleanLiteralRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXBooleanLiteral() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXBooleanLiteralAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XBooleanLiteral__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXBooleanLiteralAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXNullLiteral() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXNullLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXNullLiteral();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXNullLiteralRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXNullLiteral() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXNullLiteralAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XNullLiteral__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXNullLiteralAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXNumberLiteral() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXNumberLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXNumberLiteral();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXNumberLiteralRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXNumberLiteral() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXNumberLiteralAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XNumberLiteral__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXNumberLiteralAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXTypeLiteral() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTypeLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXTypeLiteral();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXTypeLiteralRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXTypeLiteral() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTypeLiteralAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XTypeLiteral__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXTypeLiteralAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXThrowExpression() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXThrowExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXThrowExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXThrowExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXThrowExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXThrowExpressionAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XThrowExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXThrowExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXReturnExpression() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXReturnExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXReturnExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXReturnExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXReturnExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXReturnExpressionAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XReturnExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXReturnExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXSynchronizedExpression() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSynchronizedExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXSynchronizedExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXSynchronizedExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXSynchronizedExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSynchronizedExpressionAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XSynchronizedExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXSynchronizedExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXCatchClause() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXCatchClauseRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXCatchClause();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXCatchClauseRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXCatchClause() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXCatchClauseAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XCatchClause__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXCatchClauseAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleQualifiedName() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getQualifiedNameRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleQualifiedName();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getQualifiedNameRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleQualifiedName() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getQualifiedNameAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__QualifiedName__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getQualifiedNameAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleNumber() throws RecognitionException {
         
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getNumberRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleNumber();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getNumberRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	myHiddenTokenState.restore();

        }
        return ;
    }
    public final void ruleNumber() throws RecognitionException {

        		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getNumberAccess().getAlternatives()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Number__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getNumberAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);
            	myHiddenTokenState.restore();

        }
        return ;
    }
    public final void entryRuleJvmTypeReference() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmTypeReferenceRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleJvmTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getJvmTypeReferenceRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleJvmTypeReference() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmTypeReferenceAccess().getAlternatives()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__JvmTypeReference__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmTypeReferenceAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleArrayBrackets() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getArrayBracketsRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleArrayBrackets();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getArrayBracketsRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleArrayBrackets() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getArrayBracketsAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__ArrayBrackets__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getArrayBracketsAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXFunctionTypeRef() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFunctionTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXFunctionTypeRef();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXFunctionTypeRefRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXFunctionTypeRef() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFunctionTypeRefAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XFunctionTypeRef__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXFunctionTypeRefAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleJvmParameterizedTypeReference() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmParameterizedTypeReferenceRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleJvmParameterizedTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getJvmParameterizedTypeReferenceRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleJvmParameterizedTypeReference() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmParameterizedTypeReferenceAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__JvmParameterizedTypeReference__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmParameterizedTypeReferenceAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleJvmArgumentTypeReference() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmArgumentTypeReferenceRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleJvmArgumentTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getJvmArgumentTypeReferenceRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleJvmArgumentTypeReference() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmArgumentTypeReferenceAccess().getAlternatives()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__JvmArgumentTypeReference__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmArgumentTypeReferenceAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleJvmWildcardTypeReference() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmWildcardTypeReferenceRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleJvmWildcardTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getJvmWildcardTypeReferenceRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleJvmWildcardTypeReference() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmWildcardTypeReferenceAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__JvmWildcardTypeReference__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmWildcardTypeReferenceAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleJvmUpperBound() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmUpperBoundRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleJvmUpperBound();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getJvmUpperBoundRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleJvmUpperBound() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmUpperBoundAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__JvmUpperBound__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmUpperBoundAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleJvmUpperBoundAnded() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmUpperBoundAndedRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleJvmUpperBoundAnded();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getJvmUpperBoundAndedRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleJvmUpperBoundAnded() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmUpperBoundAndedAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__JvmUpperBoundAnded__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmUpperBoundAndedAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleJvmLowerBound() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmLowerBoundRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleJvmLowerBound();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getJvmLowerBoundRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleJvmLowerBound() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmLowerBoundAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__JvmLowerBound__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmLowerBoundAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleJvmLowerBoundAnded() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmLowerBoundAndedRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleJvmLowerBoundAnded();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getJvmLowerBoundAndedRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleJvmLowerBoundAnded() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmLowerBoundAndedAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__JvmLowerBoundAnded__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmLowerBoundAndedAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleJvmTypeParameter() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmTypeParameterRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleJvmTypeParameter();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getJvmTypeParameterRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleJvmTypeParameter() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmTypeParameterAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__JvmTypeParameter__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmTypeParameterAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleQualifiedNameWithWildcard() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getQualifiedNameWithWildcardRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleQualifiedNameWithWildcard();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getQualifiedNameWithWildcardRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleQualifiedNameWithWildcard() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__QualifiedNameWithWildcard__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXImportSection() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXImportSectionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXImportSection();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXImportSectionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXImportSection() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXImportSectionAccess().getImportDeclarationsAssignment()); 
            }
            {
            pushFollow(FOLLOW_3);
            rule__XImportSection__ImportDeclarationsAssignment();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXImportSectionAccess().getImportDeclarationsAssignment()); 
            }

            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXImportSectionAccess().getImportDeclarationsAssignment()); 
            }
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==KW_Import) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_3);
            	    rule__XImportSection__ImportDeclarationsAssignment();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getXImportSectionAccess().getImportDeclarationsAssignment()); 
            }

            }


            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleXImportDeclaration() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXImportDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXImportDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXImportDeclarationRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleXImportDeclaration() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXImportDeclarationAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XImportDeclaration__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXImportDeclarationAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void entryRuleQualifiedNameInStaticImport() throws RecognitionException {
        try {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getQualifiedNameInStaticImportRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleQualifiedNameInStaticImport();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getQualifiedNameInStaticImportRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    public final void ruleQualifiedNameInStaticImport() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getQualifiedNameInStaticImportAccess().getGroup()); 
            }
            {
            pushFollow(FOLLOW_4);
            rule__QualifiedNameInStaticImport__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getQualifiedNameInStaticImportAccess().getGroup()); 
            }

            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getQualifiedNameInStaticImportAccess().getGroup()); 
            }
            loop2:
            do {
                int alt2=2;
                switch ( input.LA(1) ) {
                case RULE_ID:
                    {
                    int LA2_2 = input.LA(2);

                    if ( (LA2_2==KW_FullStop) ) {
                        alt2=1;
                    }


                    }
                    break;
                case KW_Create:
                    {
                    int LA2_3 = input.LA(2);

                    if ( (LA2_3==KW_FullStop) ) {
                        alt2=1;
                    }


                    }
                    break;
                case KW_Annotation:
                    {
                    int LA2_4 = input.LA(2);

                    if ( (LA2_4==KW_FullStop) ) {
                        alt2=1;
                    }


                    }
                    break;
                case KW_AFTER:
                    {
                    int LA2_5 = input.LA(2);

                    if ( (LA2_5==KW_FullStop) ) {
                        alt2=1;
                    }


                    }
                    break;
                case KW_BEFORE:
                    {
                    int LA2_6 = input.LA(2);

                    if ( (LA2_6==KW_FullStop) ) {
                        alt2=1;
                    }


                    }
                    break;
                case KW_SEPARATOR:
                    {
                    int LA2_7 = input.LA(2);

                    if ( (LA2_7==KW_FullStop) ) {
                        alt2=1;
                    }


                    }
                    break;

                }

                switch (alt2) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_4);
            	    rule__QualifiedNameInStaticImport__Group__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getQualifiedNameInStaticImportAccess().getGroup()); 
            }

            }


            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Alternatives_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt3=4;
            alt3 = dfa3.predict(input);
            switch (alt3) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getTypeAccess().getGroup_2_0()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__Type__Group_2_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getTypeAccess().getGroup_2_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getTypeAccess().getGroup_2_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__Type__Group_2_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getTypeAccess().getGroup_2_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getTypeAccess().getGroup_2_2()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__Type__Group_2_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getTypeAccess().getGroup_2_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getTypeAccess().getGroup_2_3()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__Type__Group_2_3__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getTypeAccess().getGroup_2_3()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmSuperTypeReference__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==KW_Annotation||LA4_0==KW_Create||(LA4_0>=KW_AFTER && LA4_0<=KW_SEPARATOR)||LA4_0==RULE_ID) ) {
                alt4=1;
            }
            else if ( (LA4_0==KW_LeftParenthesis||LA4_0==KW_EqualsSignGreaterThanSign) ) {
                alt4=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);

                throw nvae;
            }
            switch (alt4) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getJvmSuperTypeReferenceAccess().getJvmParameterizedTypeReferenceParserRuleCall_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleJvmParameterizedTypeReference();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getJvmSuperTypeReferenceAccess().getJvmParameterizedTypeReferenceParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getJvmSuperTypeReferenceAccess().getXFunctionSuperTypeRefParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleXFunctionSuperTypeRef();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getJvmSuperTypeReferenceAccess().getXFunctionSuperTypeRefParserRuleCall_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Alternatives_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt5=5;
            alt5 = dfa5.predict(input);
            switch (alt5) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getAnnotationFieldAccess().getGroup_2_0()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__AnnotationField__Group_2_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getAnnotationFieldAccess().getGroup_2_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getAnnotationFieldAccess().getGroup_2_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__AnnotationField__Group_2_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getAnnotationFieldAccess().getGroup_2_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getAnnotationFieldAccess().getGroup_2_2()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__AnnotationField__Group_2_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getAnnotationFieldAccess().getGroup_2_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getAnnotationFieldAccess().getGroup_2_3()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__AnnotationField__Group_2_3__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getAnnotationFieldAccess().getGroup_2_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getAnnotationFieldAccess().getGroup_2_4()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__AnnotationField__Group_2_4__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getAnnotationFieldAccess().getGroup_2_4()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Alternatives_2_0_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt6=2;
            alt6 = dfa6.predict(input);
            switch (alt6) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getAnnotationFieldAccess().getGroup_2_0_0_0()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__AnnotationField__Group_2_0_0_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getAnnotationFieldAccess().getGroup_2_0_0_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getAnnotationFieldAccess().getGroup_2_0_0_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__AnnotationField__Group_2_0_0_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getAnnotationFieldAccess().getGroup_2_0_0_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Alternatives_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt7=7;
            alt7 = dfa7.predict(input);
            switch (alt7) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getMemberAccess().getGroup_2_0()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__Member__Group_2_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getMemberAccess().getGroup_2_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getMemberAccess().getGroup_2_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__Member__Group_2_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getMemberAccess().getGroup_2_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getMemberAccess().getGroup_2_2()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__Member__Group_2_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getMemberAccess().getGroup_2_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getMemberAccess().getGroup_2_3()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__Member__Group_2_3__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getMemberAccess().getGroup_2_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getMemberAccess().getGroup_2_4()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__Member__Group_2_4__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getMemberAccess().getGroup_2_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getMemberAccess().getGroup_2_5()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__Member__Group_2_5__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getMemberAccess().getGroup_2_5()); 
                    }

                    }


                    }
                    break;
                case 7 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getMemberAccess().getGroup_2_6()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__Member__Group_2_6__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getMemberAccess().getGroup_2_6()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Alternatives_2_0_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt8=4;
            alt8 = dfa8.predict(input);
            switch (alt8) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getMemberAccess().getGroup_2_0_2_0()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__Member__Group_2_0_2_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getMemberAccess().getGroup_2_0_2_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getMemberAccess().getGroup_2_0_2_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__Member__Group_2_0_2_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getMemberAccess().getGroup_2_0_2_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getMemberAccess().getGroup_2_0_2_2()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__Member__Group_2_0_2_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getMemberAccess().getGroup_2_0_2_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getMemberAccess().getGroup_2_0_2_3()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__Member__Group_2_0_2_3__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getMemberAccess().getGroup_2_0_2_3()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Alternatives_2_0_2_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( ((LA9_0>=KW_Val && LA9_0<=KW_Var)) ) {
                alt9=1;
            }
            else if ( (LA9_0==KW_Package||(LA9_0>=KW_Public && LA9_0<=KW_Transient)) ) {
                alt9=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;
            }
            switch (alt9) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getMemberAccess().getModifiersAssignment_2_0_2_1_1_0()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__Member__ModifiersAssignment_2_0_2_1_1_0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getMemberAccess().getModifiersAssignment_2_0_2_1_1_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getMemberAccess().getModifiersAssignment_2_0_2_1_1_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__Member__ModifiersAssignment_2_0_2_1_1_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getMemberAccess().getModifiersAssignment_2_0_2_1_1_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Alternatives_2_1_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==KW_Package||(LA10_0>=KW_Public && LA10_0<=KW_Transient)) ) {
                alt10=1;
            }
            else if ( ((LA10_0>=KW_Def && LA10_0<=KW_Override)) ) {
                alt10=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;
            }
            switch (alt10) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getMemberAccess().getModifiersAssignment_2_1_3_0()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__Member__ModifiersAssignment_2_1_3_0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getMemberAccess().getModifiersAssignment_2_1_3_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getMemberAccess().getModifiersAssignment_2_1_3_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__Member__ModifiersAssignment_2_1_3_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getMemberAccess().getModifiersAssignment_2_1_3_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Alternatives_2_1_5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt11=5;
            alt11 = dfa11.predict(input);
            switch (alt11) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getMemberAccess().getGroup_2_1_5_0()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__Member__Group_2_1_5_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getMemberAccess().getGroup_2_1_5_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getMemberAccess().getGroup_2_1_5_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__Member__Group_2_1_5_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getMemberAccess().getGroup_2_1_5_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getMemberAccess().getGroup_2_1_5_2()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__Member__Group_2_1_5_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getMemberAccess().getGroup_2_1_5_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getMemberAccess().getGroup_2_1_5_3()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__Member__Group_2_1_5_3__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getMemberAccess().getGroup_2_1_5_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getMemberAccess().getGroup_2_1_5_4()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__Member__Group_2_1_5_4__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getMemberAccess().getGroup_2_1_5_4()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Alternatives_2_1_9() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt12=3;
            switch ( input.LA(1) ) {
            case KW_LeftCurlyBracket:
                {
                alt12=1;
                }
                break;
            case RULE_RICH_TEXT:
            case RULE_RICH_TEXT_START:
                {
                alt12=2;
                }
                break;
            case KW_Semicolon:
                {
                alt12=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;
            }

            switch (alt12) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getMemberAccess().getExpressionAssignment_2_1_9_0()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__Member__ExpressionAssignment_2_1_9_0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getMemberAccess().getExpressionAssignment_2_1_9_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getMemberAccess().getExpressionAssignment_2_1_9_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__Member__ExpressionAssignment_2_1_9_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getMemberAccess().getExpressionAssignment_2_1_9_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getMemberAccess().getSemicolonKeyword_2_1_9_2()); 
                    }
                    match(input,KW_Semicolon,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getMemberAccess().getSemicolonKeyword_2_1_9_2()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__TypeReferenceWithTypeArgs__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt13=3;
            alt13 = dfa13.predict(input);
            switch (alt13) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getTypeReferenceWithTypeArgsAccess().getGroup_0()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__TypeReferenceWithTypeArgs__Group_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getTypeReferenceWithTypeArgsAccess().getGroup_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getTypeReferenceWithTypeArgsAccess().getGroup_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__TypeReferenceWithTypeArgs__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getTypeReferenceWithTypeArgsAccess().getGroup_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getTypeReferenceWithTypeArgsAccess().getXFunctionTypeRefParserRuleCall_2()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleXFunctionTypeRef();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getTypeReferenceWithTypeArgsAccess().getXFunctionTypeRefParserRuleCall_2()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__FunctionID__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==KW_Annotation||LA14_0==KW_Create||(LA14_0>=KW_AFTER && LA14_0<=KW_SEPARATOR)||LA14_0==RULE_ID) ) {
                alt14=1;
            }
            else if ( (LA14_0==KW_LessThanSign||LA14_0==KW_GreaterThanSign||LA14_0==KW_EqualsSignGreaterThanSign||(LA14_0>=KW_PlusSignEqualsSign && LA14_0<=KW_ExclamationMarkEqualsSignEqualsSign)||(LA14_0>=KW_HyphenMinusGreaterThanSign && LA14_0<=KW_ExclamationMark)||(LA14_0>=KW_PlusSignPlusSign && LA14_0<=KW_HyphenMinusHyphenMinus)) ) {
                alt14=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;
            }
            switch (alt14) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getFunctionIDAccess().getValidIDParserRuleCall_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleValidID();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getFunctionIDAccess().getValidIDParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getFunctionIDAccess().getOperatorsParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleOperators();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getFunctionIDAccess().getOperatorsParserRuleCall_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Operators__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt15=9;
            alt15 = dfa15.predict(input);
            switch (alt15) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOperatorsAccess().getOpMultiAssignParserRuleCall_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleOpMultiAssign();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getOperatorsAccess().getOpMultiAssignParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOperatorsAccess().getOpOrParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleOpOr();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getOperatorsAccess().getOpOrParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOperatorsAccess().getOpAndParserRuleCall_2()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleOpAnd();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getOperatorsAccess().getOpAndParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOperatorsAccess().getOpEqualityParserRuleCall_3()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleOpEquality();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getOperatorsAccess().getOpEqualityParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOperatorsAccess().getOpCompareParserRuleCall_4()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleOpCompare();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getOperatorsAccess().getOpCompareParserRuleCall_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOperatorsAccess().getOpOtherParserRuleCall_5()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleOpOther();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getOperatorsAccess().getOpOtherParserRuleCall_5()); 
                    }

                    }


                    }
                    break;
                case 7 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOperatorsAccess().getOpMultiParserRuleCall_6()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleOpMulti();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getOperatorsAccess().getOpMultiParserRuleCall_6()); 
                    }

                    }


                    }
                    break;
                case 8 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOperatorsAccess().getOpUnaryParserRuleCall_7()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleOpUnary();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getOperatorsAccess().getOpUnaryParserRuleCall_7()); 
                    }

                    }


                    }
                    break;
                case 9 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOperatorsAccess().getOpPostfixParserRuleCall_8()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleOpPostfix();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getOperatorsAccess().getOpPostfixParserRuleCall_8()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__CommonModifier__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt16=13;
            switch ( input.LA(1) ) {
            case KW_Public:
                {
                alt16=1;
                }
                break;
            case KW_Private:
                {
                alt16=2;
                }
                break;
            case KW_Protected:
                {
                alt16=3;
                }
                break;
            case KW_Package:
                {
                alt16=4;
                }
                break;
            case KW_Abstract:
                {
                alt16=5;
                }
                break;
            case KW_Static:
                {
                alt16=6;
                }
                break;
            case KW_Dispatch:
                {
                alt16=7;
                }
                break;
            case KW_Final:
                {
                alt16=8;
                }
                break;
            case KW_Strictfp:
                {
                alt16=9;
                }
                break;
            case KW_Native:
                {
                alt16=10;
                }
                break;
            case KW_Volatile:
                {
                alt16=11;
                }
                break;
            case KW_Synchronized:
                {
                alt16=12;
                }
                break;
            case KW_Transient:
                {
                alt16=13;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;
            }

            switch (alt16) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getCommonModifierAccess().getPublicKeyword_0()); 
                    }
                    match(input,KW_Public,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getCommonModifierAccess().getPublicKeyword_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getCommonModifierAccess().getPrivateKeyword_1()); 
                    }
                    match(input,KW_Private,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getCommonModifierAccess().getPrivateKeyword_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getCommonModifierAccess().getProtectedKeyword_2()); 
                    }
                    match(input,KW_Protected,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getCommonModifierAccess().getProtectedKeyword_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getCommonModifierAccess().getPackageKeyword_3()); 
                    }
                    match(input,KW_Package,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getCommonModifierAccess().getPackageKeyword_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getCommonModifierAccess().getAbstractKeyword_4()); 
                    }
                    match(input,KW_Abstract,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getCommonModifierAccess().getAbstractKeyword_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getCommonModifierAccess().getStaticKeyword_5()); 
                    }
                    match(input,KW_Static,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getCommonModifierAccess().getStaticKeyword_5()); 
                    }

                    }


                    }
                    break;
                case 7 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getCommonModifierAccess().getDispatchKeyword_6()); 
                    }
                    match(input,KW_Dispatch,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getCommonModifierAccess().getDispatchKeyword_6()); 
                    }

                    }


                    }
                    break;
                case 8 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getCommonModifierAccess().getFinalKeyword_7()); 
                    }
                    match(input,KW_Final,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getCommonModifierAccess().getFinalKeyword_7()); 
                    }

                    }


                    }
                    break;
                case 9 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getCommonModifierAccess().getStrictfpKeyword_8()); 
                    }
                    match(input,KW_Strictfp,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getCommonModifierAccess().getStrictfpKeyword_8()); 
                    }

                    }


                    }
                    break;
                case 10 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getCommonModifierAccess().getNativeKeyword_9()); 
                    }
                    match(input,KW_Native,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getCommonModifierAccess().getNativeKeyword_9()); 
                    }

                    }


                    }
                    break;
                case 11 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getCommonModifierAccess().getVolatileKeyword_10()); 
                    }
                    match(input,KW_Volatile,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getCommonModifierAccess().getVolatileKeyword_10()); 
                    }

                    }


                    }
                    break;
                case 12 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getCommonModifierAccess().getSynchronizedKeyword_11()); 
                    }
                    match(input,KW_Synchronized,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getCommonModifierAccess().getSynchronizedKeyword_11()); 
                    }

                    }


                    }
                    break;
                case 13 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getCommonModifierAccess().getTransientKeyword_12()); 
                    }
                    match(input,KW_Transient,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getCommonModifierAccess().getTransientKeyword_12()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__FieldModifier__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==KW_Val) ) {
                alt17=1;
            }
            else if ( (LA17_0==KW_Var) ) {
                alt17=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;
            }
            switch (alt17) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getFieldModifierAccess().getValKeyword_0()); 
                    }
                    match(input,KW_Val,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getFieldModifierAccess().getValKeyword_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getFieldModifierAccess().getVarKeyword_1()); 
                    }
                    match(input,KW_Var,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getFieldModifierAccess().getVarKeyword_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__MethodModifier__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==KW_Def) ) {
                alt18=1;
            }
            else if ( (LA18_0==KW_Override) ) {
                alt18=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 18, 0, input);

                throw nvae;
            }
            switch (alt18) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getMethodModifierAccess().getDefKeyword_0()); 
                    }
                    match(input,KW_Def,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getMethodModifierAccess().getDefKeyword_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getMethodModifierAccess().getOverrideKeyword_1()); 
                    }
                    match(input,KW_Override,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getMethodModifierAccess().getOverrideKeyword_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ValidID__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt19=6;
            switch ( input.LA(1) ) {
            case RULE_ID:
                {
                alt19=1;
                }
                break;
            case KW_Create:
                {
                alt19=2;
                }
                break;
            case KW_Annotation:
                {
                alt19=3;
                }
                break;
            case KW_AFTER:
                {
                alt19=4;
                }
                break;
            case KW_BEFORE:
                {
                alt19=5;
                }
                break;
            case KW_SEPARATOR:
                {
                alt19=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 19, 0, input);

                throw nvae;
            }

            switch (alt19) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getValidIDAccess().getIDTerminalRuleCall_0()); 
                    }
                    match(input,RULE_ID,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getValidIDAccess().getIDTerminalRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getValidIDAccess().getCreateKeyword_1()); 
                    }
                    match(input,KW_Create,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getValidIDAccess().getCreateKeyword_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getValidIDAccess().getAnnotationKeyword_2()); 
                    }
                    match(input,KW_Annotation,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getValidIDAccess().getAnnotationKeyword_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getValidIDAccess().getAFTERKeyword_3()); 
                    }
                    match(input,KW_AFTER,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getValidIDAccess().getAFTERKeyword_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getValidIDAccess().getBEFOREKeyword_4()); 
                    }
                    match(input,KW_BEFORE,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getValidIDAccess().getBEFOREKeyword_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getValidIDAccess().getSEPARATORKeyword_5()); 
                    }
                    match(input,KW_SEPARATOR,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getValidIDAccess().getSEPARATORKeyword_5()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__FeatureCallID__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==KW_Package||LA20_0==KW_Class||(LA20_0>=KW_Extends && LA20_0<=KW_Implements)||(LA20_0>=KW_Interface && LA20_0<=KW_Annotation)||LA20_0==KW_Throws||(LA20_0>=KW_Public && LA20_0<=KW_Transient)||(LA20_0>=KW_Def && LA20_0<=KW_Create)||(LA20_0>=KW_AFTER && LA20_0<=KW_Import)||LA20_0==RULE_ID) ) {
                alt20=1;
            }
            else if ( (LA20_0==KW_Extension) ) {
                alt20=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 20, 0, input);

                throw nvae;
            }
            switch (alt20) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getFeatureCallIDAccess().getInnerVarIDParserRuleCall_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleInnerVarID();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getFeatureCallIDAccess().getInnerVarIDParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getFeatureCallIDAccess().getExtensionKeyword_1()); 
                    }
                    match(input,KW_Extension,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getFeatureCallIDAccess().getExtensionKeyword_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__InnerVarID__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt21=28;
            switch ( input.LA(1) ) {
            case RULE_ID:
                {
                alt21=1;
                }
                break;
            case KW_Abstract:
                {
                alt21=2;
                }
                break;
            case KW_Annotation:
                {
                alt21=3;
                }
                break;
            case KW_Class:
                {
                alt21=4;
                }
                break;
            case KW_Create:
                {
                alt21=5;
                }
                break;
            case KW_Def:
                {
                alt21=6;
                }
                break;
            case KW_Dispatch:
                {
                alt21=7;
                }
                break;
            case KW_Enum:
                {
                alt21=8;
                }
                break;
            case KW_Extends:
                {
                alt21=9;
                }
                break;
            case KW_Final:
                {
                alt21=10;
                }
                break;
            case KW_Implements:
                {
                alt21=11;
                }
                break;
            case KW_Import:
                {
                alt21=12;
                }
                break;
            case KW_Interface:
                {
                alt21=13;
                }
                break;
            case KW_Override:
                {
                alt21=14;
                }
                break;
            case KW_Package:
                {
                alt21=15;
                }
                break;
            case KW_Public:
                {
                alt21=16;
                }
                break;
            case KW_Private:
                {
                alt21=17;
                }
                break;
            case KW_Protected:
                {
                alt21=18;
                }
                break;
            case KW_Static:
                {
                alt21=19;
                }
                break;
            case KW_Throws:
                {
                alt21=20;
                }
                break;
            case KW_Strictfp:
                {
                alt21=21;
                }
                break;
            case KW_Native:
                {
                alt21=22;
                }
                break;
            case KW_Volatile:
                {
                alt21=23;
                }
                break;
            case KW_Synchronized:
                {
                alt21=24;
                }
                break;
            case KW_Transient:
                {
                alt21=25;
                }
                break;
            case KW_AFTER:
                {
                alt21=26;
                }
                break;
            case KW_BEFORE:
                {
                alt21=27;
                }
                break;
            case KW_SEPARATOR:
                {
                alt21=28;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 21, 0, input);

                throw nvae;
            }

            switch (alt21) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getInnerVarIDAccess().getIDTerminalRuleCall_0()); 
                    }
                    match(input,RULE_ID,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getInnerVarIDAccess().getIDTerminalRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getInnerVarIDAccess().getAbstractKeyword_1()); 
                    }
                    match(input,KW_Abstract,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getInnerVarIDAccess().getAbstractKeyword_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getInnerVarIDAccess().getAnnotationKeyword_2()); 
                    }
                    match(input,KW_Annotation,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getInnerVarIDAccess().getAnnotationKeyword_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getInnerVarIDAccess().getClassKeyword_3()); 
                    }
                    match(input,KW_Class,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getInnerVarIDAccess().getClassKeyword_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getInnerVarIDAccess().getCreateKeyword_4()); 
                    }
                    match(input,KW_Create,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getInnerVarIDAccess().getCreateKeyword_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getInnerVarIDAccess().getDefKeyword_5()); 
                    }
                    match(input,KW_Def,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getInnerVarIDAccess().getDefKeyword_5()); 
                    }

                    }


                    }
                    break;
                case 7 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getInnerVarIDAccess().getDispatchKeyword_6()); 
                    }
                    match(input,KW_Dispatch,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getInnerVarIDAccess().getDispatchKeyword_6()); 
                    }

                    }


                    }
                    break;
                case 8 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getInnerVarIDAccess().getEnumKeyword_7()); 
                    }
                    match(input,KW_Enum,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getInnerVarIDAccess().getEnumKeyword_7()); 
                    }

                    }


                    }
                    break;
                case 9 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getInnerVarIDAccess().getExtendsKeyword_8()); 
                    }
                    match(input,KW_Extends,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getInnerVarIDAccess().getExtendsKeyword_8()); 
                    }

                    }


                    }
                    break;
                case 10 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getInnerVarIDAccess().getFinalKeyword_9()); 
                    }
                    match(input,KW_Final,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getInnerVarIDAccess().getFinalKeyword_9()); 
                    }

                    }


                    }
                    break;
                case 11 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getInnerVarIDAccess().getImplementsKeyword_10()); 
                    }
                    match(input,KW_Implements,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getInnerVarIDAccess().getImplementsKeyword_10()); 
                    }

                    }


                    }
                    break;
                case 12 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getInnerVarIDAccess().getImportKeyword_11()); 
                    }
                    match(input,KW_Import,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getInnerVarIDAccess().getImportKeyword_11()); 
                    }

                    }


                    }
                    break;
                case 13 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getInnerVarIDAccess().getInterfaceKeyword_12()); 
                    }
                    match(input,KW_Interface,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getInnerVarIDAccess().getInterfaceKeyword_12()); 
                    }

                    }


                    }
                    break;
                case 14 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getInnerVarIDAccess().getOverrideKeyword_13()); 
                    }
                    match(input,KW_Override,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getInnerVarIDAccess().getOverrideKeyword_13()); 
                    }

                    }


                    }
                    break;
                case 15 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getInnerVarIDAccess().getPackageKeyword_14()); 
                    }
                    match(input,KW_Package,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getInnerVarIDAccess().getPackageKeyword_14()); 
                    }

                    }


                    }
                    break;
                case 16 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getInnerVarIDAccess().getPublicKeyword_15()); 
                    }
                    match(input,KW_Public,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getInnerVarIDAccess().getPublicKeyword_15()); 
                    }

                    }


                    }
                    break;
                case 17 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getInnerVarIDAccess().getPrivateKeyword_16()); 
                    }
                    match(input,KW_Private,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getInnerVarIDAccess().getPrivateKeyword_16()); 
                    }

                    }


                    }
                    break;
                case 18 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getInnerVarIDAccess().getProtectedKeyword_17()); 
                    }
                    match(input,KW_Protected,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getInnerVarIDAccess().getProtectedKeyword_17()); 
                    }

                    }


                    }
                    break;
                case 19 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getInnerVarIDAccess().getStaticKeyword_18()); 
                    }
                    match(input,KW_Static,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getInnerVarIDAccess().getStaticKeyword_18()); 
                    }

                    }


                    }
                    break;
                case 20 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getInnerVarIDAccess().getThrowsKeyword_19()); 
                    }
                    match(input,KW_Throws,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getInnerVarIDAccess().getThrowsKeyword_19()); 
                    }

                    }


                    }
                    break;
                case 21 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getInnerVarIDAccess().getStrictfpKeyword_20()); 
                    }
                    match(input,KW_Strictfp,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getInnerVarIDAccess().getStrictfpKeyword_20()); 
                    }

                    }


                    }
                    break;
                case 22 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getInnerVarIDAccess().getNativeKeyword_21()); 
                    }
                    match(input,KW_Native,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getInnerVarIDAccess().getNativeKeyword_21()); 
                    }

                    }


                    }
                    break;
                case 23 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getInnerVarIDAccess().getVolatileKeyword_22()); 
                    }
                    match(input,KW_Volatile,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getInnerVarIDAccess().getVolatileKeyword_22()); 
                    }

                    }


                    }
                    break;
                case 24 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getInnerVarIDAccess().getSynchronizedKeyword_23()); 
                    }
                    match(input,KW_Synchronized,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getInnerVarIDAccess().getSynchronizedKeyword_23()); 
                    }

                    }


                    }
                    break;
                case 25 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getInnerVarIDAccess().getTransientKeyword_24()); 
                    }
                    match(input,KW_Transient,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getInnerVarIDAccess().getTransientKeyword_24()); 
                    }

                    }


                    }
                    break;
                case 26 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getInnerVarIDAccess().getAFTERKeyword_25()); 
                    }
                    match(input,KW_AFTER,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getInnerVarIDAccess().getAFTERKeyword_25()); 
                    }

                    }


                    }
                    break;
                case 27 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getInnerVarIDAccess().getBEFOREKeyword_26()); 
                    }
                    match(input,KW_BEFORE,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getInnerVarIDAccess().getBEFOREKeyword_26()); 
                    }

                    }


                    }
                    break;
                case 28 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getInnerVarIDAccess().getSEPARATORKeyword_27()); 
                    }
                    match(input,KW_SEPARATOR,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getInnerVarIDAccess().getSEPARATORKeyword_27()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAssignment__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt22=2;
            alt22 = dfa22.predict(input);
            switch (alt22) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXAssignmentAccess().getGroup_0()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__XAssignment__Group_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXAssignmentAccess().getGroup_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXAssignmentAccess().getGroup_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__XAssignment__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXAssignmentAccess().getGroup_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Alternatives_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==KW_LeftParenthesis) ) {
                switch ( input.LA(2) ) {
                case KW_Package:
                case KW_Class:
                case KW_LessThanSign:
                case KW_Extends:
                case KW_Implements:
                case KW_LeftCurlyBracket:
                case KW_Interface:
                case KW_Enum:
                case KW_Annotation:
                case KW_LeftParenthesis:
                case KW_Throws:
                case KW_New:
                case KW_Public:
                case KW_Private:
                case KW_Protected:
                case KW_Abstract:
                case KW_Static:
                case KW_Dispatch:
                case KW_Final:
                case KW_Strictfp:
                case KW_Native:
                case KW_Volatile:
                case KW_Synchronized:
                case KW_Transient:
                case KW_Def:
                case KW_Override:
                case KW_Create:
                case KW_AFTER:
                case KW_BEFORE:
                case KW_SEPARATOR:
                case KW_Import:
                case KW_Try:
                case KW_Switch:
                case KW_NumberSign:
                case KW_LeftSquareBracket:
                case KW_PlusSign:
                case KW_HyphenMinus:
                case KW_ExclamationMark:
                case KW_If:
                case KW_For:
                case KW_While:
                case KW_Do:
                case KW_Super:
                case KW_False:
                case KW_True:
                case KW_Null:
                case KW_Typeof:
                case KW_Throw:
                case KW_Return:
                case RULE_ID:
                case RULE_HEX:
                case RULE_INT:
                case RULE_DECIMAL:
                case RULE_STRING:
                case RULE_RICH_TEXT:
                case RULE_RICH_TEXT_START:
                    {
                    alt23=2;
                    }
                    break;
                case KW_Extension:
                    {
                    int LA23_3 = input.LA(3);

                    if ( (LA23_3==KW_LessThanSign||LA23_3==KW_GreaterThanSign||(LA23_3>=KW_LeftParenthesis && LA23_3<=KW_EqualsSign)||LA23_3==KW_FullStop||LA23_3==KW_QuestionMark||LA23_3==KW_LeftSquareBracket||(LA23_3>=KW_PlusSignEqualsSign && LA23_3<=KW_PercentSign)||(LA23_3>=KW_As && LA23_3<=KW_QuestionMarkFullStop)) ) {
                        alt23=2;
                    }
                    else if ( ((LA23_3>=KW_Val && LA23_3<=KW_Var)) ) {
                        alt23=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 23, 3, input);

                        throw nvae;
                    }
                    }
                    break;
                case KW_Val:
                case KW_Var:
                    {
                    alt23=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 23, 1, input);

                    throw nvae;
                }

            }
            else if ( (LA23_0==KW_Package||(LA23_0>=KW_Class && LA23_0<=KW_LessThanSign)||(LA23_0>=KW_Extends && LA23_0<=KW_LeftCurlyBracket)||(LA23_0>=KW_Interface && LA23_0<=KW_Annotation)||(LA23_0>=KW_Extension && LA23_0<=KW_New)||(LA23_0>=KW_Public && LA23_0<=KW_Transient)||(LA23_0>=KW_Def && LA23_0<=KW_Create)||(LA23_0>=KW_AFTER && LA23_0<=KW_Import)||LA23_0==KW_Try||LA23_0==KW_Switch||(LA23_0>=KW_NumberSign && LA23_0<=KW_LeftSquareBracket)||(LA23_0>=KW_PlusSign && LA23_0<=KW_HyphenMinus)||LA23_0==KW_ExclamationMark||LA23_0==KW_If||(LA23_0>=KW_For && LA23_0<=KW_Return)||(LA23_0>=RULE_ID && LA23_0<=RULE_RICH_TEXT_START)) ) {
                alt23=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 23, 0, input);

                throw nvae;
            }
            switch (alt23) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXTryCatchFinallyExpressionAccess().getGroup_2_0()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__XTryCatchFinallyExpression__Group_2_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXTryCatchFinallyExpressionAccess().getGroup_2_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXTryCatchFinallyExpressionAccess().getGroup_2_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__XTryCatchFinallyExpression__Group_2_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXTryCatchFinallyExpressionAccess().getGroup_2_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Alternatives_2_0_6_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==KW_Catch) ) {
                alt24=1;
            }
            else if ( (LA24_0==KW_Finally) ) {
                alt24=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 24, 0, input);

                throw nvae;
            }
            switch (alt24) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXTryCatchFinallyExpressionAccess().getGroup_2_0_6_0_0()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__XTryCatchFinallyExpression__Group_2_0_6_0_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXTryCatchFinallyExpressionAccess().getGroup_2_0_6_0_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXTryCatchFinallyExpressionAccess().getGroup_2_0_6_0_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__XTryCatchFinallyExpression__Group_2_0_6_0_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXTryCatchFinallyExpressionAccess().getGroup_2_0_6_0_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Alternatives_2_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==KW_Catch) ) {
                alt25=1;
            }
            else if ( (LA25_0==KW_Finally) ) {
                alt25=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 25, 0, input);

                throw nvae;
            }
            switch (alt25) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXTryCatchFinallyExpressionAccess().getGroup_2_1_1_0()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__XTryCatchFinallyExpression__Group_2_1_1_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXTryCatchFinallyExpressionAccess().getGroup_2_1_1_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXTryCatchFinallyExpressionAccess().getGroup_2_1_1_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__XTryCatchFinallyExpression__Group_2_1_1_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXTryCatchFinallyExpressionAccess().getGroup_2_1_1_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XVariableDeclaration__Alternatives_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt26=2;
            alt26 = dfa26.predict(input);
            switch (alt26) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXVariableDeclarationAccess().getGroup_1_0()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__XVariableDeclaration__Group_1_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXVariableDeclarationAccess().getGroup_1_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXVariableDeclarationAccess().getNameAssignment_1_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__XVariableDeclaration__NameAssignment_1_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXVariableDeclarationAccess().getNameAssignment_1_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__InitializedVariableDeclaration__Alternatives_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt27=2;
            switch ( input.LA(1) ) {
            case RULE_ID:
                {
                int LA27_1 = input.LA(2);

                if ( (LA27_1==KW_Package||(LA27_1>=KW_Class && LA27_1<=KW_LessThanSign)||(LA27_1>=KW_Extends && LA27_1<=KW_Implements)||(LA27_1>=KW_Interface && LA27_1<=KW_Annotation)||LA27_1==KW_Throws||(LA27_1>=KW_FullStop && LA27_1<=KW_Transient)||(LA27_1>=KW_Def && LA27_1<=KW_Create)||(LA27_1>=KW_AFTER && LA27_1<=KW_Import)||LA27_1==KW_LeftSquareBracket||LA27_1==RULE_ID) ) {
                    alt27=1;
                }
                else if ( (LA27_1==KW_EqualsSign) ) {
                    alt27=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 27, 1, input);

                    throw nvae;
                }
                }
                break;
            case KW_Create:
                {
                int LA27_2 = input.LA(2);

                if ( (LA27_2==KW_EqualsSign) ) {
                    alt27=2;
                }
                else if ( (LA27_2==KW_Package||(LA27_2>=KW_Class && LA27_2<=KW_LessThanSign)||(LA27_2>=KW_Extends && LA27_2<=KW_Implements)||(LA27_2>=KW_Interface && LA27_2<=KW_Annotation)||LA27_2==KW_Throws||(LA27_2>=KW_FullStop && LA27_2<=KW_Transient)||(LA27_2>=KW_Def && LA27_2<=KW_Create)||(LA27_2>=KW_AFTER && LA27_2<=KW_Import)||LA27_2==KW_LeftSquareBracket||LA27_2==RULE_ID) ) {
                    alt27=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 27, 2, input);

                    throw nvae;
                }
                }
                break;
            case KW_Annotation:
                {
                int LA27_3 = input.LA(2);

                if ( (LA27_3==KW_Package||(LA27_3>=KW_Class && LA27_3<=KW_LessThanSign)||(LA27_3>=KW_Extends && LA27_3<=KW_Implements)||(LA27_3>=KW_Interface && LA27_3<=KW_Annotation)||LA27_3==KW_Throws||(LA27_3>=KW_FullStop && LA27_3<=KW_Transient)||(LA27_3>=KW_Def && LA27_3<=KW_Create)||(LA27_3>=KW_AFTER && LA27_3<=KW_Import)||LA27_3==KW_LeftSquareBracket||LA27_3==RULE_ID) ) {
                    alt27=1;
                }
                else if ( (LA27_3==KW_EqualsSign) ) {
                    alt27=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 27, 3, input);

                    throw nvae;
                }
                }
                break;
            case KW_AFTER:
                {
                int LA27_4 = input.LA(2);

                if ( (LA27_4==KW_Package||(LA27_4>=KW_Class && LA27_4<=KW_LessThanSign)||(LA27_4>=KW_Extends && LA27_4<=KW_Implements)||(LA27_4>=KW_Interface && LA27_4<=KW_Annotation)||LA27_4==KW_Throws||(LA27_4>=KW_FullStop && LA27_4<=KW_Transient)||(LA27_4>=KW_Def && LA27_4<=KW_Create)||(LA27_4>=KW_AFTER && LA27_4<=KW_Import)||LA27_4==KW_LeftSquareBracket||LA27_4==RULE_ID) ) {
                    alt27=1;
                }
                else if ( (LA27_4==KW_EqualsSign) ) {
                    alt27=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 27, 4, input);

                    throw nvae;
                }
                }
                break;
            case KW_BEFORE:
                {
                int LA27_5 = input.LA(2);

                if ( (LA27_5==KW_Package||(LA27_5>=KW_Class && LA27_5<=KW_LessThanSign)||(LA27_5>=KW_Extends && LA27_5<=KW_Implements)||(LA27_5>=KW_Interface && LA27_5<=KW_Annotation)||LA27_5==KW_Throws||(LA27_5>=KW_FullStop && LA27_5<=KW_Transient)||(LA27_5>=KW_Def && LA27_5<=KW_Create)||(LA27_5>=KW_AFTER && LA27_5<=KW_Import)||LA27_5==KW_LeftSquareBracket||LA27_5==RULE_ID) ) {
                    alt27=1;
                }
                else if ( (LA27_5==KW_EqualsSign) ) {
                    alt27=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 27, 5, input);

                    throw nvae;
                }
                }
                break;
            case KW_SEPARATOR:
                {
                int LA27_6 = input.LA(2);

                if ( (LA27_6==KW_Package||(LA27_6>=KW_Class && LA27_6<=KW_LessThanSign)||(LA27_6>=KW_Extends && LA27_6<=KW_Implements)||(LA27_6>=KW_Interface && LA27_6<=KW_Annotation)||LA27_6==KW_Throws||(LA27_6>=KW_FullStop && LA27_6<=KW_Transient)||(LA27_6>=KW_Def && LA27_6<=KW_Create)||(LA27_6>=KW_AFTER && LA27_6<=KW_Import)||LA27_6==KW_LeftSquareBracket||LA27_6==RULE_ID) ) {
                    alt27=1;
                }
                else if ( (LA27_6==KW_EqualsSign) ) {
                    alt27=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 27, 6, input);

                    throw nvae;
                }
                }
                break;
            case KW_LeftParenthesis:
            case KW_EqualsSignGreaterThanSign:
                {
                alt27=1;
                }
                break;
            case KW_Package:
            case KW_Class:
            case KW_Extends:
            case KW_Implements:
            case KW_Interface:
            case KW_Enum:
            case KW_Throws:
            case KW_Public:
            case KW_Private:
            case KW_Protected:
            case KW_Abstract:
            case KW_Static:
            case KW_Dispatch:
            case KW_Final:
            case KW_Strictfp:
            case KW_Native:
            case KW_Volatile:
            case KW_Synchronized:
            case KW_Transient:
            case KW_Def:
            case KW_Override:
            case KW_Import:
                {
                alt27=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 27, 0, input);

                throw nvae;
            }

            switch (alt27) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getInitializedVariableDeclarationAccess().getGroup_2_0()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__InitializedVariableDeclaration__Group_2_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getInitializedVariableDeclarationAccess().getGroup_2_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getInitializedVariableDeclarationAccess().getNameAssignment_2_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__InitializedVariableDeclaration__NameAssignment_2_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getInitializedVariableDeclarationAccess().getNameAssignment_2_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__VariableModifier__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( ((LA28_0>=KW_Val && LA28_0<=KW_Var)) ) {
                alt28=1;
            }
            else if ( (LA28_0==KW_Extension) ) {
                alt28=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 28, 0, input);

                throw nvae;
            }
            switch (alt28) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getVariableModifierAccess().getGroup_0()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__VariableModifier__Group_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getVariableModifierAccess().getGroup_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getVariableModifierAccess().getGroup_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__VariableModifier__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getVariableModifierAccess().getGroup_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__VariableModifier__Alternatives_0_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==KW_Var) ) {
                alt29=1;
            }
            else if ( (LA29_0==KW_Val) ) {
                alt29=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 29, 0, input);

                throw nvae;
            }
            switch (alt29) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getVariableModifierAccess().getWriteableAssignment_0_0_0()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__VariableModifier__WriteableAssignment_0_0_0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getVariableModifierAccess().getWriteableAssignment_0_0_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getVariableModifierAccess().getValKeyword_0_0_1()); 
                    }
                    match(input,KW_Val,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getVariableModifierAccess().getValKeyword_0_0_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__VariableModifier__Alternatives_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==KW_Var) ) {
                alt30=1;
            }
            else if ( (LA30_0==KW_Val) ) {
                alt30=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);

                throw nvae;
            }
            switch (alt30) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getVariableModifierAccess().getWriteableAssignment_1_1_0()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__VariableModifier__WriteableAssignment_1_1_0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getVariableModifierAccess().getWriteableAssignment_1_1_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getVariableModifierAccess().getValKeyword_1_1_1()); 
                    }
                    match(input,KW_Val,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getVariableModifierAccess().getValKeyword_1_1_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__Alternatives_4_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt31=2;
            alt31 = dfa31.predict(input);
            switch (alt31) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXbaseConstructorCallAccess().getArgumentsAssignment_4_1_0()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__XbaseConstructorCall__ArgumentsAssignment_4_1_0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXbaseConstructorCallAccess().getArgumentsAssignment_4_1_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXbaseConstructorCallAccess().getGroup_4_1_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__XbaseConstructorCall__Group_4_1_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXbaseConstructorCallAccess().getGroup_4_1_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XStringLiteral__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==RULE_STRING) ) {
                alt32=1;
            }
            else if ( ((LA32_0>=RULE_RICH_TEXT && LA32_0<=RULE_RICH_TEXT_START)) ) {
                alt32=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;
            }
            switch (alt32) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXStringLiteralAccess().getSimpleStringLiteralParserRuleCall_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSimpleStringLiteral();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getXStringLiteralAccess().getSimpleStringLiteralParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXStringLiteralAccess().getRichStringParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleRichString();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getXStringLiteralAccess().getRichStringParserRuleCall_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Alternatives_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt33=2;
            alt33 = dfa33.predict(input);
            switch (alt33) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXSwitchExpressionAccess().getGroup_2_0()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__XSwitchExpression__Group_2_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXSwitchExpressionAccess().getGroup_2_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXSwitchExpressionAccess().getGroup_2_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__XSwitchExpression__Group_2_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXSwitchExpressionAccess().getGroup_2_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCasePart__Alternatives_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==KW_Colon) ) {
                alt34=1;
            }
            else if ( (LA34_0==KW_Comma) ) {
                alt34=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 34, 0, input);

                throw nvae;
            }
            switch (alt34) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXCasePartAccess().getGroup_3_0()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__XCasePart__Group_3_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXCasePartAccess().getGroup_3_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXCasePartAccess().getFallThroughAssignment_3_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__XCasePart__FallThroughAssignment_3_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXCasePartAccess().getFallThroughAssignment_3_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XExpressionOrSimpleConstructorCall__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt35=2;
            alt35 = dfa35.predict(input);
            switch (alt35) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXExpressionOrSimpleConstructorCallAccess().getXbaseConstructorCallParserRuleCall_0()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    ruleXbaseConstructorCall();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXExpressionOrSimpleConstructorCallAccess().getXbaseConstructorCallParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXExpressionOrSimpleConstructorCallAccess().getXExpressionParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleXExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getXExpressionOrSimpleConstructorCallAccess().getXExpressionParserRuleCall_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichString__Alternatives_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==RULE_RICH_TEXT) ) {
                alt36=1;
            }
            else if ( (LA36_0==RULE_RICH_TEXT_START) ) {
                alt36=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 36, 0, input);

                throw nvae;
            }
            switch (alt36) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getRichStringAccess().getExpressionsAssignment_1_0()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__RichString__ExpressionsAssignment_1_0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getRichStringAccess().getExpressionsAssignment_1_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getRichStringAccess().getGroup_1_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__RichString__Group_1_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getRichStringAccess().getGroup_1_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringLiteralInbetween__Alternatives_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==RULE_RICH_TEXT_INBETWEEN) ) {
                alt37=1;
            }
            else if ( (LA37_0==RULE_COMMENT_RICH_TEXT_INBETWEEN) ) {
                alt37=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 37, 0, input);

                throw nvae;
            }
            switch (alt37) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getRichStringLiteralInbetweenAccess().getValueAssignment_1_0()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__RichStringLiteralInbetween__ValueAssignment_1_0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getRichStringLiteralInbetweenAccess().getValueAssignment_1_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getRichStringLiteralInbetweenAccess().getValueAssignment_1_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__RichStringLiteralInbetween__ValueAssignment_1_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getRichStringLiteralInbetweenAccess().getValueAssignment_1_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringLiteralEnd__Alternatives_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==RULE_RICH_TEXT_END) ) {
                alt38=1;
            }
            else if ( (LA38_0==RULE_COMMENT_RICH_TEXT_END) ) {
                alt38=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 38, 0, input);

                throw nvae;
            }
            switch (alt38) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getRichStringLiteralEndAccess().getValueAssignment_1_0()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__RichStringLiteralEnd__ValueAssignment_1_0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getRichStringLiteralEndAccess().getValueAssignment_1_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getRichStringLiteralEndAccess().getValueAssignment_1_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__RichStringLiteralEnd__ValueAssignment_1_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getRichStringLiteralEndAccess().getValueAssignment_1_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringPart__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt39=3;
            switch ( input.LA(1) ) {
            case KW_Package:
            case KW_Class:
            case KW_LessThanSign:
            case KW_Extends:
            case KW_Implements:
            case KW_LeftCurlyBracket:
            case KW_Interface:
            case KW_Enum:
            case KW_Annotation:
            case KW_LeftParenthesis:
            case KW_Extension:
            case KW_Throws:
            case KW_New:
            case KW_Public:
            case KW_Private:
            case KW_Protected:
            case KW_Abstract:
            case KW_Static:
            case KW_Dispatch:
            case KW_Final:
            case KW_Strictfp:
            case KW_Native:
            case KW_Volatile:
            case KW_Synchronized:
            case KW_Transient:
            case KW_Val:
            case KW_Var:
            case KW_Def:
            case KW_Override:
            case KW_Create:
            case KW_AFTER:
            case KW_BEFORE:
            case KW_SEPARATOR:
            case KW_Import:
            case KW_Try:
            case KW_Switch:
            case KW_NumberSign:
            case KW_LeftSquareBracket:
            case KW_PlusSign:
            case KW_HyphenMinus:
            case KW_ExclamationMark:
            case KW_If:
            case KW_For:
            case KW_While:
            case KW_Do:
            case KW_Super:
            case KW_False:
            case KW_True:
            case KW_Null:
            case KW_Typeof:
            case KW_Throw:
            case KW_Return:
            case RULE_ID:
            case RULE_HEX:
            case RULE_INT:
            case RULE_DECIMAL:
            case RULE_STRING:
            case RULE_RICH_TEXT:
            case RULE_RICH_TEXT_START:
                {
                alt39=1;
                }
                break;
            case KW_FOR:
                {
                alt39=2;
                }
                break;
            case KW_IF:
                {
                alt39=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);

                throw nvae;
            }

            switch (alt39) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getRichStringPartAccess().getXExpressionOrVarDeclarationParserRuleCall_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleXExpressionOrVarDeclaration();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getRichStringPartAccess().getXExpressionOrVarDeclarationParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getRichStringPartAccess().getRichStringForLoopParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleRichStringForLoop();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getRichStringPartAccess().getRichStringForLoopParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getRichStringPartAccess().getRichStringIfParserRuleCall_2()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleRichStringIf();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getRichStringPartAccess().getRichStringIfParserRuleCall_2()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotation__Alternatives_3_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt40=2;
            alt40 = dfa40.predict(input);
            switch (alt40) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXAnnotationAccess().getGroup_3_1_0()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__XAnnotation__Group_3_1_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXAnnotationAccess().getGroup_3_1_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXAnnotationAccess().getValueAssignment_3_1_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__XAnnotation__ValueAssignment_3_1_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXAnnotationAccess().getValueAssignment_3_1_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValueOrCommaList__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt41=2;
            alt41 = dfa41.predict(input);
            switch (alt41) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getGroup_0()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__XAnnotationElementValueOrCommaList__Group_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getGroup_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getGroup_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__XAnnotationElementValueOrCommaList__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getGroup_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValue__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt42=2;
            alt42 = dfa42.predict(input);
            switch (alt42) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXAnnotationElementValueAccess().getGroup_0()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__XAnnotationElementValue__Group_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXAnnotationElementValueAccess().getGroup_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXAnnotationElementValueAccess().getXAnnotationOrExpressionParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleXAnnotationOrExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getXAnnotationElementValueAccess().getXAnnotationOrExpressionParserRuleCall_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationOrExpression__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==KW_CommercialAt) ) {
                alt43=1;
            }
            else if ( (LA43_0==KW_Package||(LA43_0>=KW_Class && LA43_0<=KW_LessThanSign)||(LA43_0>=KW_Extends && LA43_0<=KW_LeftCurlyBracket)||(LA43_0>=KW_Interface && LA43_0<=KW_LeftParenthesis)||(LA43_0>=KW_Extension && LA43_0<=KW_New)||(LA43_0>=KW_Public && LA43_0<=KW_Transient)||(LA43_0>=KW_Def && LA43_0<=KW_Create)||(LA43_0>=KW_AFTER && LA43_0<=KW_Import)||LA43_0==KW_Try||LA43_0==KW_Switch||(LA43_0>=KW_NumberSign && LA43_0<=KW_LeftSquareBracket)||(LA43_0>=KW_PlusSign && LA43_0<=KW_HyphenMinus)||LA43_0==KW_ExclamationMark||LA43_0==KW_If||(LA43_0>=KW_For && LA43_0<=KW_Return)||(LA43_0>=RULE_ID && LA43_0<=RULE_RICH_TEXT_START)) ) {
                alt43=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;
            }
            switch (alt43) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXAnnotationOrExpressionAccess().getXAnnotationParserRuleCall_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleXAnnotation();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getXAnnotationOrExpressionAccess().getXAnnotationParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXAnnotationOrExpressionAccess().getXExpressionParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleXExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getXAnnotationOrExpressionAccess().getXExpressionParserRuleCall_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpMultiAssign__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt44=7;
            switch ( input.LA(1) ) {
            case KW_PlusSignEqualsSign:
                {
                alt44=1;
                }
                break;
            case KW_HyphenMinusEqualsSign:
                {
                alt44=2;
                }
                break;
            case KW_AsteriskEqualsSign:
                {
                alt44=3;
                }
                break;
            case KW_SolidusEqualsSign:
                {
                alt44=4;
                }
                break;
            case KW_PercentSignEqualsSign:
                {
                alt44=5;
                }
                break;
            case KW_LessThanSign:
                {
                alt44=6;
                }
                break;
            case KW_GreaterThanSign:
                {
                alt44=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 44, 0, input);

                throw nvae;
            }

            switch (alt44) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOpMultiAssignAccess().getPlusSignEqualsSignKeyword_0()); 
                    }
                    match(input,KW_PlusSignEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getOpMultiAssignAccess().getPlusSignEqualsSignKeyword_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOpMultiAssignAccess().getHyphenMinusEqualsSignKeyword_1()); 
                    }
                    match(input,KW_HyphenMinusEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getOpMultiAssignAccess().getHyphenMinusEqualsSignKeyword_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOpMultiAssignAccess().getAsteriskEqualsSignKeyword_2()); 
                    }
                    match(input,KW_AsteriskEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getOpMultiAssignAccess().getAsteriskEqualsSignKeyword_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOpMultiAssignAccess().getSolidusEqualsSignKeyword_3()); 
                    }
                    match(input,KW_SolidusEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getOpMultiAssignAccess().getSolidusEqualsSignKeyword_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOpMultiAssignAccess().getPercentSignEqualsSignKeyword_4()); 
                    }
                    match(input,KW_PercentSignEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getOpMultiAssignAccess().getPercentSignEqualsSignKeyword_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOpMultiAssignAccess().getGroup_5()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__OpMultiAssign__Group_5__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getOpMultiAssignAccess().getGroup_5()); 
                    }

                    }


                    }
                    break;
                case 7 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOpMultiAssignAccess().getGroup_6()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__OpMultiAssign__Group_6__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getOpMultiAssignAccess().getGroup_6()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpEquality__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt45=4;
            switch ( input.LA(1) ) {
            case KW_EqualsSignEqualsSign:
                {
                alt45=1;
                }
                break;
            case KW_ExclamationMarkEqualsSign:
                {
                alt45=2;
                }
                break;
            case KW_EqualsSignEqualsSignEqualsSign:
                {
                alt45=3;
                }
                break;
            case KW_ExclamationMarkEqualsSignEqualsSign:
                {
                alt45=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 45, 0, input);

                throw nvae;
            }

            switch (alt45) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOpEqualityAccess().getEqualsSignEqualsSignKeyword_0()); 
                    }
                    match(input,KW_EqualsSignEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getOpEqualityAccess().getEqualsSignEqualsSignKeyword_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOpEqualityAccess().getExclamationMarkEqualsSignKeyword_1()); 
                    }
                    match(input,KW_ExclamationMarkEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getOpEqualityAccess().getExclamationMarkEqualsSignKeyword_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOpEqualityAccess().getEqualsSignEqualsSignEqualsSignKeyword_2()); 
                    }
                    match(input,KW_EqualsSignEqualsSignEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getOpEqualityAccess().getEqualsSignEqualsSignEqualsSignKeyword_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOpEqualityAccess().getExclamationMarkEqualsSignEqualsSignKeyword_3()); 
                    }
                    match(input,KW_ExclamationMarkEqualsSignEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getOpEqualityAccess().getExclamationMarkEqualsSignEqualsSignKeyword_3()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XRelationalExpression__Alternatives_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==KW_Instanceof) ) {
                alt46=1;
            }
            else if ( (LA46_0==KW_LessThanSign||LA46_0==KW_GreaterThanSign||LA46_0==KW_GreaterThanSignEqualsSign) ) {
                alt46=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;
            }
            switch (alt46) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXRelationalExpressionAccess().getGroup_1_0()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__XRelationalExpression__Group_1_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXRelationalExpressionAccess().getGroup_1_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXRelationalExpressionAccess().getGroup_1_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__XRelationalExpression__Group_1_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXRelationalExpressionAccess().getGroup_1_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpCompare__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt47=4;
            switch ( input.LA(1) ) {
            case KW_GreaterThanSignEqualsSign:
                {
                alt47=1;
                }
                break;
            case KW_LessThanSign:
                {
                int LA47_2 = input.LA(2);

                if ( (LA47_2==KW_EqualsSign) ) {
                    alt47=2;
                }
                else if ( (LA47_2==EOF||LA47_2==KW_Package||(LA47_2>=KW_Class && LA47_2<=KW_LessThanSign)||(LA47_2>=KW_Extends && LA47_2<=KW_LeftCurlyBracket)||(LA47_2>=KW_Interface && LA47_2<=KW_LeftParenthesis)||(LA47_2>=KW_Extension && LA47_2<=KW_New)||(LA47_2>=KW_Public && LA47_2<=KW_Transient)||(LA47_2>=KW_Def && LA47_2<=KW_Create)||(LA47_2>=KW_AFTER && LA47_2<=KW_Import)||LA47_2==KW_Try||LA47_2==KW_Switch||(LA47_2>=KW_NumberSign && LA47_2<=KW_LeftSquareBracket)||(LA47_2>=KW_PlusSign && LA47_2<=KW_HyphenMinus)||LA47_2==KW_ExclamationMark||LA47_2==KW_If||(LA47_2>=KW_For && LA47_2<=KW_Return)||(LA47_2>=RULE_ID && LA47_2<=RULE_RICH_TEXT_START)) ) {
                    alt47=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 47, 2, input);

                    throw nvae;
                }
                }
                break;
            case KW_GreaterThanSign:
                {
                alt47=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 47, 0, input);

                throw nvae;
            }

            switch (alt47) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOpCompareAccess().getGreaterThanSignEqualsSignKeyword_0()); 
                    }
                    match(input,KW_GreaterThanSignEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getOpCompareAccess().getGreaterThanSignEqualsSignKeyword_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOpCompareAccess().getGroup_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__OpCompare__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getOpCompareAccess().getGroup_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOpCompareAccess().getGreaterThanSignKeyword_2()); 
                    }
                    match(input,KW_GreaterThanSign,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getOpCompareAccess().getGreaterThanSignKeyword_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOpCompareAccess().getLessThanSignKeyword_3()); 
                    }
                    match(input,KW_LessThanSign,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getOpCompareAccess().getLessThanSignKeyword_3()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpOther__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt48=9;
            alt48 = dfa48.predict(input);
            switch (alt48) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOpOtherAccess().getHyphenMinusGreaterThanSignKeyword_0()); 
                    }
                    match(input,KW_HyphenMinusGreaterThanSign,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getOpOtherAccess().getHyphenMinusGreaterThanSignKeyword_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOpOtherAccess().getFullStopFullStopLessThanSignKeyword_1()); 
                    }
                    match(input,KW_FullStopFullStopLessThanSign,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getOpOtherAccess().getFullStopFullStopLessThanSignKeyword_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOpOtherAccess().getGroup_2()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__OpOther__Group_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getOpOtherAccess().getGroup_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOpOtherAccess().getFullStopFullStopKeyword_3()); 
                    }
                    match(input,KW_FullStopFullStop,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getOpOtherAccess().getFullStopFullStopKeyword_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOpOtherAccess().getEqualsSignGreaterThanSignKeyword_4()); 
                    }
                    match(input,KW_EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getOpOtherAccess().getEqualsSignGreaterThanSignKeyword_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOpOtherAccess().getGroup_5()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__OpOther__Group_5__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getOpOtherAccess().getGroup_5()); 
                    }

                    }


                    }
                    break;
                case 7 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOpOtherAccess().getGroup_6()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__OpOther__Group_6__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getOpOtherAccess().getGroup_6()); 
                    }

                    }


                    }
                    break;
                case 8 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOpOtherAccess().getLessThanSignGreaterThanSignKeyword_7()); 
                    }
                    match(input,KW_LessThanSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getOpOtherAccess().getLessThanSignGreaterThanSignKeyword_7()); 
                    }

                    }


                    }
                    break;
                case 9 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOpOtherAccess().getQuestionMarkColonKeyword_8()); 
                    }
                    match(input,KW_QuestionMarkColon,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getOpOtherAccess().getQuestionMarkColonKeyword_8()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpOther__Alternatives_5_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==KW_GreaterThanSign) ) {
                int LA49_1 = input.LA(2);

                if ( (LA49_1==EOF||LA49_1==KW_Package||(LA49_1>=KW_Class && LA49_1<=KW_LessThanSign)||(LA49_1>=KW_Extends && LA49_1<=KW_LeftCurlyBracket)||(LA49_1>=KW_Interface && LA49_1<=KW_LeftParenthesis)||(LA49_1>=KW_Extension && LA49_1<=KW_New)||(LA49_1>=KW_Public && LA49_1<=KW_Transient)||(LA49_1>=KW_Def && LA49_1<=KW_Create)||(LA49_1>=KW_AFTER && LA49_1<=KW_Import)||LA49_1==KW_Try||LA49_1==KW_Switch||(LA49_1>=KW_NumberSign && LA49_1<=KW_LeftSquareBracket)||(LA49_1>=KW_PlusSign && LA49_1<=KW_HyphenMinus)||LA49_1==KW_ExclamationMark||LA49_1==KW_If||(LA49_1>=KW_For && LA49_1<=KW_Return)||(LA49_1>=RULE_ID && LA49_1<=RULE_RICH_TEXT_START)) ) {
                    alt49=2;
                }
                else if ( (LA49_1==KW_GreaterThanSign) ) {
                    alt49=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 49, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 49, 0, input);

                throw nvae;
            }
            switch (alt49) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOpOtherAccess().getGroup_5_1_0()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__OpOther__Group_5_1_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getOpOtherAccess().getGroup_5_1_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_5_1_1()); 
                    }
                    match(input,KW_GreaterThanSign,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_5_1_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpOther__Alternatives_6_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt50=3;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==KW_LessThanSign) ) {
                int LA50_1 = input.LA(2);

                if ( (synpred132_InternalXtend()) ) {
                    alt50=1;
                }
                else if ( (synpred133_InternalXtend()) ) {
                    alt50=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 50, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA50_0==KW_EqualsSignGreaterThanSign) ) {
                alt50=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 50, 0, input);

                throw nvae;
            }
            switch (alt50) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOpOtherAccess().getGroup_6_1_0()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__OpOther__Group_6_1_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getOpOtherAccess().getGroup_6_1_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOpOtherAccess().getLessThanSignKeyword_6_1_1()); 
                    }
                    match(input,KW_LessThanSign,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getOpOtherAccess().getLessThanSignKeyword_6_1_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOpOtherAccess().getEqualsSignGreaterThanSignKeyword_6_1_2()); 
                    }
                    match(input,KW_EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getOpOtherAccess().getEqualsSignGreaterThanSignKeyword_6_1_2()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpAdd__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==KW_PlusSign) ) {
                alt51=1;
            }
            else if ( (LA51_0==KW_HyphenMinus) ) {
                alt51=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 51, 0, input);

                throw nvae;
            }
            switch (alt51) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOpAddAccess().getPlusSignKeyword_0()); 
                    }
                    match(input,KW_PlusSign,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getOpAddAccess().getPlusSignKeyword_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOpAddAccess().getHyphenMinusKeyword_1()); 
                    }
                    match(input,KW_HyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getOpAddAccess().getHyphenMinusKeyword_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpMulti__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt52=4;
            switch ( input.LA(1) ) {
            case KW_Asterisk:
                {
                alt52=1;
                }
                break;
            case KW_AsteriskAsterisk:
                {
                alt52=2;
                }
                break;
            case KW_Solidus:
                {
                alt52=3;
                }
                break;
            case KW_PercentSign:
                {
                alt52=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 52, 0, input);

                throw nvae;
            }

            switch (alt52) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOpMultiAccess().getAsteriskKeyword_0()); 
                    }
                    match(input,KW_Asterisk,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getOpMultiAccess().getAsteriskKeyword_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOpMultiAccess().getAsteriskAsteriskKeyword_1()); 
                    }
                    match(input,KW_AsteriskAsterisk,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getOpMultiAccess().getAsteriskAsteriskKeyword_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOpMultiAccess().getSolidusKeyword_2()); 
                    }
                    match(input,KW_Solidus,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getOpMultiAccess().getSolidusKeyword_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOpMultiAccess().getPercentSignKeyword_3()); 
                    }
                    match(input,KW_PercentSign,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getOpMultiAccess().getPercentSignKeyword_3()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XUnaryOperation__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( ((LA53_0>=KW_PlusSign && LA53_0<=KW_HyphenMinus)||LA53_0==KW_ExclamationMark) ) {
                alt53=1;
            }
            else if ( (LA53_0==KW_Package||(LA53_0>=KW_Class && LA53_0<=KW_LessThanSign)||(LA53_0>=KW_Extends && LA53_0<=KW_LeftCurlyBracket)||(LA53_0>=KW_Interface && LA53_0<=KW_LeftParenthesis)||(LA53_0>=KW_Extension && LA53_0<=KW_New)||(LA53_0>=KW_Public && LA53_0<=KW_Transient)||(LA53_0>=KW_Def && LA53_0<=KW_Create)||(LA53_0>=KW_AFTER && LA53_0<=KW_Import)||LA53_0==KW_Try||LA53_0==KW_Switch||(LA53_0>=KW_NumberSign && LA53_0<=KW_LeftSquareBracket)||LA53_0==KW_If||(LA53_0>=KW_For && LA53_0<=KW_Return)||(LA53_0>=RULE_ID && LA53_0<=RULE_RICH_TEXT_START)) ) {
                alt53=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 53, 0, input);

                throw nvae;
            }
            switch (alt53) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXUnaryOperationAccess().getGroup_0()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__XUnaryOperation__Group_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXUnaryOperationAccess().getGroup_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXUnaryOperationAccess().getXCastedExpressionParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleXCastedExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getXUnaryOperationAccess().getXCastedExpressionParserRuleCall_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpUnary__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt54=3;
            switch ( input.LA(1) ) {
            case KW_ExclamationMark:
                {
                alt54=1;
                }
                break;
            case KW_HyphenMinus:
                {
                alt54=2;
                }
                break;
            case KW_PlusSign:
                {
                alt54=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 54, 0, input);

                throw nvae;
            }

            switch (alt54) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOpUnaryAccess().getExclamationMarkKeyword_0()); 
                    }
                    match(input,KW_ExclamationMark,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getOpUnaryAccess().getExclamationMarkKeyword_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOpUnaryAccess().getHyphenMinusKeyword_1()); 
                    }
                    match(input,KW_HyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getOpUnaryAccess().getHyphenMinusKeyword_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOpUnaryAccess().getPlusSignKeyword_2()); 
                    }
                    match(input,KW_PlusSign,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getOpUnaryAccess().getPlusSignKeyword_2()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpPostfix__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==KW_PlusSignPlusSign) ) {
                alt55=1;
            }
            else if ( (LA55_0==KW_HyphenMinusHyphenMinus) ) {
                alt55=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);

                throw nvae;
            }
            switch (alt55) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOpPostfixAccess().getPlusSignPlusSignKeyword_0()); 
                    }
                    match(input,KW_PlusSignPlusSign,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getOpPostfixAccess().getPlusSignPlusSignKeyword_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getOpPostfixAccess().getHyphenMinusHyphenMinusKeyword_1()); 
                    }
                    match(input,KW_HyphenMinusHyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getOpPostfixAccess().getHyphenMinusHyphenMinusKeyword_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Alternatives_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt56=2;
            alt56 = dfa56.predict(input);
            switch (alt56) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXMemberFeatureCallAccess().getGroup_1_0()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__XMemberFeatureCall__Group_1_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXMemberFeatureCallAccess().getGroup_1_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXMemberFeatureCallAccess().getGroup_1_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__XMemberFeatureCall__Group_1_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXMemberFeatureCallAccess().getGroup_1_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Alternatives_1_0_0_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==KW_FullStop) ) {
                alt57=1;
            }
            else if ( (LA57_0==KW_ColonColon) ) {
                alt57=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 57, 0, input);

                throw nvae;
            }
            switch (alt57) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXMemberFeatureCallAccess().getFullStopKeyword_1_0_0_0_1_0()); 
                    }
                    match(input,KW_FullStop,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getXMemberFeatureCallAccess().getFullStopKeyword_1_0_0_0_1_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXMemberFeatureCallAccess().getExplicitStaticAssignment_1_0_0_0_1_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__XMemberFeatureCall__ExplicitStaticAssignment_1_0_0_0_1_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXMemberFeatureCallAccess().getExplicitStaticAssignment_1_0_0_0_1_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Alternatives_1_1_0_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt58=3;
            switch ( input.LA(1) ) {
            case KW_FullStop:
                {
                alt58=1;
                }
                break;
            case KW_QuestionMarkFullStop:
                {
                alt58=2;
                }
                break;
            case KW_ColonColon:
                {
                alt58=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 58, 0, input);

                throw nvae;
            }

            switch (alt58) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXMemberFeatureCallAccess().getFullStopKeyword_1_1_0_0_1_0()); 
                    }
                    match(input,KW_FullStop,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getXMemberFeatureCallAccess().getFullStopKeyword_1_1_0_0_1_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXMemberFeatureCallAccess().getNullSafeAssignment_1_1_0_0_1_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__XMemberFeatureCall__NullSafeAssignment_1_1_0_0_1_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXMemberFeatureCallAccess().getNullSafeAssignment_1_1_0_0_1_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXMemberFeatureCallAccess().getExplicitStaticAssignment_1_1_0_0_1_2()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__XMemberFeatureCall__ExplicitStaticAssignment_1_1_0_0_1_2();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXMemberFeatureCallAccess().getExplicitStaticAssignment_1_1_0_0_1_2()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Alternatives_1_1_3_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt59=2;
            alt59 = dfa59.predict(input);
            switch (alt59) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXMemberFeatureCallAccess().getMemberCallArgumentsAssignment_1_1_3_1_0()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__XMemberFeatureCall__MemberCallArgumentsAssignment_1_1_3_1_0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXMemberFeatureCallAccess().getMemberCallArgumentsAssignment_1_1_3_1_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXMemberFeatureCallAccess().getGroup_1_1_3_1_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__XMemberFeatureCall__Group_1_1_3_1_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXMemberFeatureCallAccess().getGroup_1_1_3_1_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XPrimaryExpression__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt60=15;
            alt60 = dfa60.predict(input);
            switch (alt60) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXPrimaryExpressionAccess().getXConstructorCallParserRuleCall_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleXConstructorCall();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getXPrimaryExpressionAccess().getXConstructorCallParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXPrimaryExpressionAccess().getXBlockExpressionParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleXBlockExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getXPrimaryExpressionAccess().getXBlockExpressionParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXPrimaryExpressionAccess().getXSwitchExpressionParserRuleCall_2()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleXSwitchExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getXPrimaryExpressionAccess().getXSwitchExpressionParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXPrimaryExpressionAccess().getXSynchronizedExpressionParserRuleCall_3()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    ruleXSynchronizedExpression();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXPrimaryExpressionAccess().getXSynchronizedExpressionParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXPrimaryExpressionAccess().getXFeatureCallParserRuleCall_4()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleXFeatureCall();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getXPrimaryExpressionAccess().getXFeatureCallParserRuleCall_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXPrimaryExpressionAccess().getXLiteralParserRuleCall_5()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleXLiteral();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getXPrimaryExpressionAccess().getXLiteralParserRuleCall_5()); 
                    }

                    }


                    }
                    break;
                case 7 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXPrimaryExpressionAccess().getXIfExpressionParserRuleCall_6()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleXIfExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getXPrimaryExpressionAccess().getXIfExpressionParserRuleCall_6()); 
                    }

                    }


                    }
                    break;
                case 8 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXPrimaryExpressionAccess().getXForLoopExpressionParserRuleCall_7()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    ruleXForLoopExpression();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXPrimaryExpressionAccess().getXForLoopExpressionParserRuleCall_7()); 
                    }

                    }


                    }
                    break;
                case 9 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXPrimaryExpressionAccess().getXBasicForLoopExpressionParserRuleCall_8()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleXBasicForLoopExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getXPrimaryExpressionAccess().getXBasicForLoopExpressionParserRuleCall_8()); 
                    }

                    }


                    }
                    break;
                case 10 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXPrimaryExpressionAccess().getXWhileExpressionParserRuleCall_9()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleXWhileExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getXPrimaryExpressionAccess().getXWhileExpressionParserRuleCall_9()); 
                    }

                    }


                    }
                    break;
                case 11 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXPrimaryExpressionAccess().getXDoWhileExpressionParserRuleCall_10()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleXDoWhileExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getXPrimaryExpressionAccess().getXDoWhileExpressionParserRuleCall_10()); 
                    }

                    }


                    }
                    break;
                case 12 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXPrimaryExpressionAccess().getXThrowExpressionParserRuleCall_11()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleXThrowExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getXPrimaryExpressionAccess().getXThrowExpressionParserRuleCall_11()); 
                    }

                    }


                    }
                    break;
                case 13 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXPrimaryExpressionAccess().getXReturnExpressionParserRuleCall_12()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleXReturnExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getXPrimaryExpressionAccess().getXReturnExpressionParserRuleCall_12()); 
                    }

                    }


                    }
                    break;
                case 14 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXPrimaryExpressionAccess().getXTryCatchFinallyExpressionParserRuleCall_13()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleXTryCatchFinallyExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getXPrimaryExpressionAccess().getXTryCatchFinallyExpressionParserRuleCall_13()); 
                    }

                    }


                    }
                    break;
                case 15 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXPrimaryExpressionAccess().getXParenthesizedExpressionParserRuleCall_14()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleXParenthesizedExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getXPrimaryExpressionAccess().getXParenthesizedExpressionParserRuleCall_14()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XLiteral__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt61=7;
            switch ( input.LA(1) ) {
            case KW_NumberSign:
                {
                alt61=1;
                }
                break;
            case KW_LeftSquareBracket:
                {
                alt61=2;
                }
                break;
            case KW_False:
            case KW_True:
                {
                alt61=3;
                }
                break;
            case RULE_HEX:
            case RULE_INT:
            case RULE_DECIMAL:
                {
                alt61=4;
                }
                break;
            case KW_Null:
                {
                alt61=5;
                }
                break;
            case RULE_STRING:
            case RULE_RICH_TEXT:
            case RULE_RICH_TEXT_START:
                {
                alt61=6;
                }
                break;
            case KW_Typeof:
                {
                alt61=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 61, 0, input);

                throw nvae;
            }

            switch (alt61) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXLiteralAccess().getXCollectionLiteralParserRuleCall_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleXCollectionLiteral();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getXLiteralAccess().getXCollectionLiteralParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXLiteralAccess().getXClosureParserRuleCall_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    ruleXClosure();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXLiteralAccess().getXClosureParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXLiteralAccess().getXBooleanLiteralParserRuleCall_2()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleXBooleanLiteral();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getXLiteralAccess().getXBooleanLiteralParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXLiteralAccess().getXNumberLiteralParserRuleCall_3()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleXNumberLiteral();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getXLiteralAccess().getXNumberLiteralParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXLiteralAccess().getXNullLiteralParserRuleCall_4()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleXNullLiteral();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getXLiteralAccess().getXNullLiteralParserRuleCall_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXLiteralAccess().getXStringLiteralParserRuleCall_5()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleXStringLiteral();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getXLiteralAccess().getXStringLiteralParserRuleCall_5()); 
                    }

                    }


                    }
                    break;
                case 7 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXLiteralAccess().getXTypeLiteralParserRuleCall_6()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleXTypeLiteral();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getXLiteralAccess().getXTypeLiteralParserRuleCall_6()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCollectionLiteral__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==KW_NumberSign) ) {
                int LA62_1 = input.LA(2);

                if ( (LA62_1==KW_LeftCurlyBracket) ) {
                    alt62=1;
                }
                else if ( (LA62_1==KW_LeftSquareBracket) ) {
                    alt62=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 62, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 62, 0, input);

                throw nvae;
            }
            switch (alt62) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXCollectionLiteralAccess().getXSetLiteralParserRuleCall_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleXSetLiteral();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getXCollectionLiteralAccess().getXSetLiteralParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXCollectionLiteralAccess().getXListLiteralParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleXListLiteral();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getXCollectionLiteralAccess().getXListLiteralParserRuleCall_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XExpressionOrVarDeclaration__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt63=2;
            switch ( input.LA(1) ) {
            case KW_Val:
            case KW_Var:
                {
                alt63=1;
                }
                break;
            case KW_Extension:
                {
                switch ( input.LA(2) ) {
                case EOF:
                case KW_Package:
                case KW_Semicolon:
                case KW_Class:
                case KW_LessThanSign:
                case KW_Comma:
                case KW_GreaterThanSign:
                case KW_Extends:
                case KW_Implements:
                case KW_LeftCurlyBracket:
                case KW_RightCurlyBracket:
                case KW_Interface:
                case KW_Enum:
                case KW_Annotation:
                case KW_LeftParenthesis:
                case KW_EqualsSignGreaterThanSign:
                case KW_EqualsSign:
                case KW_Extension:
                case KW_Throws:
                case KW_New:
                case KW_FullStop:
                case KW_Public:
                case KW_Private:
                case KW_Protected:
                case KW_Abstract:
                case KW_Static:
                case KW_Dispatch:
                case KW_Final:
                case KW_Strictfp:
                case KW_Native:
                case KW_Volatile:
                case KW_Synchronized:
                case KW_Transient:
                case KW_Def:
                case KW_Override:
                case KW_Create:
                case KW_AFTER:
                case KW_BEFORE:
                case KW_SEPARATOR:
                case KW_Import:
                case KW_QuestionMark:
                case KW_Try:
                case KW_Switch:
                case KW_NumberSign:
                case KW_LeftSquareBracket:
                case KW_RightSquareBracket:
                case KW_PlusSignEqualsSign:
                case KW_HyphenMinusEqualsSign:
                case KW_AsteriskEqualsSign:
                case KW_SolidusEqualsSign:
                case KW_PercentSignEqualsSign:
                case KW_GreaterThanSignEqualsSign:
                case KW_VerticalLineVerticalLine:
                case KW_AmpersandAmpersand:
                case KW_EqualsSignEqualsSign:
                case KW_ExclamationMarkEqualsSign:
                case KW_EqualsSignEqualsSignEqualsSign:
                case KW_ExclamationMarkEqualsSignEqualsSign:
                case KW_Instanceof:
                case KW_HyphenMinusGreaterThanSign:
                case KW_FullStopFullStopLessThanSign:
                case KW_FullStopFullStop:
                case KW_LessThanSignGreaterThanSign:
                case KW_QuestionMarkColon:
                case KW_PlusSign:
                case KW_HyphenMinus:
                case KW_Asterisk:
                case KW_AsteriskAsterisk:
                case KW_Solidus:
                case KW_PercentSign:
                case KW_ExclamationMark:
                case KW_As:
                case KW_PlusSignPlusSign:
                case KW_HyphenMinusHyphenMinus:
                case KW_ColonColon:
                case KW_QuestionMarkFullStop:
                case KW_If:
                case KW_For:
                case KW_While:
                case KW_Do:
                case KW_Super:
                case KW_False:
                case KW_True:
                case KW_Null:
                case KW_Typeof:
                case KW_Throw:
                case KW_Return:
                case RULE_ID:
                case RULE_HEX:
                case RULE_INT:
                case RULE_DECIMAL:
                case RULE_STRING:
                case RULE_RICH_TEXT:
                case RULE_RICH_TEXT_START:
                case RULE_RICH_TEXT_INBETWEEN:
                case RULE_COMMENT_RICH_TEXT_INBETWEEN:
                case RULE_RICH_TEXT_END:
                case RULE_COMMENT_RICH_TEXT_END:
                    {
                    alt63=2;
                    }
                    break;
                case KW_Var:
                    {
                    int LA63_4 = input.LA(3);

                    if ( (synpred168_InternalXtend()) ) {
                        alt63=1;
                    }
                    else if ( (true) ) {
                        alt63=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 63, 4, input);

                        throw nvae;
                    }
                    }
                    break;
                case KW_Val:
                    {
                    int LA63_5 = input.LA(3);

                    if ( (synpred168_InternalXtend()) ) {
                        alt63=1;
                    }
                    else if ( (true) ) {
                        alt63=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 63, 5, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 63, 2, input);

                    throw nvae;
                }

                }
                break;
            case KW_Package:
            case KW_Class:
            case KW_LessThanSign:
            case KW_Extends:
            case KW_Implements:
            case KW_LeftCurlyBracket:
            case KW_Interface:
            case KW_Enum:
            case KW_Annotation:
            case KW_LeftParenthesis:
            case KW_Throws:
            case KW_New:
            case KW_Public:
            case KW_Private:
            case KW_Protected:
            case KW_Abstract:
            case KW_Static:
            case KW_Dispatch:
            case KW_Final:
            case KW_Strictfp:
            case KW_Native:
            case KW_Volatile:
            case KW_Synchronized:
            case KW_Transient:
            case KW_Def:
            case KW_Override:
            case KW_Create:
            case KW_AFTER:
            case KW_BEFORE:
            case KW_SEPARATOR:
            case KW_Import:
            case KW_Try:
            case KW_Switch:
            case KW_NumberSign:
            case KW_LeftSquareBracket:
            case KW_PlusSign:
            case KW_HyphenMinus:
            case KW_ExclamationMark:
            case KW_If:
            case KW_For:
            case KW_While:
            case KW_Do:
            case KW_Super:
            case KW_False:
            case KW_True:
            case KW_Null:
            case KW_Typeof:
            case KW_Throw:
            case KW_Return:
            case RULE_ID:
            case RULE_HEX:
            case RULE_INT:
            case RULE_DECIMAL:
            case RULE_STRING:
            case RULE_RICH_TEXT:
            case RULE_RICH_TEXT_START:
                {
                alt63=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 63, 0, input);

                throw nvae;
            }

            switch (alt63) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXExpressionOrVarDeclarationAccess().getXVariableDeclarationParserRuleCall_0()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    ruleXVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXExpressionOrVarDeclarationAccess().getXVariableDeclarationParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXExpressionOrVarDeclarationAccess().getXExpressionParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleXExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getXExpressionOrVarDeclarationAccess().getXExpressionParserRuleCall_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__Alternatives_3_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt64=2;
            alt64 = dfa64.predict(input);
            switch (alt64) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXFeatureCallAccess().getFeatureCallArgumentsAssignment_3_1_0()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__XFeatureCall__FeatureCallArgumentsAssignment_3_1_0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXFeatureCallAccess().getFeatureCallArgumentsAssignment_3_1_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXFeatureCallAccess().getGroup_3_1_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__XFeatureCall__Group_3_1_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXFeatureCallAccess().getGroup_3_1_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__IdOrSuper__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==KW_Package||LA65_0==KW_Class||(LA65_0>=KW_Extends && LA65_0<=KW_Implements)||(LA65_0>=KW_Interface && LA65_0<=KW_Annotation)||(LA65_0>=KW_Extension && LA65_0<=KW_Throws)||(LA65_0>=KW_Public && LA65_0<=KW_Transient)||(LA65_0>=KW_Def && LA65_0<=KW_Create)||(LA65_0>=KW_AFTER && LA65_0<=KW_Import)||LA65_0==RULE_ID) ) {
                alt65=1;
            }
            else if ( (LA65_0==KW_Super) ) {
                alt65=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);

                throw nvae;
            }
            switch (alt65) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getIdOrSuperAccess().getFeatureCallIDParserRuleCall_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleFeatureCallID();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getIdOrSuperAccess().getFeatureCallIDParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getIdOrSuperAccess().getSuperKeyword_1()); 
                    }
                    match(input,KW_Super,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getIdOrSuperAccess().getSuperKeyword_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBooleanLiteral__Alternatives_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==KW_False) ) {
                alt66=1;
            }
            else if ( (LA66_0==KW_True) ) {
                alt66=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);

                throw nvae;
            }
            switch (alt66) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXBooleanLiteralAccess().getFalseKeyword_1_0()); 
                    }
                    match(input,KW_False,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getXBooleanLiteralAccess().getFalseKeyword_1_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXBooleanLiteralAccess().getIsTrueAssignment_1_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__XBooleanLiteral__IsTrueAssignment_1_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXBooleanLiteralAccess().getIsTrueAssignment_1_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Number__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==RULE_HEX) ) {
                alt67=1;
            }
            else if ( ((LA67_0>=RULE_INT && LA67_0<=RULE_DECIMAL)) ) {
                alt67=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);

                throw nvae;
            }
            switch (alt67) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getNumberAccess().getHEXTerminalRuleCall_0()); 
                    }
                    match(input,RULE_HEX,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getNumberAccess().getHEXTerminalRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getNumberAccess().getGroup_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__Number__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getNumberAccess().getGroup_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Number__Alternatives_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==RULE_INT) ) {
                alt68=1;
            }
            else if ( (LA68_0==RULE_DECIMAL) ) {
                alt68=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 68, 0, input);

                throw nvae;
            }
            switch (alt68) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_0_0()); 
                    }
                    match(input,RULE_INT,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_0_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_0_1()); 
                    }
                    match(input,RULE_DECIMAL,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_0_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Number__Alternatives_1_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==RULE_INT) ) {
                alt69=1;
            }
            else if ( (LA69_0==RULE_DECIMAL) ) {
                alt69=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);

                throw nvae;
            }
            switch (alt69) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1_1_0()); 
                    }
                    match(input,RULE_INT,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1_1_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_1_1_1()); 
                    }
                    match(input,RULE_DECIMAL,FOLLOW_2); if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_1_1_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmTypeReference__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==KW_Annotation||LA70_0==KW_Create||(LA70_0>=KW_AFTER && LA70_0<=KW_SEPARATOR)||LA70_0==RULE_ID) ) {
                alt70=1;
            }
            else if ( (LA70_0==KW_LeftParenthesis||LA70_0==KW_EqualsSignGreaterThanSign) ) {
                alt70=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 70, 0, input);

                throw nvae;
            }
            switch (alt70) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getJvmTypeReferenceAccess().getGroup_0()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__JvmTypeReference__Group_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getJvmTypeReferenceAccess().getGroup_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getJvmTypeReferenceAccess().getXFunctionTypeRefParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleXFunctionTypeRef();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getJvmTypeReferenceAccess().getXFunctionTypeRefParserRuleCall_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmArgumentTypeReference__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( ((LA71_0>=KW_Annotation && LA71_0<=KW_LeftParenthesis)||LA71_0==KW_EqualsSignGreaterThanSign||LA71_0==KW_Create||(LA71_0>=KW_AFTER && LA71_0<=KW_SEPARATOR)||LA71_0==RULE_ID) ) {
                alt71=1;
            }
            else if ( (LA71_0==KW_QuestionMark) ) {
                alt71=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 71, 0, input);

                throw nvae;
            }
            switch (alt71) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getJvmArgumentTypeReferenceAccess().getJvmTypeReferenceParserRuleCall_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleJvmTypeReference();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getJvmArgumentTypeReferenceAccess().getJvmTypeReferenceParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getJvmArgumentTypeReferenceAccess().getJvmWildcardTypeReferenceParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleJvmWildcardTypeReference();

                    state._fsp--;
                    if (state.failed) return ;
                    if (! isBacktracking() ) {
                       after(grammarAccess.getJvmArgumentTypeReferenceAccess().getJvmWildcardTypeReferenceParserRuleCall_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmWildcardTypeReference__Alternatives_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==KW_Extends) ) {
                alt72=1;
            }
            else if ( (LA72_0==KW_Super) ) {
                alt72=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 72, 0, input);

                throw nvae;
            }
            switch (alt72) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getJvmWildcardTypeReferenceAccess().getGroup_2_0()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__JvmWildcardTypeReference__Group_2_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getJvmWildcardTypeReferenceAccess().getGroup_2_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getJvmWildcardTypeReferenceAccess().getGroup_2_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__JvmWildcardTypeReference__Group_2_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getJvmWildcardTypeReferenceAccess().getGroup_2_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XImportDeclaration__Alternatives_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt73=3;
            alt73 = dfa73.predict(input);
            switch (alt73) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXImportDeclarationAccess().getGroup_1_0()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__XImportDeclaration__Group_1_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXImportDeclarationAccess().getGroup_1_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXImportDeclarationAccess().getImportedTypeAssignment_1_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__XImportDeclaration__ImportedTypeAssignment_1_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXImportDeclarationAccess().getImportedTypeAssignment_1_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXImportDeclarationAccess().getImportedNamespaceAssignment_1_2()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__XImportDeclaration__ImportedNamespaceAssignment_1_2();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXImportDeclarationAccess().getImportedNamespaceAssignment_1_2()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XImportDeclaration__Alternatives_1_0_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==KW_Asterisk) ) {
                alt74=1;
            }
            else if ( (LA74_0==KW_Annotation||LA74_0==KW_Create||(LA74_0>=KW_AFTER && LA74_0<=KW_SEPARATOR)||LA74_0==RULE_ID) ) {
                alt74=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 74, 0, input);

                throw nvae;
            }
            switch (alt74) {
                case 1 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXImportDeclarationAccess().getWildcardAssignment_1_0_3_0()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__XImportDeclaration__WildcardAssignment_1_0_3_0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXImportDeclarationAccess().getWildcardAssignment_1_0_3_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if (! isBacktracking() ) {
                       before(grammarAccess.getXImportDeclarationAccess().getMemberNameAssignment_1_0_3_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    rule__XImportDeclaration__MemberNameAssignment_1_0_3_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if (! isBacktracking() ) {
                       after(grammarAccess.getXImportDeclarationAccess().getMemberNameAssignment_1_0_3_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__File__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_5);
            rule__File__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__File__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__File__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getFileAccess().getGroup_0()); 
            }
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==KW_Package) ) {
                int LA75_1 = input.LA(2);

                if ( (LA75_1==KW_Annotation) ) {
                    int LA75_3 = input.LA(3);

                    if ( (LA75_3==KW_Annotation) ) {
                        int LA75_5 = input.LA(4);

                        if ( (LA75_5==KW_Annotation||LA75_5==KW_Create||(LA75_5>=KW_AFTER && LA75_5<=KW_SEPARATOR)||LA75_5==RULE_ID) ) {
                            alt75=1;
                        }
                    }
                    else if ( (LA75_3==EOF||(LA75_3>=KW_Package && LA75_3<=KW_Class)||(LA75_3>=KW_Interface && LA75_3<=KW_Enum)||(LA75_3>=KW_FullStop && LA75_3<=KW_Transient)||LA75_3==KW_Import||LA75_3==KW_CommercialAt) ) {
                        alt75=1;
                    }
                }
                else if ( (LA75_1==KW_Create||(LA75_1>=KW_AFTER && LA75_1<=KW_SEPARATOR)||LA75_1==RULE_ID) ) {
                    alt75=1;
                }
            }
            switch (alt75) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__File__Group_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getFileAccess().getGroup_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__File__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_5);
            rule__File__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__File__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__File__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getFileAccess().getImportSectionAssignment_1()); 
            }
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==KW_Import) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__File__ImportSectionAssignment_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getFileAccess().getImportSectionAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__File__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__File__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__File__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getFileAccess().getXtendTypesAssignment_2()); 
            }
            loop77:
            do {
                int alt77=2;
                int LA77_0 = input.LA(1);

                if ( (LA77_0==KW_Package||LA77_0==KW_Class||(LA77_0>=KW_Interface && LA77_0<=KW_Annotation)||(LA77_0>=KW_Public && LA77_0<=KW_Transient)||LA77_0==KW_CommercialAt) ) {
                    alt77=1;
                }


                switch (alt77) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_6);
            	    rule__File__XtendTypesAssignment_2();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop77;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getFileAccess().getXtendTypesAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__File__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__File__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__File__Group_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__File__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getFileAccess().getPackageKeyword_0_0()); 
            }
            match(input,KW_Package,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getFileAccess().getPackageKeyword_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__File__Group_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_8);
            rule__File__Group_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__File__Group_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__File__Group_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getFileAccess().getPackageAssignment_0_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__File__PackageAssignment_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getFileAccess().getPackageAssignment_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__File__Group_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__File__Group_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__File__Group_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getFileAccess().getSemicolonKeyword_0_2()); 
            }
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==KW_Semicolon) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    {
                    match(input,KW_Semicolon,FOLLOW_2); if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getFileAccess().getSemicolonKeyword_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_9);
            rule__Type__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getXtendTypeDeclarationAction_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getXtendTypeDeclarationAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_9);
            rule__Type__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getAnnotationsAssignment_1()); 
            }
            loop79:
            do {
                int alt79=2;
                int LA79_0 = input.LA(1);

                if ( (LA79_0==KW_CommercialAt) ) {
                    alt79=1;
                }


                switch (alt79) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_10);
            	    rule__Type__AnnotationsAssignment_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop79;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getAnnotationsAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Type__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getAlternatives_2()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Type__Alternatives_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getAlternatives_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_11);
            rule__Type__Group_2_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getXtendClassAnnotationInfoAction_2_0_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getXtendClassAnnotationInfoAction_2_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_11);
            rule__Type__Group_2_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getModifiersAssignment_2_0_1()); 
            }
            loop80:
            do {
                int alt80=2;
                int LA80_0 = input.LA(1);

                if ( (LA80_0==KW_Package||(LA80_0>=KW_Public && LA80_0<=KW_Transient)) ) {
                    alt80=1;
                }


                switch (alt80) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_12);
            	    rule__Type__ModifiersAssignment_2_0_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop80;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getModifiersAssignment_2_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__Type__Group_2_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_0__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getClassKeyword_2_0_2()); 
            }
            match(input,KW_Class,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getClassKeyword_2_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_13);
            rule__Type__Group_2_0__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_0__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getNameAssignment_2_0_3()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Type__NameAssignment_2_0_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getNameAssignment_2_0_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_13);
            rule__Type__Group_2_0__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_0__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getGroup_2_0_4()); 
            }
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==KW_LessThanSign) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__Type__Group_2_0_4__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getGroup_2_0_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_13);
            rule__Type__Group_2_0__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_0__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getGroup_2_0_5()); 
            }
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==KW_Extends) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__Type__Group_2_0_5__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getGroup_2_0_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_13);
            rule__Type__Group_2_0__6__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_0__7();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getGroup_2_0_6()); 
            }
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==KW_Implements) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__Type__Group_2_0_6__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getGroup_2_0_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0__7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_14);
            rule__Type__Group_2_0__7__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_0__8();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0__7__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getLeftCurlyBracketKeyword_2_0_7()); 
            }
            match(input,KW_LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getLeftCurlyBracketKeyword_2_0_7()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0__8() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_14);
            rule__Type__Group_2_0__8__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_0__9();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0__8__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getMembersAssignment_2_0_8()); 
            }
            loop84:
            do {
                int alt84=2;
                int LA84_0 = input.LA(1);

                if ( (LA84_0==KW_Package||LA84_0==KW_Class||(LA84_0>=KW_Interface && LA84_0<=KW_LeftParenthesis)||LA84_0==KW_EqualsSignGreaterThanSign||LA84_0==KW_Extension||LA84_0==KW_New||(LA84_0>=KW_Public && LA84_0<=KW_Create)||(LA84_0>=KW_AFTER && LA84_0<=KW_SEPARATOR)||LA84_0==KW_CommercialAt||LA84_0==RULE_ID) ) {
                    alt84=1;
                }


                switch (alt84) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_15);
            	    rule__Type__MembersAssignment_2_0_8();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop84;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getMembersAssignment_2_0_8()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0__9() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_0__9__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0__9__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getRightCurlyBracketKeyword_2_0_9()); 
            }
            match(input,KW_RightCurlyBracket,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getRightCurlyBracketKeyword_2_0_9()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0_4__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__Type__Group_2_0_4__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_0_4__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0_4__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getLessThanSignKeyword_2_0_4_0()); 
            }
            match(input,KW_LessThanSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getLessThanSignKeyword_2_0_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0_4__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_16);
            rule__Type__Group_2_0_4__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_0_4__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0_4__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getTypeParametersAssignment_2_0_4_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Type__TypeParametersAssignment_2_0_4_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getTypeParametersAssignment_2_0_4_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0_4__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_16);
            rule__Type__Group_2_0_4__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_0_4__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0_4__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getGroup_2_0_4_2()); 
            }
            loop85:
            do {
                int alt85=2;
                int LA85_0 = input.LA(1);

                if ( (LA85_0==KW_Comma) ) {
                    alt85=1;
                }


                switch (alt85) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_17);
            	    rule__Type__Group_2_0_4_2__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop85;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getGroup_2_0_4_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0_4__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_0_4__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0_4__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getGreaterThanSignKeyword_2_0_4_3()); 
            }
            match(input,KW_GreaterThanSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getGreaterThanSignKeyword_2_0_4_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0_4_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__Type__Group_2_0_4_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_0_4_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0_4_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getCommaKeyword_2_0_4_2_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getCommaKeyword_2_0_4_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0_4_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_0_4_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0_4_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getTypeParametersAssignment_2_0_4_2_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Type__TypeParametersAssignment_2_0_4_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getTypeParametersAssignment_2_0_4_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0_5__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__Type__Group_2_0_5__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_0_5__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0_5__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getExtendsKeyword_2_0_5_0()); 
            }
            match(input,KW_Extends,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getExtendsKeyword_2_0_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0_5__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_0_5__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0_5__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getExtendsAssignment_2_0_5_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Type__ExtendsAssignment_2_0_5_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getExtendsAssignment_2_0_5_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0_6__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_18);
            rule__Type__Group_2_0_6__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_0_6__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0_6__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getImplementsKeyword_2_0_6_0()); 
            }
            match(input,KW_Implements,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getImplementsKeyword_2_0_6_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0_6__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_19);
            rule__Type__Group_2_0_6__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_0_6__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0_6__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getImplementsAssignment_2_0_6_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Type__ImplementsAssignment_2_0_6_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getImplementsAssignment_2_0_6_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0_6__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_0_6__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0_6__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getGroup_2_0_6_2()); 
            }
            loop86:
            do {
                int alt86=2;
                int LA86_0 = input.LA(1);

                if ( (LA86_0==KW_Comma) ) {
                    alt86=1;
                }


                switch (alt86) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_17);
            	    rule__Type__Group_2_0_6_2__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop86;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getGroup_2_0_6_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0_6_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_18);
            rule__Type__Group_2_0_6_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_0_6_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0_6_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getCommaKeyword_2_0_6_2_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getCommaKeyword_2_0_6_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0_6_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_0_6_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_0_6_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getImplementsAssignment_2_0_6_2_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Type__ImplementsAssignment_2_0_6_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getImplementsAssignment_2_0_6_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_20);
            rule__Type__Group_2_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getXtendInterfaceAnnotationInfoAction_2_1_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getXtendInterfaceAnnotationInfoAction_2_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_20);
            rule__Type__Group_2_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getModifiersAssignment_2_1_1()); 
            }
            loop87:
            do {
                int alt87=2;
                int LA87_0 = input.LA(1);

                if ( (LA87_0==KW_Package||(LA87_0>=KW_Public && LA87_0<=KW_Transient)) ) {
                    alt87=1;
                }


                switch (alt87) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_12);
            	    rule__Type__ModifiersAssignment_2_1_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop87;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getModifiersAssignment_2_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__Type__Group_2_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_1__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getInterfaceKeyword_2_1_2()); 
            }
            match(input,KW_Interface,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getInterfaceKeyword_2_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_1__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_21);
            rule__Type__Group_2_1__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_1__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_1__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getNameAssignment_2_1_3()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Type__NameAssignment_2_1_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getNameAssignment_2_1_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_1__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_21);
            rule__Type__Group_2_1__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_1__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_1__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getGroup_2_1_4()); 
            }
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==KW_LessThanSign) ) {
                alt88=1;
            }
            switch (alt88) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__Type__Group_2_1_4__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getGroup_2_1_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_1__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_21);
            rule__Type__Group_2_1__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_1__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_1__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getGroup_2_1_5()); 
            }
            int alt89=2;
            int LA89_0 = input.LA(1);

            if ( (LA89_0==KW_Extends) ) {
                alt89=1;
            }
            switch (alt89) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__Type__Group_2_1_5__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getGroup_2_1_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_1__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_14);
            rule__Type__Group_2_1__6__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_1__7();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_1__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getLeftCurlyBracketKeyword_2_1_6()); 
            }
            match(input,KW_LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getLeftCurlyBracketKeyword_2_1_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_1__7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_14);
            rule__Type__Group_2_1__7__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_1__8();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_1__7__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getMembersAssignment_2_1_7()); 
            }
            loop90:
            do {
                int alt90=2;
                int LA90_0 = input.LA(1);

                if ( (LA90_0==KW_Package||LA90_0==KW_Class||(LA90_0>=KW_Interface && LA90_0<=KW_LeftParenthesis)||LA90_0==KW_EqualsSignGreaterThanSign||LA90_0==KW_Extension||LA90_0==KW_New||(LA90_0>=KW_Public && LA90_0<=KW_Create)||(LA90_0>=KW_AFTER && LA90_0<=KW_SEPARATOR)||LA90_0==KW_CommercialAt||LA90_0==RULE_ID) ) {
                    alt90=1;
                }


                switch (alt90) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_15);
            	    rule__Type__MembersAssignment_2_1_7();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getMembersAssignment_2_1_7()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_1__8() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_1__8__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_1__8__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getRightCurlyBracketKeyword_2_1_8()); 
            }
            match(input,KW_RightCurlyBracket,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getRightCurlyBracketKeyword_2_1_8()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_1_4__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__Type__Group_2_1_4__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_1_4__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_1_4__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getLessThanSignKeyword_2_1_4_0()); 
            }
            match(input,KW_LessThanSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getLessThanSignKeyword_2_1_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_1_4__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_16);
            rule__Type__Group_2_1_4__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_1_4__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_1_4__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getTypeParametersAssignment_2_1_4_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Type__TypeParametersAssignment_2_1_4_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getTypeParametersAssignment_2_1_4_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_1_4__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_16);
            rule__Type__Group_2_1_4__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_1_4__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_1_4__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getGroup_2_1_4_2()); 
            }
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);

                if ( (LA91_0==KW_Comma) ) {
                    alt91=1;
                }


                switch (alt91) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_17);
            	    rule__Type__Group_2_1_4_2__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop91;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getGroup_2_1_4_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_1_4__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_1_4__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_1_4__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getGreaterThanSignKeyword_2_1_4_3()); 
            }
            match(input,KW_GreaterThanSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getGreaterThanSignKeyword_2_1_4_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_1_4_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__Type__Group_2_1_4_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_1_4_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_1_4_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getCommaKeyword_2_1_4_2_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getCommaKeyword_2_1_4_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_1_4_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_1_4_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_1_4_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getTypeParametersAssignment_2_1_4_2_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Type__TypeParametersAssignment_2_1_4_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getTypeParametersAssignment_2_1_4_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_1_5__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_18);
            rule__Type__Group_2_1_5__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_1_5__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_1_5__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getExtendsKeyword_2_1_5_0()); 
            }
            match(input,KW_Extends,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getExtendsKeyword_2_1_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_1_5__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_19);
            rule__Type__Group_2_1_5__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_1_5__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_1_5__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getExtendsAssignment_2_1_5_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Type__ExtendsAssignment_2_1_5_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getExtendsAssignment_2_1_5_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_1_5__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_1_5__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_1_5__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getGroup_2_1_5_2()); 
            }
            loop92:
            do {
                int alt92=2;
                int LA92_0 = input.LA(1);

                if ( (LA92_0==KW_Comma) ) {
                    alt92=1;
                }


                switch (alt92) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_17);
            	    rule__Type__Group_2_1_5_2__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop92;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getGroup_2_1_5_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_1_5_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_18);
            rule__Type__Group_2_1_5_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_1_5_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_1_5_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getCommaKeyword_2_1_5_2_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getCommaKeyword_2_1_5_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_1_5_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_1_5_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_1_5_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getExtendsAssignment_2_1_5_2_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Type__ExtendsAssignment_2_1_5_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getExtendsAssignment_2_1_5_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_22);
            rule__Type__Group_2_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getXtendEnumAnnotationInfoAction_2_2_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getXtendEnumAnnotationInfoAction_2_2_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_22);
            rule__Type__Group_2_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_2__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getModifiersAssignment_2_2_1()); 
            }
            loop93:
            do {
                int alt93=2;
                int LA93_0 = input.LA(1);

                if ( (LA93_0==KW_Package||(LA93_0>=KW_Public && LA93_0<=KW_Transient)) ) {
                    alt93=1;
                }


                switch (alt93) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_12);
            	    rule__Type__ModifiersAssignment_2_2_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop93;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getModifiersAssignment_2_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_2__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__Type__Group_2_2__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_2__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_2__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getEnumKeyword_2_2_2()); 
            }
            match(input,KW_Enum,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getEnumKeyword_2_2_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_2__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_23);
            rule__Type__Group_2_2__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_2__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_2__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getNameAssignment_2_2_3()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Type__NameAssignment_2_2_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getNameAssignment_2_2_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_2__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_24);
            rule__Type__Group_2_2__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_2__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_2__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getLeftCurlyBracketKeyword_2_2_4()); 
            }
            match(input,KW_LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getLeftCurlyBracketKeyword_2_2_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_2__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_24);
            rule__Type__Group_2_2__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_2__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_2__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getGroup_2_2_5()); 
            }
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==KW_Annotation||LA94_0==KW_Create||(LA94_0>=KW_AFTER && LA94_0<=KW_SEPARATOR)||LA94_0==KW_CommercialAt||LA94_0==RULE_ID) ) {
                alt94=1;
            }
            switch (alt94) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__Type__Group_2_2_5__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getGroup_2_2_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_2__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_24);
            rule__Type__Group_2_2__6__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_2__7();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_2__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getSemicolonKeyword_2_2_6()); 
            }
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==KW_Semicolon) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    {
                    match(input,KW_Semicolon,FOLLOW_2); if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getSemicolonKeyword_2_2_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_2__7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_2__7__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_2__7__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getRightCurlyBracketKeyword_2_2_7()); 
            }
            match(input,KW_RightCurlyBracket,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getRightCurlyBracketKeyword_2_2_7()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_2_5__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_19);
            rule__Type__Group_2_2_5__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_2_5__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_2_5__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getMembersAssignment_2_2_5_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Type__MembersAssignment_2_2_5_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getMembersAssignment_2_2_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_2_5__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_2_5__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_2_5__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getGroup_2_2_5_1()); 
            }
            loop96:
            do {
                int alt96=2;
                int LA96_0 = input.LA(1);

                if ( (LA96_0==KW_Comma) ) {
                    alt96=1;
                }


                switch (alt96) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_17);
            	    rule__Type__Group_2_2_5_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop96;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getGroup_2_2_5_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_2_5_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_25);
            rule__Type__Group_2_2_5_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_2_5_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_2_5_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getCommaKeyword_2_2_5_1_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getCommaKeyword_2_2_5_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_2_5_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_2_5_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_2_5_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getMembersAssignment_2_2_5_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Type__MembersAssignment_2_2_5_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getMembersAssignment_2_2_5_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_9);
            rule__Type__Group_2_3__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_3__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_3__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getXtendAnnotationTypeAnnotationInfoAction_2_3_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getXtendAnnotationTypeAnnotationInfoAction_2_3_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_3__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_9);
            rule__Type__Group_2_3__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_3__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_3__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getModifiersAssignment_2_3_1()); 
            }
            loop97:
            do {
                int alt97=2;
                int LA97_0 = input.LA(1);

                if ( (LA97_0==KW_Package||(LA97_0>=KW_Public && LA97_0<=KW_Transient)) ) {
                    alt97=1;
                }


                switch (alt97) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_12);
            	    rule__Type__ModifiersAssignment_2_3_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop97;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getModifiersAssignment_2_3_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_3__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__Type__Group_2_3__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_3__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_3__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getAnnotationKeyword_2_3_2()); 
            }
            match(input,KW_Annotation,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getAnnotationKeyword_2_3_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_3__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_23);
            rule__Type__Group_2_3__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_3__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_3__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getNameAssignment_2_3_3()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Type__NameAssignment_2_3_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getNameAssignment_2_3_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_3__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_26);
            rule__Type__Group_2_3__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_3__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_3__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getLeftCurlyBracketKeyword_2_3_4()); 
            }
            match(input,KW_LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getLeftCurlyBracketKeyword_2_3_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_3__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_26);
            rule__Type__Group_2_3__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_3__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_3__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getMembersAssignment_2_3_5()); 
            }
            loop98:
            do {
                int alt98=2;
                int LA98_0 = input.LA(1);

                if ( (LA98_0==KW_Package||LA98_0==KW_Class||(LA98_0>=KW_Interface && LA98_0<=KW_LeftParenthesis)||LA98_0==KW_EqualsSignGreaterThanSign||(LA98_0>=KW_Public && LA98_0<=KW_Var)||LA98_0==KW_Create||(LA98_0>=KW_AFTER && LA98_0<=KW_SEPARATOR)||LA98_0==KW_CommercialAt||LA98_0==RULE_ID) ) {
                    alt98=1;
                }


                switch (alt98) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_27);
            	    rule__Type__MembersAssignment_2_3_5();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop98;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getMembersAssignment_2_3_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_3__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Type__Group_2_3__6__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__Group_2_3__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getRightCurlyBracketKeyword_2_3_6()); 
            }
            match(input,KW_RightCurlyBracket,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getRightCurlyBracketKeyword_2_3_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionSuperTypeRef__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_18);
            rule__XFunctionSuperTypeRef__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XFunctionSuperTypeRef__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionSuperTypeRef__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFunctionSuperTypeRefAccess().getGroup_0()); 
            }
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==KW_LeftParenthesis) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XFunctionSuperTypeRef__Group_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXFunctionSuperTypeRefAccess().getGroup_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionSuperTypeRef__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_28);
            rule__XFunctionSuperTypeRef__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XFunctionSuperTypeRef__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionSuperTypeRef__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFunctionSuperTypeRefAccess().getEqualsSignGreaterThanSignKeyword_1()); 
            }
            match(input,KW_EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXFunctionSuperTypeRefAccess().getEqualsSignGreaterThanSignKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionSuperTypeRef__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XFunctionSuperTypeRef__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionSuperTypeRef__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFunctionSuperTypeRefAccess().getReturnTypeAssignment_2()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XFunctionSuperTypeRef__ReturnTypeAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXFunctionSuperTypeRefAccess().getReturnTypeAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionSuperTypeRef__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_29);
            rule__XFunctionSuperTypeRef__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XFunctionSuperTypeRef__Group_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionSuperTypeRef__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFunctionSuperTypeRefAccess().getInstanceContextAssignment_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XFunctionSuperTypeRef__InstanceContextAssignment_0_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXFunctionSuperTypeRefAccess().getInstanceContextAssignment_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionSuperTypeRef__Group_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_29);
            rule__XFunctionSuperTypeRef__Group_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XFunctionSuperTypeRef__Group_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionSuperTypeRef__Group_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFunctionSuperTypeRefAccess().getGroup_0_1()); 
            }
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( ((LA100_0>=KW_Annotation && LA100_0<=KW_LeftParenthesis)||LA100_0==KW_EqualsSignGreaterThanSign||LA100_0==KW_Create||(LA100_0>=KW_AFTER && LA100_0<=KW_SEPARATOR)||LA100_0==RULE_ID) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XFunctionSuperTypeRef__Group_0_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXFunctionSuperTypeRefAccess().getGroup_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionSuperTypeRef__Group_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XFunctionSuperTypeRef__Group_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionSuperTypeRef__Group_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFunctionSuperTypeRefAccess().getRightParenthesisKeyword_0_2()); 
            }
            match(input,KW_RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXFunctionSuperTypeRefAccess().getRightParenthesisKeyword_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionSuperTypeRef__Group_0_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_19);
            rule__XFunctionSuperTypeRef__Group_0_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XFunctionSuperTypeRef__Group_0_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionSuperTypeRef__Group_0_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFunctionSuperTypeRefAccess().getParamTypesAssignment_0_1_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XFunctionSuperTypeRef__ParamTypesAssignment_0_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXFunctionSuperTypeRefAccess().getParamTypesAssignment_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionSuperTypeRef__Group_0_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XFunctionSuperTypeRef__Group_0_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionSuperTypeRef__Group_0_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFunctionSuperTypeRefAccess().getGroup_0_1_1()); 
            }
            loop101:
            do {
                int alt101=2;
                int LA101_0 = input.LA(1);

                if ( (LA101_0==KW_Comma) ) {
                    alt101=1;
                }


                switch (alt101) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_17);
            	    rule__XFunctionSuperTypeRef__Group_0_1_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop101;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getXFunctionSuperTypeRefAccess().getGroup_0_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionSuperTypeRef__Group_0_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_28);
            rule__XFunctionSuperTypeRef__Group_0_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XFunctionSuperTypeRef__Group_0_1_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionSuperTypeRef__Group_0_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFunctionSuperTypeRefAccess().getCommaKeyword_0_1_1_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXFunctionSuperTypeRefAccess().getCommaKeyword_0_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionSuperTypeRef__Group_0_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XFunctionSuperTypeRef__Group_0_1_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionSuperTypeRef__Group_0_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFunctionSuperTypeRefAccess().getParamTypesAssignment_0_1_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XFunctionSuperTypeRef__ParamTypesAssignment_0_1_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXFunctionSuperTypeRefAccess().getParamTypesAssignment_0_1_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_30);
            rule__AnnotationField__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getXtendMemberAction_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getXtendMemberAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_30);
            rule__AnnotationField__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getAnnotationsAssignment_1()); 
            }
            loop102:
            do {
                int alt102=2;
                int LA102_0 = input.LA(1);

                if ( (LA102_0==KW_CommercialAt) ) {
                    alt102=1;
                }


                switch (alt102) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_10);
            	    rule__AnnotationField__AnnotationsAssignment_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop102;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getAnnotationsAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getAlternatives_2()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Alternatives_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getAlternatives_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_31);
            rule__AnnotationField__Group_2_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getAlternatives_2_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Alternatives_2_0_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getAlternatives_2_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_31);
            rule__AnnotationField__Group_2_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getGroup_2_0_1()); 
            }
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==KW_EqualsSign) ) {
                alt103=1;
            }
            switch (alt103) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__AnnotationField__Group_2_0_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getGroup_2_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getSemicolonKeyword_2_0_2()); 
            }
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==KW_Semicolon) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    {
                    match(input,KW_Semicolon,FOLLOW_2); if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getSemicolonKeyword_2_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_0_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_32);
            rule__AnnotationField__Group_2_0_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_0_0_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_0_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getXtendFieldAnnotationInfoAction_2_0_0_0_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getXtendFieldAnnotationInfoAction_2_0_0_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_0_0_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_32);
            rule__AnnotationField__Group_2_0_0_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_0_0_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_0_0_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getModifiersAssignment_2_0_0_0_1()); 
            }
            loop105:
            do {
                int alt105=2;
                int LA105_0 = input.LA(1);

                if ( (LA105_0==KW_Package||(LA105_0>=KW_Public && LA105_0<=KW_Transient)) ) {
                    alt105=1;
                }


                switch (alt105) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_12);
            	    rule__AnnotationField__ModifiersAssignment_2_0_0_0_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop105;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getModifiersAssignment_2_0_0_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_0_0_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_28);
            rule__AnnotationField__Group_2_0_0_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_0_0_0__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_0_0_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getModifiersAssignment_2_0_0_0_2()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__AnnotationField__ModifiersAssignment_2_0_0_0_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getModifiersAssignment_2_0_0_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_0_0_0__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_28);
            rule__AnnotationField__Group_2_0_0_0__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_0_0_0__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_0_0_0__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getModifiersAssignment_2_0_0_0_3()); 
            }
            loop106:
            do {
                int alt106=2;
                int LA106_0 = input.LA(1);

                if ( (LA106_0==KW_Package||(LA106_0>=KW_Public && LA106_0<=KW_Transient)) ) {
                    alt106=1;
                }


                switch (alt106) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_12);
            	    rule__AnnotationField__ModifiersAssignment_2_0_0_0_3();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop106;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getModifiersAssignment_2_0_0_0_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_0_0_0__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_28);
            rule__AnnotationField__Group_2_0_0_0__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_0_0_0__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_0_0_0__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getTypeAssignment_2_0_0_0_4()); 
            }
            int alt107=2;
            alt107 = dfa107.predict(input);
            switch (alt107) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__AnnotationField__TypeAssignment_2_0_0_0_4();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getTypeAssignment_2_0_0_0_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_0_0_0__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_0_0_0__5__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_0_0_0__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getNameAssignment_2_0_0_0_5()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__AnnotationField__NameAssignment_2_0_0_0_5();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getNameAssignment_2_0_0_0_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_0_0_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_28);
            rule__AnnotationField__Group_2_0_0_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_0_0_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_0_0_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getXtendFieldAnnotationInfoAction_2_0_0_1_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getXtendFieldAnnotationInfoAction_2_0_0_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_0_0_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_28);
            rule__AnnotationField__Group_2_0_0_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_0_0_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_0_0_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getModifiersAssignment_2_0_0_1_1()); 
            }
            loop108:
            do {
                int alt108=2;
                int LA108_0 = input.LA(1);

                if ( (LA108_0==KW_Package||(LA108_0>=KW_Public && LA108_0<=KW_Transient)) ) {
                    alt108=1;
                }


                switch (alt108) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_12);
            	    rule__AnnotationField__ModifiersAssignment_2_0_0_1_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop108;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getModifiersAssignment_2_0_0_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_0_0_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__AnnotationField__Group_2_0_0_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_0_0_1__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_0_0_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getTypeAssignment_2_0_0_1_2()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__AnnotationField__TypeAssignment_2_0_0_1_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getTypeAssignment_2_0_0_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_0_0_1__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_0_0_1__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_0_0_1__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getNameAssignment_2_0_0_1_3()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__AnnotationField__NameAssignment_2_0_0_1_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getNameAssignment_2_0_0_1_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_0_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__AnnotationField__Group_2_0_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_0_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_0_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getEqualsSignKeyword_2_0_1_0()); 
            }
            match(input,KW_EqualsSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getEqualsSignKeyword_2_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_0_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_0_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_0_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getInitialValueAssignment_2_0_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__AnnotationField__InitialValueAssignment_2_0_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getInitialValueAssignment_2_0_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_11);
            rule__AnnotationField__Group_2_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getXtendClassAnnotationInfoAction_2_1_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getXtendClassAnnotationInfoAction_2_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_11);
            rule__AnnotationField__Group_2_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getModifiersAssignment_2_1_1()); 
            }
            loop109:
            do {
                int alt109=2;
                int LA109_0 = input.LA(1);

                if ( (LA109_0==KW_Package||(LA109_0>=KW_Public && LA109_0<=KW_Transient)) ) {
                    alt109=1;
                }


                switch (alt109) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_12);
            	    rule__AnnotationField__ModifiersAssignment_2_1_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop109;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getModifiersAssignment_2_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__AnnotationField__Group_2_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_1__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getClassKeyword_2_1_2()); 
            }
            match(input,KW_Class,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getClassKeyword_2_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_13);
            rule__AnnotationField__Group_2_1__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_1__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getNameAssignment_2_1_3()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__AnnotationField__NameAssignment_2_1_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getNameAssignment_2_1_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_13);
            rule__AnnotationField__Group_2_1__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_1__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getGroup_2_1_4()); 
            }
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==KW_LessThanSign) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__AnnotationField__Group_2_1_4__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getGroup_2_1_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_13);
            rule__AnnotationField__Group_2_1__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_1__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getGroup_2_1_5()); 
            }
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==KW_Extends) ) {
                alt111=1;
            }
            switch (alt111) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__AnnotationField__Group_2_1_5__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getGroup_2_1_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_13);
            rule__AnnotationField__Group_2_1__6__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_1__7();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getGroup_2_1_6()); 
            }
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==KW_Implements) ) {
                alt112=1;
            }
            switch (alt112) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__AnnotationField__Group_2_1_6__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getGroup_2_1_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1__7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_14);
            rule__AnnotationField__Group_2_1__7__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_1__8();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1__7__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getLeftCurlyBracketKeyword_2_1_7()); 
            }
            match(input,KW_LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getLeftCurlyBracketKeyword_2_1_7()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1__8() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_14);
            rule__AnnotationField__Group_2_1__8__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_1__9();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1__8__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getMembersAssignment_2_1_8()); 
            }
            loop113:
            do {
                int alt113=2;
                int LA113_0 = input.LA(1);

                if ( (LA113_0==KW_Package||LA113_0==KW_Class||(LA113_0>=KW_Interface && LA113_0<=KW_LeftParenthesis)||LA113_0==KW_EqualsSignGreaterThanSign||LA113_0==KW_Extension||LA113_0==KW_New||(LA113_0>=KW_Public && LA113_0<=KW_Create)||(LA113_0>=KW_AFTER && LA113_0<=KW_SEPARATOR)||LA113_0==KW_CommercialAt||LA113_0==RULE_ID) ) {
                    alt113=1;
                }


                switch (alt113) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_15);
            	    rule__AnnotationField__MembersAssignment_2_1_8();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop113;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getMembersAssignment_2_1_8()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1__9() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_1__9__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1__9__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getRightCurlyBracketKeyword_2_1_9()); 
            }
            match(input,KW_RightCurlyBracket,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getRightCurlyBracketKeyword_2_1_9()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1_4__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__AnnotationField__Group_2_1_4__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_1_4__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1_4__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getLessThanSignKeyword_2_1_4_0()); 
            }
            match(input,KW_LessThanSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getLessThanSignKeyword_2_1_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1_4__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_16);
            rule__AnnotationField__Group_2_1_4__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_1_4__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1_4__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getTypeParametersAssignment_2_1_4_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__AnnotationField__TypeParametersAssignment_2_1_4_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getTypeParametersAssignment_2_1_4_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1_4__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_16);
            rule__AnnotationField__Group_2_1_4__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_1_4__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1_4__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getGroup_2_1_4_2()); 
            }
            loop114:
            do {
                int alt114=2;
                int LA114_0 = input.LA(1);

                if ( (LA114_0==KW_Comma) ) {
                    alt114=1;
                }


                switch (alt114) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_17);
            	    rule__AnnotationField__Group_2_1_4_2__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop114;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getGroup_2_1_4_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1_4__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_1_4__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1_4__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getGreaterThanSignKeyword_2_1_4_3()); 
            }
            match(input,KW_GreaterThanSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getGreaterThanSignKeyword_2_1_4_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1_4_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__AnnotationField__Group_2_1_4_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_1_4_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1_4_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getCommaKeyword_2_1_4_2_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getCommaKeyword_2_1_4_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1_4_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_1_4_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1_4_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getTypeParametersAssignment_2_1_4_2_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__AnnotationField__TypeParametersAssignment_2_1_4_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getTypeParametersAssignment_2_1_4_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1_5__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__AnnotationField__Group_2_1_5__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_1_5__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1_5__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getExtendsKeyword_2_1_5_0()); 
            }
            match(input,KW_Extends,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getExtendsKeyword_2_1_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1_5__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_1_5__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1_5__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getExtendsAssignment_2_1_5_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__AnnotationField__ExtendsAssignment_2_1_5_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getExtendsAssignment_2_1_5_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1_6__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__AnnotationField__Group_2_1_6__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_1_6__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1_6__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getImplementsKeyword_2_1_6_0()); 
            }
            match(input,KW_Implements,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getImplementsKeyword_2_1_6_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1_6__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_19);
            rule__AnnotationField__Group_2_1_6__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_1_6__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1_6__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getImplementsAssignment_2_1_6_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__AnnotationField__ImplementsAssignment_2_1_6_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getImplementsAssignment_2_1_6_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1_6__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_1_6__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1_6__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getGroup_2_1_6_2()); 
            }
            loop115:
            do {
                int alt115=2;
                int LA115_0 = input.LA(1);

                if ( (LA115_0==KW_Comma) ) {
                    alt115=1;
                }


                switch (alt115) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_17);
            	    rule__AnnotationField__Group_2_1_6_2__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop115;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getGroup_2_1_6_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1_6_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__AnnotationField__Group_2_1_6_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_1_6_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1_6_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getCommaKeyword_2_1_6_2_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getCommaKeyword_2_1_6_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1_6_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_1_6_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_1_6_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getImplementsAssignment_2_1_6_2_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__AnnotationField__ImplementsAssignment_2_1_6_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getImplementsAssignment_2_1_6_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_20);
            rule__AnnotationField__Group_2_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getXtendInterfaceAnnotationInfoAction_2_2_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getXtendInterfaceAnnotationInfoAction_2_2_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_20);
            rule__AnnotationField__Group_2_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_2__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getModifiersAssignment_2_2_1()); 
            }
            loop116:
            do {
                int alt116=2;
                int LA116_0 = input.LA(1);

                if ( (LA116_0==KW_Package||(LA116_0>=KW_Public && LA116_0<=KW_Transient)) ) {
                    alt116=1;
                }


                switch (alt116) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_12);
            	    rule__AnnotationField__ModifiersAssignment_2_2_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop116;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getModifiersAssignment_2_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_2__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__AnnotationField__Group_2_2__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_2__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_2__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getInterfaceKeyword_2_2_2()); 
            }
            match(input,KW_Interface,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getInterfaceKeyword_2_2_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_2__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_21);
            rule__AnnotationField__Group_2_2__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_2__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_2__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getNameAssignment_2_2_3()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__AnnotationField__NameAssignment_2_2_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getNameAssignment_2_2_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_2__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_21);
            rule__AnnotationField__Group_2_2__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_2__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_2__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getGroup_2_2_4()); 
            }
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==KW_LessThanSign) ) {
                alt117=1;
            }
            switch (alt117) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__AnnotationField__Group_2_2_4__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getGroup_2_2_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_2__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_21);
            rule__AnnotationField__Group_2_2__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_2__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_2__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getGroup_2_2_5()); 
            }
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==KW_Extends) ) {
                alt118=1;
            }
            switch (alt118) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__AnnotationField__Group_2_2_5__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getGroup_2_2_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_2__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_14);
            rule__AnnotationField__Group_2_2__6__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_2__7();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_2__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getLeftCurlyBracketKeyword_2_2_6()); 
            }
            match(input,KW_LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getLeftCurlyBracketKeyword_2_2_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_2__7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_14);
            rule__AnnotationField__Group_2_2__7__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_2__8();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_2__7__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getMembersAssignment_2_2_7()); 
            }
            loop119:
            do {
                int alt119=2;
                int LA119_0 = input.LA(1);

                if ( (LA119_0==KW_Package||LA119_0==KW_Class||(LA119_0>=KW_Interface && LA119_0<=KW_LeftParenthesis)||LA119_0==KW_EqualsSignGreaterThanSign||LA119_0==KW_Extension||LA119_0==KW_New||(LA119_0>=KW_Public && LA119_0<=KW_Create)||(LA119_0>=KW_AFTER && LA119_0<=KW_SEPARATOR)||LA119_0==KW_CommercialAt||LA119_0==RULE_ID) ) {
                    alt119=1;
                }


                switch (alt119) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_15);
            	    rule__AnnotationField__MembersAssignment_2_2_7();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop119;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getMembersAssignment_2_2_7()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_2__8() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_2__8__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_2__8__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getRightCurlyBracketKeyword_2_2_8()); 
            }
            match(input,KW_RightCurlyBracket,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getRightCurlyBracketKeyword_2_2_8()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_2_4__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__AnnotationField__Group_2_2_4__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_2_4__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_2_4__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getLessThanSignKeyword_2_2_4_0()); 
            }
            match(input,KW_LessThanSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getLessThanSignKeyword_2_2_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_2_4__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_16);
            rule__AnnotationField__Group_2_2_4__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_2_4__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_2_4__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getTypeParametersAssignment_2_2_4_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__AnnotationField__TypeParametersAssignment_2_2_4_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getTypeParametersAssignment_2_2_4_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_2_4__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_16);
            rule__AnnotationField__Group_2_2_4__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_2_4__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_2_4__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getGroup_2_2_4_2()); 
            }
            loop120:
            do {
                int alt120=2;
                int LA120_0 = input.LA(1);

                if ( (LA120_0==KW_Comma) ) {
                    alt120=1;
                }


                switch (alt120) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_17);
            	    rule__AnnotationField__Group_2_2_4_2__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop120;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getGroup_2_2_4_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_2_4__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_2_4__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_2_4__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getGreaterThanSignKeyword_2_2_4_3()); 
            }
            match(input,KW_GreaterThanSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getGreaterThanSignKeyword_2_2_4_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_2_4_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__AnnotationField__Group_2_2_4_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_2_4_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_2_4_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getCommaKeyword_2_2_4_2_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getCommaKeyword_2_2_4_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_2_4_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_2_4_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_2_4_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getTypeParametersAssignment_2_2_4_2_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__AnnotationField__TypeParametersAssignment_2_2_4_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getTypeParametersAssignment_2_2_4_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_2_5__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__AnnotationField__Group_2_2_5__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_2_5__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_2_5__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getExtendsKeyword_2_2_5_0()); 
            }
            match(input,KW_Extends,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getExtendsKeyword_2_2_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_2_5__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_19);
            rule__AnnotationField__Group_2_2_5__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_2_5__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_2_5__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getExtendsAssignment_2_2_5_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__AnnotationField__ExtendsAssignment_2_2_5_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getExtendsAssignment_2_2_5_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_2_5__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_2_5__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_2_5__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getGroup_2_2_5_2()); 
            }
            loop121:
            do {
                int alt121=2;
                int LA121_0 = input.LA(1);

                if ( (LA121_0==KW_Comma) ) {
                    alt121=1;
                }


                switch (alt121) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_17);
            	    rule__AnnotationField__Group_2_2_5_2__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop121;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getGroup_2_2_5_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_2_5_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__AnnotationField__Group_2_2_5_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_2_5_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_2_5_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getCommaKeyword_2_2_5_2_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getCommaKeyword_2_2_5_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_2_5_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_2_5_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_2_5_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getExtendsAssignment_2_2_5_2_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__AnnotationField__ExtendsAssignment_2_2_5_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getExtendsAssignment_2_2_5_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_22);
            rule__AnnotationField__Group_2_3__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_3__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_3__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getXtendEnumAnnotationInfoAction_2_3_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getXtendEnumAnnotationInfoAction_2_3_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_3__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_22);
            rule__AnnotationField__Group_2_3__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_3__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_3__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getModifiersAssignment_2_3_1()); 
            }
            loop122:
            do {
                int alt122=2;
                int LA122_0 = input.LA(1);

                if ( (LA122_0==KW_Package||(LA122_0>=KW_Public && LA122_0<=KW_Transient)) ) {
                    alt122=1;
                }


                switch (alt122) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_12);
            	    rule__AnnotationField__ModifiersAssignment_2_3_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop122;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getModifiersAssignment_2_3_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_3__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__AnnotationField__Group_2_3__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_3__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_3__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getEnumKeyword_2_3_2()); 
            }
            match(input,KW_Enum,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getEnumKeyword_2_3_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_3__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_23);
            rule__AnnotationField__Group_2_3__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_3__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_3__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getNameAssignment_2_3_3()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__AnnotationField__NameAssignment_2_3_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getNameAssignment_2_3_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_3__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_24);
            rule__AnnotationField__Group_2_3__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_3__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_3__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getLeftCurlyBracketKeyword_2_3_4()); 
            }
            match(input,KW_LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getLeftCurlyBracketKeyword_2_3_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_3__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_24);
            rule__AnnotationField__Group_2_3__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_3__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_3__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getGroup_2_3_5()); 
            }
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==KW_Annotation||LA123_0==KW_Create||(LA123_0>=KW_AFTER && LA123_0<=KW_SEPARATOR)||LA123_0==KW_CommercialAt||LA123_0==RULE_ID) ) {
                alt123=1;
            }
            switch (alt123) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__AnnotationField__Group_2_3_5__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getGroup_2_3_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_3__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_24);
            rule__AnnotationField__Group_2_3__6__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_3__7();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_3__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getSemicolonKeyword_2_3_6()); 
            }
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==KW_Semicolon) ) {
                alt124=1;
            }
            switch (alt124) {
                case 1 :
                    {
                    match(input,KW_Semicolon,FOLLOW_2); if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getSemicolonKeyword_2_3_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_3__7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_3__7__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_3__7__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getRightCurlyBracketKeyword_2_3_7()); 
            }
            match(input,KW_RightCurlyBracket,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getRightCurlyBracketKeyword_2_3_7()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_3_5__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_19);
            rule__AnnotationField__Group_2_3_5__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_3_5__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_3_5__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getMembersAssignment_2_3_5_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__AnnotationField__MembersAssignment_2_3_5_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getMembersAssignment_2_3_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_3_5__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_3_5__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_3_5__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getGroup_2_3_5_1()); 
            }
            loop125:
            do {
                int alt125=2;
                int LA125_0 = input.LA(1);

                if ( (LA125_0==KW_Comma) ) {
                    alt125=1;
                }


                switch (alt125) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_17);
            	    rule__AnnotationField__Group_2_3_5_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop125;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getGroup_2_3_5_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_3_5_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_25);
            rule__AnnotationField__Group_2_3_5_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_3_5_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_3_5_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getCommaKeyword_2_3_5_1_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getCommaKeyword_2_3_5_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_3_5_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_3_5_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_3_5_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getMembersAssignment_2_3_5_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__AnnotationField__MembersAssignment_2_3_5_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getMembersAssignment_2_3_5_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_4__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_30);
            rule__AnnotationField__Group_2_4__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_4__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_4__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getXtendAnnotationTypeAnnotationInfoAction_2_4_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getXtendAnnotationTypeAnnotationInfoAction_2_4_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_4__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_30);
            rule__AnnotationField__Group_2_4__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_4__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_4__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getModifiersAssignment_2_4_1()); 
            }
            loop126:
            do {
                int alt126=2;
                int LA126_0 = input.LA(1);

                if ( (LA126_0==KW_Package||(LA126_0>=KW_Public && LA126_0<=KW_Transient)) ) {
                    alt126=1;
                }


                switch (alt126) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_12);
            	    rule__AnnotationField__ModifiersAssignment_2_4_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop126;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getModifiersAssignment_2_4_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_4__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__AnnotationField__Group_2_4__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_4__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_4__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getAnnotationKeyword_2_4_2()); 
            }
            match(input,KW_Annotation,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getAnnotationKeyword_2_4_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_4__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_23);
            rule__AnnotationField__Group_2_4__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_4__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_4__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getNameAssignment_2_4_3()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__AnnotationField__NameAssignment_2_4_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getNameAssignment_2_4_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_4__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_26);
            rule__AnnotationField__Group_2_4__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_4__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_4__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getLeftCurlyBracketKeyword_2_4_4()); 
            }
            match(input,KW_LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getLeftCurlyBracketKeyword_2_4_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_4__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_26);
            rule__AnnotationField__Group_2_4__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_4__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_4__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getMembersAssignment_2_4_5()); 
            }
            loop127:
            do {
                int alt127=2;
                int LA127_0 = input.LA(1);

                if ( (LA127_0==KW_Package||LA127_0==KW_Class||(LA127_0>=KW_Interface && LA127_0<=KW_LeftParenthesis)||LA127_0==KW_EqualsSignGreaterThanSign||(LA127_0>=KW_Public && LA127_0<=KW_Var)||LA127_0==KW_Create||(LA127_0>=KW_AFTER && LA127_0<=KW_SEPARATOR)||LA127_0==KW_CommercialAt||LA127_0==RULE_ID) ) {
                    alt127=1;
                }


                switch (alt127) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_27);
            	    rule__AnnotationField__MembersAssignment_2_4_5();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop127;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getMembersAssignment_2_4_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_4__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__AnnotationField__Group_2_4__6__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__Group_2_4__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getRightCurlyBracketKeyword_2_4_6()); 
            }
            match(input,KW_RightCurlyBracket,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getRightCurlyBracketKeyword_2_4_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_34);
            rule__Member__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getXtendMemberAction_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getXtendMemberAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_34);
            rule__Member__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getAnnotationsAssignment_1()); 
            }
            loop128:
            do {
                int alt128=2;
                int LA128_0 = input.LA(1);

                if ( (LA128_0==KW_CommercialAt) ) {
                    alt128=1;
                }


                switch (alt128) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_10);
            	    rule__Member__AnnotationsAssignment_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop128;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getAnnotationsAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getAlternatives_2()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__Alternatives_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getAlternatives_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_28);
            rule__Member__Group_2_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getXtendFieldAnnotationInfoAction_2_0_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getXtendFieldAnnotationInfoAction_2_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_28);
            rule__Member__Group_2_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getModifiersAssignment_2_0_1()); 
            }
            loop129:
            do {
                int alt129=2;
                int LA129_0 = input.LA(1);

                if ( (LA129_0==KW_Package||(LA129_0>=KW_Public && LA129_0<=KW_Transient)) ) {
                    alt129=1;
                }


                switch (alt129) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_12);
            	    rule__Member__ModifiersAssignment_2_0_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop129;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getModifiersAssignment_2_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_31);
            rule__Member__Group_2_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_0__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getAlternatives_2_0_2()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__Alternatives_2_0_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getAlternatives_2_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_31);
            rule__Member__Group_2_0__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_0__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getGroup_2_0_3()); 
            }
            int alt130=2;
            int LA130_0 = input.LA(1);

            if ( (LA130_0==KW_EqualsSign) ) {
                alt130=1;
            }
            switch (alt130) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__Member__Group_2_0_3__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getGroup_2_0_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_0__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getSemicolonKeyword_2_0_4()); 
            }
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==KW_Semicolon) ) {
                alt131=1;
            }
            switch (alt131) {
                case 1 :
                    {
                    match(input,KW_Semicolon,FOLLOW_2); if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getSemicolonKeyword_2_0_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0_2_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_28);
            rule__Member__Group_2_0_2_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_0_2_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0_2_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getModifiersAssignment_2_0_2_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__ModifiersAssignment_2_0_2_0_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getModifiersAssignment_2_0_2_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0_2_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_28);
            rule__Member__Group_2_0_2_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_0_2_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0_2_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getModifiersAssignment_2_0_2_0_1()); 
            }
            loop132:
            do {
                int alt132=2;
                int LA132_0 = input.LA(1);

                if ( (LA132_0==KW_Package||(LA132_0>=KW_Public && LA132_0<=KW_Transient)) ) {
                    alt132=1;
                }


                switch (alt132) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_12);
            	    rule__Member__ModifiersAssignment_2_0_2_0_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop132;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getModifiersAssignment_2_0_2_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0_2_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_28);
            rule__Member__Group_2_0_2_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_0_2_0__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0_2_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getTypeAssignment_2_0_2_0_2()); 
            }
            int alt133=2;
            alt133 = dfa133.predict(input);
            switch (alt133) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__Member__TypeAssignment_2_0_2_0_2();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getTypeAssignment_2_0_2_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0_2_0__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_0_2_0__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0_2_0__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getNameAssignment_2_0_2_0_3()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__NameAssignment_2_0_2_0_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getNameAssignment_2_0_2_0_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0_2_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_28);
            rule__Member__Group_2_0_2_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_0_2_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0_2_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getModifiersAssignment_2_0_2_1_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__ModifiersAssignment_2_0_2_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getModifiersAssignment_2_0_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0_2_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_28);
            rule__Member__Group_2_0_2_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_0_2_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0_2_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getAlternatives_2_0_2_1_1()); 
            }
            loop134:
            do {
                int alt134=2;
                int LA134_0 = input.LA(1);

                if ( (LA134_0==KW_Package||(LA134_0>=KW_Public && LA134_0<=KW_Var)) ) {
                    alt134=1;
                }


                switch (alt134) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_35);
            	    rule__Member__Alternatives_2_0_2_1_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop134;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getAlternatives_2_0_2_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0_2_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__Member__Group_2_0_2_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_0_2_1__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0_2_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getTypeAssignment_2_0_2_1_2()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__TypeAssignment_2_0_2_1_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getTypeAssignment_2_0_2_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0_2_1__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_0_2_1__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0_2_1__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getNameAssignment_2_0_2_1_3()); 
            }
            int alt135=2;
            alt135 = dfa135.predict(input);
            switch (alt135) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__Member__NameAssignment_2_0_2_1_3();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getNameAssignment_2_0_2_1_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0_2_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_36);
            rule__Member__Group_2_0_2_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_0_2_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0_2_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getModifiersAssignment_2_0_2_2_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__ModifiersAssignment_2_0_2_2_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getModifiersAssignment_2_0_2_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0_2_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_36);
            rule__Member__Group_2_0_2_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_0_2_2__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0_2_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getModifiersAssignment_2_0_2_2_1()); 
            }
            loop136:
            do {
                int alt136=2;
                int LA136_0 = input.LA(1);

                if ( (LA136_0==KW_Package||(LA136_0>=KW_Public && LA136_0<=KW_Transient)) ) {
                    alt136=1;
                }


                switch (alt136) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_12);
            	    rule__Member__ModifiersAssignment_2_0_2_2_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop136;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getModifiersAssignment_2_0_2_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0_2_2__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_28);
            rule__Member__Group_2_0_2_2__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_0_2_2__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0_2_2__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getModifiersAssignment_2_0_2_2_2()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__ModifiersAssignment_2_0_2_2_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getModifiersAssignment_2_0_2_2_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0_2_2__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_28);
            rule__Member__Group_2_0_2_2__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_0_2_2__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0_2_2__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getModifiersAssignment_2_0_2_2_3()); 
            }
            loop137:
            do {
                int alt137=2;
                int LA137_0 = input.LA(1);

                if ( (LA137_0==KW_Package||(LA137_0>=KW_Public && LA137_0<=KW_Transient)) ) {
                    alt137=1;
                }


                switch (alt137) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_12);
            	    rule__Member__ModifiersAssignment_2_0_2_2_3();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop137;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getModifiersAssignment_2_0_2_2_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0_2_2__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__Member__Group_2_0_2_2__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_0_2_2__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0_2_2__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getTypeAssignment_2_0_2_2_4()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__TypeAssignment_2_0_2_2_4();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getTypeAssignment_2_0_2_2_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0_2_2__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_0_2_2__5__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0_2_2__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getNameAssignment_2_0_2_2_5()); 
            }
            int alt138=2;
            alt138 = dfa138.predict(input);
            switch (alt138) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__Member__NameAssignment_2_0_2_2_5();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getNameAssignment_2_0_2_2_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0_2_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__Member__Group_2_0_2_3__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_0_2_3__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0_2_3__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getTypeAssignment_2_0_2_3_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__TypeAssignment_2_0_2_3_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getTypeAssignment_2_0_2_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0_2_3__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_0_2_3__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0_2_3__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getNameAssignment_2_0_2_3_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__NameAssignment_2_0_2_3_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getNameAssignment_2_0_2_3_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__Member__Group_2_0_3__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_0_3__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0_3__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getEqualsSignKeyword_2_0_3_0()); 
            }
            match(input,KW_EqualsSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getEqualsSignKeyword_2_0_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0_3__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_0_3__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_0_3__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getInitialValueAssignment_2_0_3_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__InitialValueAssignment_2_0_3_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getInitialValueAssignment_2_0_3_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_37);
            rule__Member__Group_2_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getXtendFunctionAnnotationInfoAction_2_1_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getXtendFunctionAnnotationInfoAction_2_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_37);
            rule__Member__Group_2_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getModifiersAssignment_2_1_1()); 
            }
            loop139:
            do {
                int alt139=2;
                int LA139_0 = input.LA(1);

                if ( (LA139_0==KW_Package||(LA139_0>=KW_Public && LA139_0<=KW_Transient)) ) {
                    alt139=1;
                }


                switch (alt139) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_12);
            	    rule__Member__ModifiersAssignment_2_1_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop139;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getModifiersAssignment_2_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_38);
            rule__Member__Group_2_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getModifiersAssignment_2_1_2()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__ModifiersAssignment_2_1_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getModifiersAssignment_2_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_38);
            rule__Member__Group_2_1__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getAlternatives_2_1_3()); 
            }
            loop140:
            do {
                int alt140=2;
                int LA140_0 = input.LA(1);

                if ( (LA140_0==KW_Package||(LA140_0>=KW_Public && LA140_0<=KW_Transient)||(LA140_0>=KW_Def && LA140_0<=KW_Override)) ) {
                    alt140=1;
                }


                switch (alt140) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_39);
            	    rule__Member__Alternatives_2_1_3();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop140;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getAlternatives_2_1_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_38);
            rule__Member__Group_2_1__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getGroup_2_1_4()); 
            }
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==KW_LessThanSign) ) {
                int LA141_1 = input.LA(2);

                if ( (LA141_1==KW_Annotation||LA141_1==KW_Create||(LA141_1>=KW_AFTER && LA141_1<=KW_SEPARATOR)||LA141_1==RULE_ID) ) {
                    alt141=1;
                }
            }
            switch (alt141) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__Member__Group_2_1_4__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getGroup_2_1_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_40);
            rule__Member__Group_2_1__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getAlternatives_2_1_5()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__Alternatives_2_1_5();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getAlternatives_2_1_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_40);
            rule__Member__Group_2_1__6__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1__7();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getGroup_2_1_6()); 
            }
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( ((LA142_0>=KW_Annotation && LA142_0<=KW_LeftParenthesis)||LA142_0==KW_EqualsSignGreaterThanSign||LA142_0==KW_Extension||LA142_0==KW_Create||(LA142_0>=KW_AFTER && LA142_0<=KW_SEPARATOR)||LA142_0==KW_CommercialAt||LA142_0==RULE_ID) ) {
                alt142=1;
            }
            switch (alt142) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__Member__Group_2_1_6__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getGroup_2_1_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1__7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_41);
            rule__Member__Group_2_1__7__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1__8();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1__7__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getRightParenthesisKeyword_2_1_7()); 
            }
            match(input,KW_RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getRightParenthesisKeyword_2_1_7()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1__8() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_41);
            rule__Member__Group_2_1__8__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1__9();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1__8__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getGroup_2_1_8()); 
            }
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==KW_Throws) ) {
                alt143=1;
            }
            switch (alt143) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__Member__Group_2_1_8__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getGroup_2_1_8()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1__9() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1__9__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1__9__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getAlternatives_2_1_9()); 
            }
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==KW_Semicolon||LA144_0==KW_LeftCurlyBracket||(LA144_0>=RULE_RICH_TEXT && LA144_0<=RULE_RICH_TEXT_START)) ) {
                alt144=1;
            }
            switch (alt144) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__Member__Alternatives_2_1_9();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getAlternatives_2_1_9()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_4__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__Member__Group_2_1_4__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1_4__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_4__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getLessThanSignKeyword_2_1_4_0()); 
            }
            match(input,KW_LessThanSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getLessThanSignKeyword_2_1_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_4__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_16);
            rule__Member__Group_2_1_4__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1_4__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_4__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getTypeParametersAssignment_2_1_4_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__TypeParametersAssignment_2_1_4_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getTypeParametersAssignment_2_1_4_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_4__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_16);
            rule__Member__Group_2_1_4__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1_4__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_4__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getGroup_2_1_4_2()); 
            }
            loop145:
            do {
                int alt145=2;
                int LA145_0 = input.LA(1);

                if ( (LA145_0==KW_Comma) ) {
                    alt145=1;
                }


                switch (alt145) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_17);
            	    rule__Member__Group_2_1_4_2__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop145;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getGroup_2_1_4_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_4__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1_4__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_4__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getGreaterThanSignKeyword_2_1_4_3()); 
            }
            match(input,KW_GreaterThanSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getGreaterThanSignKeyword_2_1_4_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_4_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__Member__Group_2_1_4_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1_4_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_4_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getCommaKeyword_2_1_4_2_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getCommaKeyword_2_1_4_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_4_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1_4_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_4_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getTypeParametersAssignment_2_1_4_2_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__TypeParametersAssignment_2_1_4_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getTypeParametersAssignment_2_1_4_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_5_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1_5_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_5_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getGroup_2_1_5_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1_5_0_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getGroup_2_1_5_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_5_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_42);
            rule__Member__Group_2_1_5_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1_5_0_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_5_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getReturnTypeAssignment_2_1_5_0_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__ReturnTypeAssignment_2_1_5_0_0_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getReturnTypeAssignment_2_1_5_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_5_0_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__Member__Group_2_1_5_0_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1_5_0_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_5_0_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getCreateExtensionInfoAssignment_2_1_5_0_0_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__CreateExtensionInfoAssignment_2_1_5_0_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getCreateExtensionInfoAssignment_2_1_5_0_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_5_0_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_43);
            rule__Member__Group_2_1_5_0_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1_5_0_0__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_5_0_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getNameAssignment_2_1_5_0_0_2()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__NameAssignment_2_1_5_0_0_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getNameAssignment_2_1_5_0_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_5_0_0__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1_5_0_0__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_5_0_0__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getLeftParenthesisKeyword_2_1_5_0_0_3()); 
            }
            match(input,KW_LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getLeftParenthesisKeyword_2_1_5_0_0_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_5_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1_5_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_5_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getGroup_2_1_5_1_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1_5_1_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getGroup_2_1_5_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_5_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_38);
            rule__Member__Group_2_1_5_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1_5_1_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_5_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getReturnTypeAssignment_2_1_5_1_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__ReturnTypeAssignment_2_1_5_1_0_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getReturnTypeAssignment_2_1_5_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_5_1_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_43);
            rule__Member__Group_2_1_5_1_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1_5_1_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_5_1_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getNameAssignment_2_1_5_1_0_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__NameAssignment_2_1_5_1_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getNameAssignment_2_1_5_1_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_5_1_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1_5_1_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_5_1_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getLeftParenthesisKeyword_2_1_5_1_0_2()); 
            }
            match(input,KW_LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getLeftParenthesisKeyword_2_1_5_1_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_5_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1_5_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_5_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getGroup_2_1_5_2_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1_5_2_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getGroup_2_1_5_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_5_2_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_38);
            rule__Member__Group_2_1_5_2_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1_5_2_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_5_2_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getReturnTypeAssignment_2_1_5_2_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__ReturnTypeAssignment_2_1_5_2_0_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getReturnTypeAssignment_2_1_5_2_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_5_2_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_43);
            rule__Member__Group_2_1_5_2_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1_5_2_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_5_2_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getNameAssignment_2_1_5_2_0_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__NameAssignment_2_1_5_2_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getNameAssignment_2_1_5_2_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_5_2_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1_5_2_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_5_2_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getLeftParenthesisKeyword_2_1_5_2_0_2()); 
            }
            match(input,KW_LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getLeftParenthesisKeyword_2_1_5_2_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_5_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1_5_3__0__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_5_3__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getGroup_2_1_5_3_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1_5_3_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getGroup_2_1_5_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_5_3_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__Member__Group_2_1_5_3_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1_5_3_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_5_3_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getCreateExtensionInfoAssignment_2_1_5_3_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__CreateExtensionInfoAssignment_2_1_5_3_0_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getCreateExtensionInfoAssignment_2_1_5_3_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_5_3_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_43);
            rule__Member__Group_2_1_5_3_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1_5_3_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_5_3_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getNameAssignment_2_1_5_3_0_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__NameAssignment_2_1_5_3_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getNameAssignment_2_1_5_3_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_5_3_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1_5_3_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_5_3_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getLeftParenthesisKeyword_2_1_5_3_0_2()); 
            }
            match(input,KW_LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getLeftParenthesisKeyword_2_1_5_3_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_5_4__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_43);
            rule__Member__Group_2_1_5_4__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1_5_4__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_5_4__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getNameAssignment_2_1_5_4_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__NameAssignment_2_1_5_4_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getNameAssignment_2_1_5_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_5_4__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1_5_4__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_5_4__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getLeftParenthesisKeyword_2_1_5_4_1()); 
            }
            match(input,KW_LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getLeftParenthesisKeyword_2_1_5_4_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_6__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_19);
            rule__Member__Group_2_1_6__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1_6__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_6__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getParametersAssignment_2_1_6_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__ParametersAssignment_2_1_6_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getParametersAssignment_2_1_6_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_6__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1_6__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_6__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getGroup_2_1_6_1()); 
            }
            loop146:
            do {
                int alt146=2;
                int LA146_0 = input.LA(1);

                if ( (LA146_0==KW_Comma) ) {
                    alt146=1;
                }


                switch (alt146) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_17);
            	    rule__Member__Group_2_1_6_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop146;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getGroup_2_1_6_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_6_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_44);
            rule__Member__Group_2_1_6_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1_6_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_6_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getCommaKeyword_2_1_6_1_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getCommaKeyword_2_1_6_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_6_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1_6_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_6_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getParametersAssignment_2_1_6_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__ParametersAssignment_2_1_6_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getParametersAssignment_2_1_6_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_8__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_28);
            rule__Member__Group_2_1_8__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1_8__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_8__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getThrowsKeyword_2_1_8_0()); 
            }
            match(input,KW_Throws,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getThrowsKeyword_2_1_8_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_8__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_19);
            rule__Member__Group_2_1_8__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1_8__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_8__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getExceptionsAssignment_2_1_8_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__ExceptionsAssignment_2_1_8_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getExceptionsAssignment_2_1_8_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_8__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1_8__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_8__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getGroup_2_1_8_2()); 
            }
            loop147:
            do {
                int alt147=2;
                int LA147_0 = input.LA(1);

                if ( (LA147_0==KW_Comma) ) {
                    alt147=1;
                }


                switch (alt147) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_17);
            	    rule__Member__Group_2_1_8_2__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop147;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getGroup_2_1_8_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_8_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_28);
            rule__Member__Group_2_1_8_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1_8_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_8_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getCommaKeyword_2_1_8_2_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getCommaKeyword_2_1_8_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_8_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_1_8_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_1_8_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getExceptionsAssignment_2_1_8_2_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__ExceptionsAssignment_2_1_8_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getExceptionsAssignment_2_1_8_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_45);
            rule__Member__Group_2_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getXtendConstructorAnnotationInfoAction_2_2_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getXtendConstructorAnnotationInfoAction_2_2_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_45);
            rule__Member__Group_2_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_2__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getModifiersAssignment_2_2_1()); 
            }
            loop148:
            do {
                int alt148=2;
                int LA148_0 = input.LA(1);

                if ( (LA148_0==KW_Package||(LA148_0>=KW_Public && LA148_0<=KW_Transient)) ) {
                    alt148=1;
                }


                switch (alt148) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_12);
            	    rule__Member__ModifiersAssignment_2_2_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop148;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getModifiersAssignment_2_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_46);
            rule__Member__Group_2_2__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_2__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getNewKeyword_2_2_2()); 
            }
            match(input,KW_New,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getNewKeyword_2_2_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_46);
            rule__Member__Group_2_2__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_2__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getGroup_2_2_3()); 
            }
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==KW_LessThanSign) ) {
                alt149=1;
            }
            switch (alt149) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__Member__Group_2_2_3__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getGroup_2_2_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_40);
            rule__Member__Group_2_2__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_2__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getLeftParenthesisKeyword_2_2_4()); 
            }
            match(input,KW_LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getLeftParenthesisKeyword_2_2_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_40);
            rule__Member__Group_2_2__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_2__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getGroup_2_2_5()); 
            }
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( ((LA150_0>=KW_Annotation && LA150_0<=KW_LeftParenthesis)||LA150_0==KW_EqualsSignGreaterThanSign||LA150_0==KW_Extension||LA150_0==KW_Create||(LA150_0>=KW_AFTER && LA150_0<=KW_SEPARATOR)||LA150_0==KW_CommercialAt||LA150_0==RULE_ID) ) {
                alt150=1;
            }
            switch (alt150) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__Member__Group_2_2_5__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getGroup_2_2_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_47);
            rule__Member__Group_2_2__6__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_2__7();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getRightParenthesisKeyword_2_2_6()); 
            }
            match(input,KW_RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getRightParenthesisKeyword_2_2_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2__7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_47);
            rule__Member__Group_2_2__7__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_2__8();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2__7__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getGroup_2_2_7()); 
            }
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==KW_Throws) ) {
                alt151=1;
            }
            switch (alt151) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__Member__Group_2_2_7__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getGroup_2_2_7()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2__8() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_2__8__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2__8__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getExpressionAssignment_2_2_8()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__ExpressionAssignment_2_2_8();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getExpressionAssignment_2_2_8()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__Member__Group_2_2_3__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_2_3__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2_3__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getLessThanSignKeyword_2_2_3_0()); 
            }
            match(input,KW_LessThanSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getLessThanSignKeyword_2_2_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2_3__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_16);
            rule__Member__Group_2_2_3__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_2_3__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2_3__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getTypeParametersAssignment_2_2_3_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__TypeParametersAssignment_2_2_3_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getTypeParametersAssignment_2_2_3_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2_3__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_16);
            rule__Member__Group_2_2_3__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_2_3__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2_3__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getGroup_2_2_3_2()); 
            }
            loop152:
            do {
                int alt152=2;
                int LA152_0 = input.LA(1);

                if ( (LA152_0==KW_Comma) ) {
                    alt152=1;
                }


                switch (alt152) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_17);
            	    rule__Member__Group_2_2_3_2__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop152;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getGroup_2_2_3_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2_3__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_2_3__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2_3__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getGreaterThanSignKeyword_2_2_3_3()); 
            }
            match(input,KW_GreaterThanSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getGreaterThanSignKeyword_2_2_3_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2_3_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__Member__Group_2_2_3_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_2_3_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2_3_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getCommaKeyword_2_2_3_2_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getCommaKeyword_2_2_3_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2_3_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_2_3_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2_3_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getTypeParametersAssignment_2_2_3_2_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__TypeParametersAssignment_2_2_3_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getTypeParametersAssignment_2_2_3_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2_5__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_19);
            rule__Member__Group_2_2_5__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_2_5__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2_5__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getParametersAssignment_2_2_5_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__ParametersAssignment_2_2_5_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getParametersAssignment_2_2_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2_5__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_2_5__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2_5__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getGroup_2_2_5_1()); 
            }
            loop153:
            do {
                int alt153=2;
                int LA153_0 = input.LA(1);

                if ( (LA153_0==KW_Comma) ) {
                    alt153=1;
                }


                switch (alt153) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_17);
            	    rule__Member__Group_2_2_5_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop153;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getGroup_2_2_5_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2_5_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_44);
            rule__Member__Group_2_2_5_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_2_5_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2_5_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getCommaKeyword_2_2_5_1_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getCommaKeyword_2_2_5_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2_5_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_2_5_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2_5_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getParametersAssignment_2_2_5_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__ParametersAssignment_2_2_5_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getParametersAssignment_2_2_5_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2_7__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_28);
            rule__Member__Group_2_2_7__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_2_7__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2_7__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getThrowsKeyword_2_2_7_0()); 
            }
            match(input,KW_Throws,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getThrowsKeyword_2_2_7_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2_7__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_19);
            rule__Member__Group_2_2_7__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_2_7__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2_7__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getExceptionsAssignment_2_2_7_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__ExceptionsAssignment_2_2_7_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getExceptionsAssignment_2_2_7_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2_7__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_2_7__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2_7__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getGroup_2_2_7_2()); 
            }
            loop154:
            do {
                int alt154=2;
                int LA154_0 = input.LA(1);

                if ( (LA154_0==KW_Comma) ) {
                    alt154=1;
                }


                switch (alt154) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_17);
            	    rule__Member__Group_2_2_7_2__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop154;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getGroup_2_2_7_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2_7_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_28);
            rule__Member__Group_2_2_7_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_2_7_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2_7_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getCommaKeyword_2_2_7_2_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getCommaKeyword_2_2_7_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2_7_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_2_7_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_2_7_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getExceptionsAssignment_2_2_7_2_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__ExceptionsAssignment_2_2_7_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getExceptionsAssignment_2_2_7_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_11);
            rule__Member__Group_2_3__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_3__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getXtendClassAnnotationInfoAction_2_3_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getXtendClassAnnotationInfoAction_2_3_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_11);
            rule__Member__Group_2_3__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_3__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getModifiersAssignment_2_3_1()); 
            }
            loop155:
            do {
                int alt155=2;
                int LA155_0 = input.LA(1);

                if ( (LA155_0==KW_Package||(LA155_0>=KW_Public && LA155_0<=KW_Transient)) ) {
                    alt155=1;
                }


                switch (alt155) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_12);
            	    rule__Member__ModifiersAssignment_2_3_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop155;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getModifiersAssignment_2_3_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__Member__Group_2_3__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_3__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getClassKeyword_2_3_2()); 
            }
            match(input,KW_Class,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getClassKeyword_2_3_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_13);
            rule__Member__Group_2_3__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_3__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getNameAssignment_2_3_3()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__NameAssignment_2_3_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getNameAssignment_2_3_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_13);
            rule__Member__Group_2_3__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_3__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getGroup_2_3_4()); 
            }
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==KW_LessThanSign) ) {
                alt156=1;
            }
            switch (alt156) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__Member__Group_2_3_4__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getGroup_2_3_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_13);
            rule__Member__Group_2_3__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_3__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getGroup_2_3_5()); 
            }
            int alt157=2;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==KW_Extends) ) {
                alt157=1;
            }
            switch (alt157) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__Member__Group_2_3_5__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getGroup_2_3_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_13);
            rule__Member__Group_2_3__6__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_3__7();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getGroup_2_3_6()); 
            }
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==KW_Implements) ) {
                alt158=1;
            }
            switch (alt158) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__Member__Group_2_3_6__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getGroup_2_3_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3__7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_14);
            rule__Member__Group_2_3__7__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_3__8();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3__7__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getLeftCurlyBracketKeyword_2_3_7()); 
            }
            match(input,KW_LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getLeftCurlyBracketKeyword_2_3_7()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3__8() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_14);
            rule__Member__Group_2_3__8__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_3__9();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3__8__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getMembersAssignment_2_3_8()); 
            }
            loop159:
            do {
                int alt159=2;
                int LA159_0 = input.LA(1);

                if ( (LA159_0==KW_Package||LA159_0==KW_Class||(LA159_0>=KW_Interface && LA159_0<=KW_LeftParenthesis)||LA159_0==KW_EqualsSignGreaterThanSign||LA159_0==KW_Extension||LA159_0==KW_New||(LA159_0>=KW_Public && LA159_0<=KW_Create)||(LA159_0>=KW_AFTER && LA159_0<=KW_SEPARATOR)||LA159_0==KW_CommercialAt||LA159_0==RULE_ID) ) {
                    alt159=1;
                }


                switch (alt159) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_15);
            	    rule__Member__MembersAssignment_2_3_8();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop159;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getMembersAssignment_2_3_8()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3__9() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_3__9__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3__9__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getRightCurlyBracketKeyword_2_3_9()); 
            }
            match(input,KW_RightCurlyBracket,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getRightCurlyBracketKeyword_2_3_9()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3_4__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__Member__Group_2_3_4__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_3_4__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3_4__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getLessThanSignKeyword_2_3_4_0()); 
            }
            match(input,KW_LessThanSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getLessThanSignKeyword_2_3_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3_4__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_16);
            rule__Member__Group_2_3_4__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_3_4__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3_4__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getTypeParametersAssignment_2_3_4_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__TypeParametersAssignment_2_3_4_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getTypeParametersAssignment_2_3_4_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3_4__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_16);
            rule__Member__Group_2_3_4__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_3_4__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3_4__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getGroup_2_3_4_2()); 
            }
            loop160:
            do {
                int alt160=2;
                int LA160_0 = input.LA(1);

                if ( (LA160_0==KW_Comma) ) {
                    alt160=1;
                }


                switch (alt160) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_17);
            	    rule__Member__Group_2_3_4_2__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop160;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getGroup_2_3_4_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3_4__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_3_4__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3_4__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getGreaterThanSignKeyword_2_3_4_3()); 
            }
            match(input,KW_GreaterThanSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getGreaterThanSignKeyword_2_3_4_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3_4_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__Member__Group_2_3_4_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_3_4_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3_4_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getCommaKeyword_2_3_4_2_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getCommaKeyword_2_3_4_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3_4_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_3_4_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3_4_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getTypeParametersAssignment_2_3_4_2_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__TypeParametersAssignment_2_3_4_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getTypeParametersAssignment_2_3_4_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3_5__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__Member__Group_2_3_5__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_3_5__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3_5__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getExtendsKeyword_2_3_5_0()); 
            }
            match(input,KW_Extends,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getExtendsKeyword_2_3_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3_5__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_3_5__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3_5__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getExtendsAssignment_2_3_5_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__ExtendsAssignment_2_3_5_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getExtendsAssignment_2_3_5_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3_6__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__Member__Group_2_3_6__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_3_6__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3_6__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getImplementsKeyword_2_3_6_0()); 
            }
            match(input,KW_Implements,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getImplementsKeyword_2_3_6_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3_6__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_19);
            rule__Member__Group_2_3_6__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_3_6__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3_6__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getImplementsAssignment_2_3_6_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__ImplementsAssignment_2_3_6_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getImplementsAssignment_2_3_6_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3_6__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_3_6__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3_6__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getGroup_2_3_6_2()); 
            }
            loop161:
            do {
                int alt161=2;
                int LA161_0 = input.LA(1);

                if ( (LA161_0==KW_Comma) ) {
                    alt161=1;
                }


                switch (alt161) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_17);
            	    rule__Member__Group_2_3_6_2__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop161;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getGroup_2_3_6_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3_6_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__Member__Group_2_3_6_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_3_6_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3_6_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getCommaKeyword_2_3_6_2_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getCommaKeyword_2_3_6_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3_6_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_3_6_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_3_6_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getImplementsAssignment_2_3_6_2_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__ImplementsAssignment_2_3_6_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getImplementsAssignment_2_3_6_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_4__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_20);
            rule__Member__Group_2_4__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_4__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_4__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getXtendInterfaceAnnotationInfoAction_2_4_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getXtendInterfaceAnnotationInfoAction_2_4_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_4__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_20);
            rule__Member__Group_2_4__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_4__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_4__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getModifiersAssignment_2_4_1()); 
            }
            loop162:
            do {
                int alt162=2;
                int LA162_0 = input.LA(1);

                if ( (LA162_0==KW_Package||(LA162_0>=KW_Public && LA162_0<=KW_Transient)) ) {
                    alt162=1;
                }


                switch (alt162) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_12);
            	    rule__Member__ModifiersAssignment_2_4_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop162;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getModifiersAssignment_2_4_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_4__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__Member__Group_2_4__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_4__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_4__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getInterfaceKeyword_2_4_2()); 
            }
            match(input,KW_Interface,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getInterfaceKeyword_2_4_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_4__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_21);
            rule__Member__Group_2_4__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_4__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_4__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getNameAssignment_2_4_3()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__NameAssignment_2_4_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getNameAssignment_2_4_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_4__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_21);
            rule__Member__Group_2_4__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_4__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_4__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getGroup_2_4_4()); 
            }
            int alt163=2;
            int LA163_0 = input.LA(1);

            if ( (LA163_0==KW_LessThanSign) ) {
                alt163=1;
            }
            switch (alt163) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__Member__Group_2_4_4__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getGroup_2_4_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_4__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_21);
            rule__Member__Group_2_4__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_4__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_4__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getGroup_2_4_5()); 
            }
            int alt164=2;
            int LA164_0 = input.LA(1);

            if ( (LA164_0==KW_Extends) ) {
                alt164=1;
            }
            switch (alt164) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__Member__Group_2_4_5__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getGroup_2_4_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_4__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_14);
            rule__Member__Group_2_4__6__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_4__7();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_4__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getLeftCurlyBracketKeyword_2_4_6()); 
            }
            match(input,KW_LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getLeftCurlyBracketKeyword_2_4_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_4__7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_14);
            rule__Member__Group_2_4__7__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_4__8();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_4__7__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getMembersAssignment_2_4_7()); 
            }
            loop165:
            do {
                int alt165=2;
                int LA165_0 = input.LA(1);

                if ( (LA165_0==KW_Package||LA165_0==KW_Class||(LA165_0>=KW_Interface && LA165_0<=KW_LeftParenthesis)||LA165_0==KW_EqualsSignGreaterThanSign||LA165_0==KW_Extension||LA165_0==KW_New||(LA165_0>=KW_Public && LA165_0<=KW_Create)||(LA165_0>=KW_AFTER && LA165_0<=KW_SEPARATOR)||LA165_0==KW_CommercialAt||LA165_0==RULE_ID) ) {
                    alt165=1;
                }


                switch (alt165) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_15);
            	    rule__Member__MembersAssignment_2_4_7();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop165;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getMembersAssignment_2_4_7()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_4__8() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_4__8__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_4__8__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getRightCurlyBracketKeyword_2_4_8()); 
            }
            match(input,KW_RightCurlyBracket,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getRightCurlyBracketKeyword_2_4_8()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_4_4__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__Member__Group_2_4_4__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_4_4__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_4_4__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getLessThanSignKeyword_2_4_4_0()); 
            }
            match(input,KW_LessThanSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getLessThanSignKeyword_2_4_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_4_4__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_16);
            rule__Member__Group_2_4_4__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_4_4__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_4_4__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getTypeParametersAssignment_2_4_4_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__TypeParametersAssignment_2_4_4_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getTypeParametersAssignment_2_4_4_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_4_4__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_16);
            rule__Member__Group_2_4_4__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_4_4__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_4_4__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getGroup_2_4_4_2()); 
            }
            loop166:
            do {
                int alt166=2;
                int LA166_0 = input.LA(1);

                if ( (LA166_0==KW_Comma) ) {
                    alt166=1;
                }


                switch (alt166) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_17);
            	    rule__Member__Group_2_4_4_2__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop166;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getGroup_2_4_4_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_4_4__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_4_4__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_4_4__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getGreaterThanSignKeyword_2_4_4_3()); 
            }
            match(input,KW_GreaterThanSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getGreaterThanSignKeyword_2_4_4_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_4_4_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__Member__Group_2_4_4_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_4_4_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_4_4_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getCommaKeyword_2_4_4_2_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getCommaKeyword_2_4_4_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_4_4_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_4_4_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_4_4_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getTypeParametersAssignment_2_4_4_2_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__TypeParametersAssignment_2_4_4_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getTypeParametersAssignment_2_4_4_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_4_5__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__Member__Group_2_4_5__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_4_5__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_4_5__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getExtendsKeyword_2_4_5_0()); 
            }
            match(input,KW_Extends,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getExtendsKeyword_2_4_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_4_5__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_19);
            rule__Member__Group_2_4_5__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_4_5__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_4_5__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getExtendsAssignment_2_4_5_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__ExtendsAssignment_2_4_5_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getExtendsAssignment_2_4_5_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_4_5__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_4_5__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_4_5__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getGroup_2_4_5_2()); 
            }
            loop167:
            do {
                int alt167=2;
                int LA167_0 = input.LA(1);

                if ( (LA167_0==KW_Comma) ) {
                    alt167=1;
                }


                switch (alt167) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_17);
            	    rule__Member__Group_2_4_5_2__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop167;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getGroup_2_4_5_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_4_5_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__Member__Group_2_4_5_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_4_5_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_4_5_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getCommaKeyword_2_4_5_2_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getCommaKeyword_2_4_5_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_4_5_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_4_5_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_4_5_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getExtendsAssignment_2_4_5_2_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__ExtendsAssignment_2_4_5_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getExtendsAssignment_2_4_5_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_5__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_22);
            rule__Member__Group_2_5__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_5__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_5__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getXtendEnumAnnotationInfoAction_2_5_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getXtendEnumAnnotationInfoAction_2_5_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_5__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_22);
            rule__Member__Group_2_5__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_5__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_5__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getModifiersAssignment_2_5_1()); 
            }
            loop168:
            do {
                int alt168=2;
                int LA168_0 = input.LA(1);

                if ( (LA168_0==KW_Package||(LA168_0>=KW_Public && LA168_0<=KW_Transient)) ) {
                    alt168=1;
                }


                switch (alt168) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_12);
            	    rule__Member__ModifiersAssignment_2_5_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop168;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getModifiersAssignment_2_5_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_5__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__Member__Group_2_5__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_5__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_5__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getEnumKeyword_2_5_2()); 
            }
            match(input,KW_Enum,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getEnumKeyword_2_5_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_5__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_23);
            rule__Member__Group_2_5__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_5__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_5__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getNameAssignment_2_5_3()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__NameAssignment_2_5_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getNameAssignment_2_5_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_5__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_24);
            rule__Member__Group_2_5__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_5__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_5__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getLeftCurlyBracketKeyword_2_5_4()); 
            }
            match(input,KW_LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getLeftCurlyBracketKeyword_2_5_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_5__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_24);
            rule__Member__Group_2_5__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_5__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_5__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getGroup_2_5_5()); 
            }
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==KW_Annotation||LA169_0==KW_Create||(LA169_0>=KW_AFTER && LA169_0<=KW_SEPARATOR)||LA169_0==KW_CommercialAt||LA169_0==RULE_ID) ) {
                alt169=1;
            }
            switch (alt169) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__Member__Group_2_5_5__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getGroup_2_5_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_5__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_24);
            rule__Member__Group_2_5__6__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_5__7();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_5__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getSemicolonKeyword_2_5_6()); 
            }
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==KW_Semicolon) ) {
                alt170=1;
            }
            switch (alt170) {
                case 1 :
                    {
                    match(input,KW_Semicolon,FOLLOW_2); if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getSemicolonKeyword_2_5_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_5__7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_5__7__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_5__7__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getRightCurlyBracketKeyword_2_5_7()); 
            }
            match(input,KW_RightCurlyBracket,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getRightCurlyBracketKeyword_2_5_7()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_5_5__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_19);
            rule__Member__Group_2_5_5__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_5_5__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_5_5__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getMembersAssignment_2_5_5_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__MembersAssignment_2_5_5_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getMembersAssignment_2_5_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_5_5__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_5_5__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_5_5__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getGroup_2_5_5_1()); 
            }
            loop171:
            do {
                int alt171=2;
                int LA171_0 = input.LA(1);

                if ( (LA171_0==KW_Comma) ) {
                    alt171=1;
                }


                switch (alt171) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_17);
            	    rule__Member__Group_2_5_5_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop171;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getGroup_2_5_5_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_5_5_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_25);
            rule__Member__Group_2_5_5_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_5_5_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_5_5_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getCommaKeyword_2_5_5_1_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getCommaKeyword_2_5_5_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_5_5_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_5_5_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_5_5_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getMembersAssignment_2_5_5_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__MembersAssignment_2_5_5_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getMembersAssignment_2_5_5_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_6__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_34);
            rule__Member__Group_2_6__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_6__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_6__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getXtendAnnotationTypeAnnotationInfoAction_2_6_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getXtendAnnotationTypeAnnotationInfoAction_2_6_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_6__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_34);
            rule__Member__Group_2_6__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_6__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_6__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getModifiersAssignment_2_6_1()); 
            }
            loop172:
            do {
                int alt172=2;
                int LA172_0 = input.LA(1);

                if ( (LA172_0==KW_Package||(LA172_0>=KW_Public && LA172_0<=KW_Transient)) ) {
                    alt172=1;
                }


                switch (alt172) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_12);
            	    rule__Member__ModifiersAssignment_2_6_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop172;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getModifiersAssignment_2_6_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_6__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__Member__Group_2_6__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_6__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_6__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getAnnotationKeyword_2_6_2()); 
            }
            match(input,KW_Annotation,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getAnnotationKeyword_2_6_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_6__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_23);
            rule__Member__Group_2_6__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_6__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_6__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getNameAssignment_2_6_3()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Member__NameAssignment_2_6_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getNameAssignment_2_6_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_6__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_26);
            rule__Member__Group_2_6__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_6__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_6__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getLeftCurlyBracketKeyword_2_6_4()); 
            }
            match(input,KW_LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getLeftCurlyBracketKeyword_2_6_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_6__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_26);
            rule__Member__Group_2_6__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_6__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_6__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getMembersAssignment_2_6_5()); 
            }
            loop173:
            do {
                int alt173=2;
                int LA173_0 = input.LA(1);

                if ( (LA173_0==KW_Package||LA173_0==KW_Class||(LA173_0>=KW_Interface && LA173_0<=KW_LeftParenthesis)||LA173_0==KW_EqualsSignGreaterThanSign||(LA173_0>=KW_Public && LA173_0<=KW_Var)||LA173_0==KW_Create||(LA173_0>=KW_AFTER && LA173_0<=KW_SEPARATOR)||LA173_0==KW_CommercialAt||LA173_0==RULE_ID) ) {
                    alt173=1;
                }


                switch (alt173) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_27);
            	    rule__Member__MembersAssignment_2_6_5();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop173;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getMembersAssignment_2_6_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_6__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Member__Group_2_6__6__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__Group_2_6__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getRightCurlyBracketKeyword_2_6_6()); 
            }
            match(input,KW_RightCurlyBracket,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getRightCurlyBracketKeyword_2_6_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__TypeReferenceWithTypeArgs__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_48);
            rule__TypeReferenceWithTypeArgs__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__TypeReferenceWithTypeArgs__Group_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__TypeReferenceWithTypeArgs__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeReferenceWithTypeArgsAccess().getParameterizedTypeReferenceWithTypeArgsParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleParameterizedTypeReferenceWithTypeArgs();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeReferenceWithTypeArgsAccess().getParameterizedTypeReferenceWithTypeArgsParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__TypeReferenceWithTypeArgs__Group_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__TypeReferenceWithTypeArgs__Group_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__TypeReferenceWithTypeArgs__Group_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeReferenceWithTypeArgsAccess().getGroup_0_1()); 
            }
            loop174:
            do {
                int alt174=2;
                int LA174_0 = input.LA(1);

                if ( (LA174_0==KW_LeftSquareBracket) ) {
                    alt174=1;
                }


                switch (alt174) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_49);
            	    rule__TypeReferenceWithTypeArgs__Group_0_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop174;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeReferenceWithTypeArgsAccess().getGroup_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__TypeReferenceWithTypeArgs__Group_0_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__TypeReferenceWithTypeArgs__Group_0_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__TypeReferenceWithTypeArgs__Group_0_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeReferenceWithTypeArgsAccess().getGroup_0_1_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__TypeReferenceWithTypeArgs__Group_0_1_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeReferenceWithTypeArgsAccess().getGroup_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__TypeReferenceWithTypeArgs__Group_0_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_48);
            rule__TypeReferenceWithTypeArgs__Group_0_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__TypeReferenceWithTypeArgs__Group_0_1_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__TypeReferenceWithTypeArgs__Group_0_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeReferenceWithTypeArgsAccess().getJvmGenericArrayTypeReferenceComponentTypeAction_0_1_0_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeReferenceWithTypeArgsAccess().getJvmGenericArrayTypeReferenceComponentTypeAction_0_1_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__TypeReferenceWithTypeArgs__Group_0_1_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__TypeReferenceWithTypeArgs__Group_0_1_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__TypeReferenceWithTypeArgs__Group_0_1_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeReferenceWithTypeArgsAccess().getArrayBracketsParserRuleCall_0_1_0_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleArrayBrackets();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeReferenceWithTypeArgsAccess().getArrayBracketsParserRuleCall_0_1_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__TypeReferenceWithTypeArgs__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_48);
            rule__TypeReferenceWithTypeArgs__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__TypeReferenceWithTypeArgs__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__TypeReferenceWithTypeArgs__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeReferenceWithTypeArgsAccess().getTypeReferenceNoTypeArgsParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleTypeReferenceNoTypeArgs();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeReferenceWithTypeArgsAccess().getTypeReferenceNoTypeArgsParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__TypeReferenceWithTypeArgs__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__TypeReferenceWithTypeArgs__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__TypeReferenceWithTypeArgs__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeReferenceWithTypeArgsAccess().getGroup_1_1()); 
            }
            {
            pushFollow(FOLLOW_49);
            rule__TypeReferenceWithTypeArgs__Group_1_1__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeReferenceWithTypeArgsAccess().getGroup_1_1()); 
            }

            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeReferenceWithTypeArgsAccess().getGroup_1_1()); 
            }
            loop175:
            do {
                int alt175=2;
                int LA175_0 = input.LA(1);

                if ( (LA175_0==KW_LeftSquareBracket) ) {
                    alt175=1;
                }


                switch (alt175) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_49);
            	    rule__TypeReferenceWithTypeArgs__Group_1_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop175;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeReferenceWithTypeArgsAccess().getGroup_1_1()); 
            }

            }


            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__TypeReferenceWithTypeArgs__Group_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__TypeReferenceWithTypeArgs__Group_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__TypeReferenceWithTypeArgs__Group_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeReferenceWithTypeArgsAccess().getGroup_1_1_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__TypeReferenceWithTypeArgs__Group_1_1_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeReferenceWithTypeArgsAccess().getGroup_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__TypeReferenceWithTypeArgs__Group_1_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_48);
            rule__TypeReferenceWithTypeArgs__Group_1_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__TypeReferenceWithTypeArgs__Group_1_1_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__TypeReferenceWithTypeArgs__Group_1_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeReferenceWithTypeArgsAccess().getJvmGenericArrayTypeReferenceComponentTypeAction_1_1_0_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeReferenceWithTypeArgsAccess().getJvmGenericArrayTypeReferenceComponentTypeAction_1_1_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__TypeReferenceWithTypeArgs__Group_1_1_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__TypeReferenceWithTypeArgs__Group_1_1_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__TypeReferenceWithTypeArgs__Group_1_1_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeReferenceWithTypeArgsAccess().getArrayBracketsParserRuleCall_1_1_0_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleArrayBrackets();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeReferenceWithTypeArgsAccess().getArrayBracketsParserRuleCall_1_1_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_50);
            rule__ParameterizedTypeReferenceWithTypeArgs__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ParameterizedTypeReferenceWithTypeArgs__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getTypeAssignment_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__ParameterizedTypeReferenceWithTypeArgs__TypeAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getTypeAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__ParameterizedTypeReferenceWithTypeArgs__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getGroup_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__ParameterizedTypeReferenceWithTypeArgs__Group_1__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_51);
            rule__ParameterizedTypeReferenceWithTypeArgs__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ParameterizedTypeReferenceWithTypeArgs__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getLessThanSignKeyword_1_0()); 
            }
            match(input,KW_LessThanSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getLessThanSignKeyword_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_16);
            rule__ParameterizedTypeReferenceWithTypeArgs__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ParameterizedTypeReferenceWithTypeArgs__Group_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getArgumentsAssignment_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__ParameterizedTypeReferenceWithTypeArgs__ArgumentsAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getArgumentsAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__Group_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_16);
            rule__ParameterizedTypeReferenceWithTypeArgs__Group_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ParameterizedTypeReferenceWithTypeArgs__Group_1__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__Group_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getGroup_1_2()); 
            }
            loop176:
            do {
                int alt176=2;
                int LA176_0 = input.LA(1);

                if ( (LA176_0==KW_Comma) ) {
                    alt176=1;
                }


                switch (alt176) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_17);
            	    rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_2__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop176;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getGroup_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__Group_1__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_52);
            rule__ParameterizedTypeReferenceWithTypeArgs__Group_1__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ParameterizedTypeReferenceWithTypeArgs__Group_1__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__Group_1__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getGreaterThanSignKeyword_1_3()); 
            }
            match(input,KW_GreaterThanSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getGreaterThanSignKeyword_1_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__Group_1__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__ParameterizedTypeReferenceWithTypeArgs__Group_1__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__Group_1__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getGroup_1_4()); 
            }
            loop177:
            do {
                int alt177=2;
                int LA177_0 = input.LA(1);

                if ( (LA177_0==KW_FullStop) ) {
                    alt177=1;
                }


                switch (alt177) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_53);
            	    rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop177;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getGroup_1_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_51);
            rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getCommaKeyword_1_2_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getCommaKeyword_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getArgumentsAssignment_1_2_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__ParameterizedTypeReferenceWithTypeArgs__ArgumentsAssignment_1_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getArgumentsAssignment_1_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getGroup_1_4_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getGroup_1_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_50);
            rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getTypeAssignment_1_4_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__ParameterizedTypeReferenceWithTypeArgs__TypeAssignment_1_4_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getTypeAssignment_1_4_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getGroup_1_4_2()); 
            }
            int alt178=2;
            alt178 = dfa178.predict(input);
            switch (alt178) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getGroup_1_4_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getGroup_1_4_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4_0_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getGroup_1_4_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_52);
            rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4_0_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getJvmInnerTypeReferenceOuterAction_1_4_0_0_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getJvmInnerTypeReferenceOuterAction_1_4_0_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4_0_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4_0_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4_0_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getFullStopKeyword_1_4_0_0_1()); 
            }
            match(input,KW_FullStop,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getFullStopKeyword_1_4_0_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_51);
            rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getLessThanSignKeyword_1_4_2_0()); 
            }
            {
            match(input,KW_LessThanSign,FOLLOW_2); if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getLessThanSignKeyword_1_4_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_16);
            rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4_2__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getArgumentsAssignment_1_4_2_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__ParameterizedTypeReferenceWithTypeArgs__ArgumentsAssignment_1_4_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getArgumentsAssignment_1_4_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4_2__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_16);
            rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4_2__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4_2__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4_2__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getGroup_1_4_2_2()); 
            }
            loop179:
            do {
                int alt179=2;
                int LA179_0 = input.LA(1);

                if ( (LA179_0==KW_Comma) ) {
                    alt179=1;
                }


                switch (alt179) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_17);
            	    rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4_2_2__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop179;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getGroup_1_4_2_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4_2__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4_2__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4_2__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getGreaterThanSignKeyword_1_4_2_3()); 
            }
            match(input,KW_GreaterThanSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getGreaterThanSignKeyword_1_4_2_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4_2_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_51);
            rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4_2_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4_2_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4_2_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getCommaKeyword_1_4_2_2_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getCommaKeyword_1_4_2_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4_2_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4_2_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4_2_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getArgumentsAssignment_1_4_2_2_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__ParameterizedTypeReferenceWithTypeArgs__ArgumentsAssignment_1_4_2_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getArgumentsAssignment_1_4_2_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XtendEnumLiteral__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_25);
            rule__XtendEnumLiteral__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XtendEnumLiteral__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XtendEnumLiteral__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXtendEnumLiteralAccess().getAnnotationsAssignment_0()); 
            }
            loop180:
            do {
                int alt180=2;
                int LA180_0 = input.LA(1);

                if ( (LA180_0==KW_CommercialAt) ) {
                    alt180=1;
                }


                switch (alt180) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_10);
            	    rule__XtendEnumLiteral__AnnotationsAssignment_0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop180;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getXtendEnumLiteralAccess().getAnnotationsAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XtendEnumLiteral__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XtendEnumLiteral__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XtendEnumLiteral__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXtendEnumLiteralAccess().getNameAssignment_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XtendEnumLiteral__NameAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXtendEnumLiteralAccess().getNameAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__CreateExtensionInfo__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__CreateExtensionInfo__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__CreateExtensionInfo__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__CreateExtensionInfo__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getCreateExtensionInfoAccess().getCreateKeyword_0()); 
            }
            match(input,KW_Create,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getCreateExtensionInfoAccess().getCreateKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__CreateExtensionInfo__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__CreateExtensionInfo__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__CreateExtensionInfo__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__CreateExtensionInfo__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getCreateExtensionInfoAccess().getGroup_1()); 
            }
            int alt181=2;
            switch ( input.LA(1) ) {
                case RULE_ID:
                    {
                    int LA181_1 = input.LA(2);

                    if ( (LA181_1==KW_Colon) ) {
                        alt181=1;
                    }
                    }
                    break;
                case KW_Create:
                    {
                    int LA181_2 = input.LA(2);

                    if ( (LA181_2==KW_Colon) ) {
                        alt181=1;
                    }
                    }
                    break;
                case KW_Annotation:
                    {
                    int LA181_3 = input.LA(2);

                    if ( (LA181_3==KW_Colon) ) {
                        alt181=1;
                    }
                    }
                    break;
                case KW_AFTER:
                    {
                    int LA181_4 = input.LA(2);

                    if ( (LA181_4==KW_Colon) ) {
                        alt181=1;
                    }
                    }
                    break;
                case KW_BEFORE:
                    {
                    int LA181_5 = input.LA(2);

                    if ( (LA181_5==KW_Colon) ) {
                        alt181=1;
                    }
                    }
                    break;
                case KW_SEPARATOR:
                    {
                    int LA181_6 = input.LA(2);

                    if ( (LA181_6==KW_Colon) ) {
                        alt181=1;
                    }
                    }
                    break;
            }

            switch (alt181) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__CreateExtensionInfo__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getCreateExtensionInfoAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__CreateExtensionInfo__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__CreateExtensionInfo__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__CreateExtensionInfo__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getCreateExtensionInfoAccess().getCreateExpressionAssignment_2()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__CreateExtensionInfo__CreateExpressionAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getCreateExtensionInfoAccess().getCreateExpressionAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__CreateExtensionInfo__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_54);
            rule__CreateExtensionInfo__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__CreateExtensionInfo__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__CreateExtensionInfo__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getCreateExtensionInfoAccess().getNameAssignment_1_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__CreateExtensionInfo__NameAssignment_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getCreateExtensionInfoAccess().getNameAssignment_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__CreateExtensionInfo__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__CreateExtensionInfo__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__CreateExtensionInfo__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getCreateExtensionInfoAccess().getColonKeyword_1_1()); 
            }
            match(input,KW_Colon,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getCreateExtensionInfoAccess().getColonKeyword_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Parameter__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_44);
            rule__Parameter__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Parameter__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Parameter__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterAccess().getAnnotationsAssignment_0()); 
            }
            loop182:
            do {
                int alt182=2;
                int LA182_0 = input.LA(1);

                if ( (LA182_0==KW_CommercialAt) ) {
                    alt182=1;
                }


                switch (alt182) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_10);
            	    rule__Parameter__AnnotationsAssignment_0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop182;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getParameterAccess().getAnnotationsAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Parameter__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_44);
            rule__Parameter__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Parameter__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Parameter__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterAccess().getGroup_1()); 
            }
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==KW_Extension) ) {
                alt183=1;
            }
            switch (alt183) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__Parameter__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getParameterAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Parameter__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_55);
            rule__Parameter__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Parameter__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Parameter__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterAccess().getParameterTypeAssignment_2()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Parameter__ParameterTypeAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getParameterAccess().getParameterTypeAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Parameter__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_55);
            rule__Parameter__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Parameter__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Parameter__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterAccess().getVarArgAssignment_3()); 
            }
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==KW_FullStopFullStopFullStop) ) {
                alt184=1;
            }
            switch (alt184) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__Parameter__VarArgAssignment_3();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getParameterAccess().getVarArgAssignment_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Parameter__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Parameter__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Parameter__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterAccess().getNameAssignment_4()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Parameter__NameAssignment_4();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getParameterAccess().getNameAssignment_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Parameter__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_56);
            rule__Parameter__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Parameter__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Parameter__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterAccess().getExtensionAssignment_1_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Parameter__ExtensionAssignment_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getParameterAccess().getExtensionAssignment_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Parameter__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Parameter__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Parameter__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterAccess().getAnnotationsAssignment_1_1()); 
            }
            loop185:
            do {
                int alt185=2;
                int LA185_0 = input.LA(1);

                if ( (LA185_0==KW_CommercialAt) ) {
                    alt185=1;
                }


                switch (alt185) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_10);
            	    rule__Parameter__AnnotationsAssignment_1_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop185;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getParameterAccess().getAnnotationsAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAssignment__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_57);
            rule__XAssignment__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XAssignment__Group_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAssignment__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAssignmentAccess().getXAssignmentAction_0_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAssignmentAccess().getXAssignmentAction_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAssignment__Group_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_58);
            rule__XAssignment__Group_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XAssignment__Group_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAssignment__Group_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAssignmentAccess().getFeatureAssignment_0_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XAssignment__FeatureAssignment_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAssignmentAccess().getFeatureAssignment_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAssignment__Group_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XAssignment__Group_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XAssignment__Group_0__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAssignment__Group_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAssignmentAccess().getOpSingleAssignParserRuleCall_0_2()); 
            }
            pushFollow(FOLLOW_2);
            ruleOpSingleAssign();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAssignmentAccess().getOpSingleAssignParserRuleCall_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAssignment__Group_0__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XAssignment__Group_0__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAssignment__Group_0__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAssignmentAccess().getValueAssignment_0_3()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XAssignment__ValueAssignment_0_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAssignmentAccess().getValueAssignment_0_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAssignment__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_59);
            rule__XAssignment__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XAssignment__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAssignment__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAssignmentAccess().getXConditionalExpressionParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXConditionalExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAssignmentAccess().getXConditionalExpressionParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAssignment__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XAssignment__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAssignment__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAssignmentAccess().getGroup_1_1()); 
            }
            int alt186=2;
            alt186 = dfa186.predict(input);
            switch (alt186) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XAssignment__Group_1_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAssignmentAccess().getGroup_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAssignment__Group_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XAssignment__Group_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XAssignment__Group_1_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAssignment__Group_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAssignmentAccess().getGroup_1_1_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XAssignment__Group_1_1_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAssignmentAccess().getGroup_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAssignment__Group_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XAssignment__Group_1_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAssignment__Group_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAssignmentAccess().getRightOperandAssignment_1_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XAssignment__RightOperandAssignment_1_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAssignmentAccess().getRightOperandAssignment_1_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAssignment__Group_1_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XAssignment__Group_1_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAssignment__Group_1_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAssignmentAccess().getGroup_1_1_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XAssignment__Group_1_1_0_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAssignmentAccess().getGroup_1_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAssignment__Group_1_1_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_59);
            rule__XAssignment__Group_1_1_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XAssignment__Group_1_1_0_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAssignment__Group_1_1_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAssignment__Group_1_1_0_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XAssignment__Group_1_1_0_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAssignment__Group_1_1_0_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAssignmentAccess().getFeatureAssignment_1_1_0_0_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XAssignment__FeatureAssignment_1_1_0_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAssignmentAccess().getFeatureAssignment_1_1_0_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XConditionalExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_60);
            rule__XConditionalExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XConditionalExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XConditionalExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXConditionalExpressionAccess().getXOrExpressionParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXOrExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXConditionalExpressionAccess().getXOrExpressionParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XConditionalExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XConditionalExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XConditionalExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXConditionalExpressionAccess().getGroup_1()); 
            }
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==KW_QuestionMark) ) {
                int LA187_1 = input.LA(2);

                if ( (synpred293_InternalXtend()) ) {
                    alt187=1;
                }
            }
            switch (alt187) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XConditionalExpression__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXConditionalExpressionAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XConditionalExpression__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XConditionalExpression__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XConditionalExpression__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XConditionalExpression__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXConditionalExpressionAccess().getGroup_1_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XConditionalExpression__Group_1_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXConditionalExpressionAccess().getGroup_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XConditionalExpression__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_54);
            rule__XConditionalExpression__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XConditionalExpression__Group_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XConditionalExpression__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXConditionalExpressionAccess().getThenAssignment_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XConditionalExpression__ThenAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXConditionalExpressionAccess().getThenAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XConditionalExpression__Group_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XConditionalExpression__Group_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XConditionalExpression__Group_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXConditionalExpressionAccess().getGroup_1_2()); 
            }
            int alt188=2;
            int LA188_0 = input.LA(1);

            if ( (LA188_0==KW_Colon) ) {
                int LA188_1 = input.LA(2);

                if ( (synpred294_InternalXtend()) ) {
                    alt188=1;
                }
            }
            switch (alt188) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XConditionalExpression__Group_1_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXConditionalExpressionAccess().getGroup_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XConditionalExpression__Group_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XConditionalExpression__Group_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XConditionalExpression__Group_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXConditionalExpressionAccess().getGroup_1_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XConditionalExpression__Group_1_0_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXConditionalExpressionAccess().getGroup_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XConditionalExpression__Group_1_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_60);
            rule__XConditionalExpression__Group_1_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XConditionalExpression__Group_1_0_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XConditionalExpression__Group_1_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXConditionalExpressionAccess().getXIfExpressionIfAction_1_0_0_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXConditionalExpressionAccess().getXIfExpressionIfAction_1_0_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XConditionalExpression__Group_1_0_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XConditionalExpression__Group_1_0_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XConditionalExpression__Group_1_0_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXConditionalExpressionAccess().getConditionalExpressionAssignment_1_0_0_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XConditionalExpression__ConditionalExpressionAssignment_1_0_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXConditionalExpressionAccess().getConditionalExpressionAssignment_1_0_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XConditionalExpression__Group_1_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XConditionalExpression__Group_1_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XConditionalExpression__Group_1_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XConditionalExpression__Group_1_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXConditionalExpressionAccess().getColonKeyword_1_2_0()); 
            }
            {
            match(input,KW_Colon,FOLLOW_2); if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXConditionalExpressionAccess().getColonKeyword_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XConditionalExpression__Group_1_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XConditionalExpression__Group_1_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XConditionalExpression__Group_1_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXConditionalExpressionAccess().getElseAssignment_1_2_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XConditionalExpression__ElseAssignment_1_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXConditionalExpressionAccess().getElseAssignment_1_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_61);
            rule__XTryCatchFinallyExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XTryCatchFinallyExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTryCatchFinallyExpressionAccess().getXTryCatchFinallyExpressionAction_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXTryCatchFinallyExpressionAccess().getXTryCatchFinallyExpressionAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XTryCatchFinallyExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XTryCatchFinallyExpression__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTryCatchFinallyExpressionAccess().getTryKeyword_1()); 
            }
            match(input,KW_Try,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXTryCatchFinallyExpressionAccess().getTryKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XTryCatchFinallyExpression__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTryCatchFinallyExpressionAccess().getAlternatives_2()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XTryCatchFinallyExpression__Alternatives_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXTryCatchFinallyExpressionAccess().getAlternatives_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_62);
            rule__XTryCatchFinallyExpression__Group_2_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XTryCatchFinallyExpression__Group_2_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTryCatchFinallyExpressionAccess().getLeftParenthesisKeyword_2_0_0()); 
            }
            match(input,KW_LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXTryCatchFinallyExpressionAccess().getLeftParenthesisKeyword_2_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_63);
            rule__XTryCatchFinallyExpression__Group_2_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XTryCatchFinallyExpression__Group_2_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTryCatchFinallyExpressionAccess().getResourcesAssignment_2_0_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XTryCatchFinallyExpression__ResourcesAssignment_2_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXTryCatchFinallyExpressionAccess().getResourcesAssignment_2_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_63);
            rule__XTryCatchFinallyExpression__Group_2_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XTryCatchFinallyExpression__Group_2_0__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTryCatchFinallyExpressionAccess().getGroup_2_0_2()); 
            }
            loop189:
            do {
                int alt189=2;
                int LA189_0 = input.LA(1);

                if ( (LA189_0==KW_Semicolon) ) {
                    int LA189_1 = input.LA(2);

                    if ( (LA189_1==KW_Extension||(LA189_1>=KW_Val && LA189_1<=KW_Var)) ) {
                        alt189=1;
                    }


                }


                switch (alt189) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_64);
            	    rule__XTryCatchFinallyExpression__Group_2_0_2__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop189;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getXTryCatchFinallyExpressionAccess().getGroup_2_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_0__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_63);
            rule__XTryCatchFinallyExpression__Group_2_0__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XTryCatchFinallyExpression__Group_2_0__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_0__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTryCatchFinallyExpressionAccess().getSemicolonKeyword_2_0_3()); 
            }
            int alt190=2;
            int LA190_0 = input.LA(1);

            if ( (LA190_0==KW_Semicolon) ) {
                alt190=1;
            }
            switch (alt190) {
                case 1 :
                    {
                    match(input,KW_Semicolon,FOLLOW_2); if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXTryCatchFinallyExpressionAccess().getSemicolonKeyword_2_0_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_0__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XTryCatchFinallyExpression__Group_2_0__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XTryCatchFinallyExpression__Group_2_0__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_0__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTryCatchFinallyExpressionAccess().getRightParenthesisKeyword_2_0_4()); 
            }
            match(input,KW_RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXTryCatchFinallyExpressionAccess().getRightParenthesisKeyword_2_0_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_0__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_65);
            rule__XTryCatchFinallyExpression__Group_2_0__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XTryCatchFinallyExpression__Group_2_0__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_0__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTryCatchFinallyExpressionAccess().getExpressionAssignment_2_0_5()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XTryCatchFinallyExpression__ExpressionAssignment_2_0_5();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXTryCatchFinallyExpressionAccess().getExpressionAssignment_2_0_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_0__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XTryCatchFinallyExpression__Group_2_0__6__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_0__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTryCatchFinallyExpressionAccess().getGroup_2_0_6()); 
            }
            int alt191=2;
            int LA191_0 = input.LA(1);

            if ( (LA191_0==KW_Catch) ) {
                int LA191_1 = input.LA(2);

                if ( (synpred297_InternalXtend()) ) {
                    alt191=1;
                }
            }
            else if ( (LA191_0==KW_Finally) ) {
                int LA191_2 = input.LA(2);

                if ( (synpred297_InternalXtend()) ) {
                    alt191=1;
                }
            }
            switch (alt191) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XTryCatchFinallyExpression__Group_2_0_6__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXTryCatchFinallyExpressionAccess().getGroup_2_0_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_0_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_62);
            rule__XTryCatchFinallyExpression__Group_2_0_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XTryCatchFinallyExpression__Group_2_0_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_0_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTryCatchFinallyExpressionAccess().getSemicolonKeyword_2_0_2_0()); 
            }
            match(input,KW_Semicolon,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXTryCatchFinallyExpressionAccess().getSemicolonKeyword_2_0_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_0_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XTryCatchFinallyExpression__Group_2_0_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_0_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTryCatchFinallyExpressionAccess().getResourcesAssignment_2_0_2_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XTryCatchFinallyExpression__ResourcesAssignment_2_0_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXTryCatchFinallyExpressionAccess().getResourcesAssignment_2_0_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_0_6__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XTryCatchFinallyExpression__Group_2_0_6__0__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_0_6__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTryCatchFinallyExpressionAccess().getAlternatives_2_0_6_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XTryCatchFinallyExpression__Alternatives_2_0_6_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXTryCatchFinallyExpressionAccess().getAlternatives_2_0_6_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_0_6_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_66);
            rule__XTryCatchFinallyExpression__Group_2_0_6_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XTryCatchFinallyExpression__Group_2_0_6_0_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_0_6_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTryCatchFinallyExpressionAccess().getCatchClausesAssignment_2_0_6_0_0_0()); 
            }
            {
            pushFollow(FOLLOW_67);
            rule__XTryCatchFinallyExpression__CatchClausesAssignment_2_0_6_0_0_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXTryCatchFinallyExpressionAccess().getCatchClausesAssignment_2_0_6_0_0_0()); 
            }

            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTryCatchFinallyExpressionAccess().getCatchClausesAssignment_2_0_6_0_0_0()); 
            }
            loop192:
            do {
                int alt192=2;
                int LA192_0 = input.LA(1);

                if ( (LA192_0==KW_Catch) ) {
                    int LA192_2 = input.LA(2);

                    if ( (synpred298_InternalXtend()) ) {
                        alt192=1;
                    }


                }


                switch (alt192) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_67);
            	    rule__XTryCatchFinallyExpression__CatchClausesAssignment_2_0_6_0_0_0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop192;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getXTryCatchFinallyExpressionAccess().getCatchClausesAssignment_2_0_6_0_0_0()); 
            }

            }


            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_0_6_0_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XTryCatchFinallyExpression__Group_2_0_6_0_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_0_6_0_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTryCatchFinallyExpressionAccess().getGroup_2_0_6_0_0_1()); 
            }
            int alt193=2;
            int LA193_0 = input.LA(1);

            if ( (LA193_0==KW_Finally) ) {
                int LA193_1 = input.LA(2);

                if ( (synpred299_InternalXtend()) ) {
                    alt193=1;
                }
            }
            switch (alt193) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XTryCatchFinallyExpression__Group_2_0_6_0_0_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXTryCatchFinallyExpressionAccess().getGroup_2_0_6_0_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_0_6_0_0_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XTryCatchFinallyExpression__Group_2_0_6_0_0_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XTryCatchFinallyExpression__Group_2_0_6_0_0_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_0_6_0_0_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTryCatchFinallyExpressionAccess().getFinallyKeyword_2_0_6_0_0_1_0()); 
            }
            {
            match(input,KW_Finally,FOLLOW_2); if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXTryCatchFinallyExpressionAccess().getFinallyKeyword_2_0_6_0_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_0_6_0_0_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XTryCatchFinallyExpression__Group_2_0_6_0_0_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_0_6_0_0_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTryCatchFinallyExpressionAccess().getFinallyExpressionAssignment_2_0_6_0_0_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XTryCatchFinallyExpression__FinallyExpressionAssignment_2_0_6_0_0_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXTryCatchFinallyExpressionAccess().getFinallyExpressionAssignment_2_0_6_0_0_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_0_6_0_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XTryCatchFinallyExpression__Group_2_0_6_0_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XTryCatchFinallyExpression__Group_2_0_6_0_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_0_6_0_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTryCatchFinallyExpressionAccess().getFinallyKeyword_2_0_6_0_1_0()); 
            }
            match(input,KW_Finally,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXTryCatchFinallyExpressionAccess().getFinallyKeyword_2_0_6_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_0_6_0_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XTryCatchFinallyExpression__Group_2_0_6_0_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_0_6_0_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTryCatchFinallyExpressionAccess().getFinallyExpressionAssignment_2_0_6_0_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XTryCatchFinallyExpression__FinallyExpressionAssignment_2_0_6_0_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXTryCatchFinallyExpressionAccess().getFinallyExpressionAssignment_2_0_6_0_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_65);
            rule__XTryCatchFinallyExpression__Group_2_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XTryCatchFinallyExpression__Group_2_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTryCatchFinallyExpressionAccess().getExpressionAssignment_2_1_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XTryCatchFinallyExpression__ExpressionAssignment_2_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXTryCatchFinallyExpressionAccess().getExpressionAssignment_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XTryCatchFinallyExpression__Group_2_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTryCatchFinallyExpressionAccess().getAlternatives_2_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XTryCatchFinallyExpression__Alternatives_2_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXTryCatchFinallyExpressionAccess().getAlternatives_2_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_1_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_66);
            rule__XTryCatchFinallyExpression__Group_2_1_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XTryCatchFinallyExpression__Group_2_1_1_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_1_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTryCatchFinallyExpressionAccess().getCatchClausesAssignment_2_1_1_0_0()); 
            }
            {
            pushFollow(FOLLOW_67);
            rule__XTryCatchFinallyExpression__CatchClausesAssignment_2_1_1_0_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXTryCatchFinallyExpressionAccess().getCatchClausesAssignment_2_1_1_0_0()); 
            }

            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTryCatchFinallyExpressionAccess().getCatchClausesAssignment_2_1_1_0_0()); 
            }
            loop194:
            do {
                int alt194=2;
                int LA194_0 = input.LA(1);

                if ( (LA194_0==KW_Catch) ) {
                    int LA194_2 = input.LA(2);

                    if ( (synpred300_InternalXtend()) ) {
                        alt194=1;
                    }


                }


                switch (alt194) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_67);
            	    rule__XTryCatchFinallyExpression__CatchClausesAssignment_2_1_1_0_0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop194;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getXTryCatchFinallyExpressionAccess().getCatchClausesAssignment_2_1_1_0_0()); 
            }

            }


            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_1_1_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XTryCatchFinallyExpression__Group_2_1_1_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_1_1_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTryCatchFinallyExpressionAccess().getGroup_2_1_1_0_1()); 
            }
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==KW_Finally) ) {
                int LA195_1 = input.LA(2);

                if ( (synpred301_InternalXtend()) ) {
                    alt195=1;
                }
            }
            switch (alt195) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XTryCatchFinallyExpression__Group_2_1_1_0_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXTryCatchFinallyExpressionAccess().getGroup_2_1_1_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_1_1_0_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XTryCatchFinallyExpression__Group_2_1_1_0_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XTryCatchFinallyExpression__Group_2_1_1_0_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_1_1_0_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTryCatchFinallyExpressionAccess().getFinallyKeyword_2_1_1_0_1_0()); 
            }
            {
            match(input,KW_Finally,FOLLOW_2); if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXTryCatchFinallyExpressionAccess().getFinallyKeyword_2_1_1_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_1_1_0_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XTryCatchFinallyExpression__Group_2_1_1_0_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_1_1_0_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTryCatchFinallyExpressionAccess().getFinallyExpressionAssignment_2_1_1_0_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XTryCatchFinallyExpression__FinallyExpressionAssignment_2_1_1_0_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXTryCatchFinallyExpressionAccess().getFinallyExpressionAssignment_2_1_1_0_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_1_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XTryCatchFinallyExpression__Group_2_1_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XTryCatchFinallyExpression__Group_2_1_1_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_1_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTryCatchFinallyExpressionAccess().getFinallyKeyword_2_1_1_1_0()); 
            }
            match(input,KW_Finally,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXTryCatchFinallyExpressionAccess().getFinallyKeyword_2_1_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_1_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XTryCatchFinallyExpression__Group_2_1_1_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__Group_2_1_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTryCatchFinallyExpressionAccess().getFinallyExpressionAssignment_2_1_1_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XTryCatchFinallyExpression__FinallyExpressionAssignment_2_1_1_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXTryCatchFinallyExpressionAccess().getFinallyExpressionAssignment_2_1_1_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XVariableDeclaration__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_68);
            rule__XVariableDeclaration__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XVariableDeclaration__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XVariableDeclaration__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXVariableDeclarationAccess().getGroup_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XVariableDeclaration__Group_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXVariableDeclarationAccess().getGroup_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XVariableDeclaration__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_58);
            rule__XVariableDeclaration__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XVariableDeclaration__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XVariableDeclaration__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXVariableDeclarationAccess().getAlternatives_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XVariableDeclaration__Alternatives_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXVariableDeclarationAccess().getAlternatives_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XVariableDeclaration__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XVariableDeclaration__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XVariableDeclaration__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXVariableDeclarationAccess().getGroup_2()); 
            }
            int alt196=2;
            int LA196_0 = input.LA(1);

            if ( (LA196_0==KW_EqualsSign) ) {
                alt196=1;
            }
            switch (alt196) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XVariableDeclaration__Group_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXVariableDeclarationAccess().getGroup_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XVariableDeclaration__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XVariableDeclaration__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XVariableDeclaration__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXVariableDeclarationAccess().getGroup_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XVariableDeclaration__Group_0_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXVariableDeclarationAccess().getGroup_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XVariableDeclaration__Group_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_62);
            rule__XVariableDeclaration__Group_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XVariableDeclaration__Group_0_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XVariableDeclaration__Group_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXVariableDeclarationAccess().getXtendVariableDeclarationAction_0_0_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXVariableDeclarationAccess().getXtendVariableDeclarationAction_0_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XVariableDeclaration__Group_0_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XVariableDeclaration__Group_0_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XVariableDeclaration__Group_0_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXVariableDeclarationAccess().getVariableModifierParserRuleCall_0_0_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableModifier();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXVariableDeclarationAccess().getVariableModifierParserRuleCall_0_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XVariableDeclaration__Group_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XVariableDeclaration__Group_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XVariableDeclaration__Group_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXVariableDeclarationAccess().getGroup_1_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XVariableDeclaration__Group_1_0_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXVariableDeclarationAccess().getGroup_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XVariableDeclaration__Group_1_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_69);
            rule__XVariableDeclaration__Group_1_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XVariableDeclaration__Group_1_0_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XVariableDeclaration__Group_1_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXVariableDeclarationAccess().getTypeAssignment_1_0_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XVariableDeclaration__TypeAssignment_1_0_0_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXVariableDeclarationAccess().getTypeAssignment_1_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XVariableDeclaration__Group_1_0_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XVariableDeclaration__Group_1_0_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XVariableDeclaration__Group_1_0_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXVariableDeclarationAccess().getNameAssignment_1_0_0_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XVariableDeclaration__NameAssignment_1_0_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXVariableDeclarationAccess().getNameAssignment_1_0_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XVariableDeclaration__Group_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XVariableDeclaration__Group_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XVariableDeclaration__Group_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XVariableDeclaration__Group_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXVariableDeclarationAccess().getEqualsSignKeyword_2_0()); 
            }
            match(input,KW_EqualsSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXVariableDeclarationAccess().getEqualsSignKeyword_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XVariableDeclaration__Group_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XVariableDeclaration__Group_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XVariableDeclaration__Group_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXVariableDeclarationAccess().getRightAssignment_2_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XVariableDeclaration__RightAssignment_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXVariableDeclarationAccess().getRightAssignment_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__InitializedVariableDeclaration__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_62);
            rule__InitializedVariableDeclaration__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__InitializedVariableDeclaration__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__InitializedVariableDeclaration__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getInitializedVariableDeclarationAccess().getXtendVariableDeclarationAction_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getInitializedVariableDeclarationAccess().getXtendVariableDeclarationAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__InitializedVariableDeclaration__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_68);
            rule__InitializedVariableDeclaration__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__InitializedVariableDeclaration__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__InitializedVariableDeclaration__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getInitializedVariableDeclarationAccess().getVariableModifierParserRuleCall_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleVariableModifier();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getInitializedVariableDeclarationAccess().getVariableModifierParserRuleCall_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__InitializedVariableDeclaration__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_58);
            rule__InitializedVariableDeclaration__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__InitializedVariableDeclaration__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__InitializedVariableDeclaration__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getInitializedVariableDeclarationAccess().getAlternatives_2()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__InitializedVariableDeclaration__Alternatives_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getInitializedVariableDeclarationAccess().getAlternatives_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__InitializedVariableDeclaration__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__InitializedVariableDeclaration__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__InitializedVariableDeclaration__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__InitializedVariableDeclaration__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getInitializedVariableDeclarationAccess().getEqualsSignKeyword_3()); 
            }
            match(input,KW_EqualsSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getInitializedVariableDeclarationAccess().getEqualsSignKeyword_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__InitializedVariableDeclaration__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__InitializedVariableDeclaration__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__InitializedVariableDeclaration__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getInitializedVariableDeclarationAccess().getRightAssignment_4()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__InitializedVariableDeclaration__RightAssignment_4();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getInitializedVariableDeclarationAccess().getRightAssignment_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__InitializedVariableDeclaration__Group_2_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__InitializedVariableDeclaration__Group_2_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__InitializedVariableDeclaration__Group_2_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getInitializedVariableDeclarationAccess().getGroup_2_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__InitializedVariableDeclaration__Group_2_0_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getInitializedVariableDeclarationAccess().getGroup_2_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__InitializedVariableDeclaration__Group_2_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_69);
            rule__InitializedVariableDeclaration__Group_2_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__InitializedVariableDeclaration__Group_2_0_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__InitializedVariableDeclaration__Group_2_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getInitializedVariableDeclarationAccess().getTypeAssignment_2_0_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__InitializedVariableDeclaration__TypeAssignment_2_0_0_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getInitializedVariableDeclarationAccess().getTypeAssignment_2_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__InitializedVariableDeclaration__Group_2_0_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__InitializedVariableDeclaration__Group_2_0_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__InitializedVariableDeclaration__Group_2_0_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getInitializedVariableDeclarationAccess().getNameAssignment_2_0_0_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__InitializedVariableDeclaration__NameAssignment_2_0_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getInitializedVariableDeclarationAccess().getNameAssignment_2_0_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__VariableModifier__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_70);
            rule__VariableModifier__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__VariableModifier__Group_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__VariableModifier__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getVariableModifierAccess().getAlternatives_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__VariableModifier__Alternatives_0_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getVariableModifierAccess().getAlternatives_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__VariableModifier__Group_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__VariableModifier__Group_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__VariableModifier__Group_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getVariableModifierAccess().getExtensionAssignment_0_1()); 
            }
            int alt197=2;
            int LA197_0 = input.LA(1);

            if ( (LA197_0==KW_Extension) ) {
                alt197=1;
            }
            switch (alt197) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__VariableModifier__ExtensionAssignment_0_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getVariableModifierAccess().getExtensionAssignment_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__VariableModifier__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_71);
            rule__VariableModifier__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__VariableModifier__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__VariableModifier__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getVariableModifierAccess().getExtensionAssignment_1_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__VariableModifier__ExtensionAssignment_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getVariableModifierAccess().getExtensionAssignment_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__VariableModifier__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__VariableModifier__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__VariableModifier__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getVariableModifierAccess().getAlternatives_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__VariableModifier__Alternatives_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getVariableModifierAccess().getAlternatives_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XConstructorCall__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_23);
            rule__XConstructorCall__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XConstructorCall__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XConstructorCall__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXConstructorCallAccess().getXbaseConstructorCallParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXbaseConstructorCall();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXConstructorCallAccess().getXbaseConstructorCallParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XConstructorCall__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XConstructorCall__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XConstructorCall__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXConstructorCallAccess().getGroup_1()); 
            }
            int alt198=2;
            alt198 = dfa198.predict(input);
            switch (alt198) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XConstructorCall__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXConstructorCallAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XConstructorCall__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_14);
            rule__XConstructorCall__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XConstructorCall__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XConstructorCall__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXConstructorCallAccess().getGroup_1_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XConstructorCall__Group_1_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXConstructorCallAccess().getGroup_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XConstructorCall__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_14);
            rule__XConstructorCall__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XConstructorCall__Group_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XConstructorCall__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXConstructorCallAccess().getMembersAssignment_1_1()); 
            }
            loop199:
            do {
                int alt199=2;
                int LA199_0 = input.LA(1);

                if ( (LA199_0==KW_Package||LA199_0==KW_Class||(LA199_0>=KW_Interface && LA199_0<=KW_LeftParenthesis)||LA199_0==KW_EqualsSignGreaterThanSign||LA199_0==KW_Extension||LA199_0==KW_New||(LA199_0>=KW_Public && LA199_0<=KW_Create)||(LA199_0>=KW_AFTER && LA199_0<=KW_SEPARATOR)||LA199_0==KW_CommercialAt||LA199_0==RULE_ID) ) {
                    alt199=1;
                }


                switch (alt199) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_15);
            	    rule__XConstructorCall__MembersAssignment_1_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop199;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getXConstructorCallAccess().getMembersAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XConstructorCall__Group_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XConstructorCall__Group_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XConstructorCall__Group_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXConstructorCallAccess().getRightCurlyBracketKeyword_1_2()); 
            }
            match(input,KW_RightCurlyBracket,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXConstructorCallAccess().getRightCurlyBracketKeyword_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XConstructorCall__Group_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XConstructorCall__Group_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XConstructorCall__Group_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXConstructorCallAccess().getGroup_1_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XConstructorCall__Group_1_0_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXConstructorCallAccess().getGroup_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XConstructorCall__Group_1_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_23);
            rule__XConstructorCall__Group_1_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XConstructorCall__Group_1_0_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XConstructorCall__Group_1_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXConstructorCallAccess().getAnonymousClassConstructorCallAction_1_0_0_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXConstructorCallAccess().getAnonymousClassConstructorCallAction_1_0_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XConstructorCall__Group_1_0_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XConstructorCall__Group_1_0_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XConstructorCall__Group_1_0_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXConstructorCallAccess().getLeftCurlyBracketKeyword_1_0_0_1()); 
            }
            match(input,KW_LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXConstructorCallAccess().getLeftCurlyBracketKeyword_1_0_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_72);
            rule__XbaseConstructorCall__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XbaseConstructorCall__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXbaseConstructorCallAccess().getXConstructorCallAction_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXbaseConstructorCallAccess().getXConstructorCallAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__XbaseConstructorCall__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XbaseConstructorCall__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXbaseConstructorCallAccess().getNewKeyword_1()); 
            }
            match(input,KW_New,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXbaseConstructorCallAccess().getNewKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_73);
            rule__XbaseConstructorCall__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XbaseConstructorCall__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXbaseConstructorCallAccess().getConstructorAssignment_2()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XbaseConstructorCall__ConstructorAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXbaseConstructorCallAccess().getConstructorAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_73);
            rule__XbaseConstructorCall__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XbaseConstructorCall__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXbaseConstructorCallAccess().getGroup_3()); 
            }
            int alt200=2;
            alt200 = dfa200.predict(input);
            switch (alt200) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XbaseConstructorCall__Group_3__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXbaseConstructorCallAccess().getGroup_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_73);
            rule__XbaseConstructorCall__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XbaseConstructorCall__Group__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXbaseConstructorCallAccess().getGroup_4()); 
            }
            int alt201=2;
            alt201 = dfa201.predict(input);
            switch (alt201) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XbaseConstructorCall__Group_4__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXbaseConstructorCallAccess().getGroup_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XbaseConstructorCall__Group__5__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXbaseConstructorCallAccess().getArgumentsAssignment_5()); 
            }
            int alt202=2;
            alt202 = dfa202.predict(input);
            switch (alt202) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XbaseConstructorCall__ArgumentsAssignment_5();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXbaseConstructorCallAccess().getArgumentsAssignment_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__Group_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_51);
            rule__XbaseConstructorCall__Group_3__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XbaseConstructorCall__Group_3__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__Group_3__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXbaseConstructorCallAccess().getLessThanSignKeyword_3_0()); 
            }
            {
            match(input,KW_LessThanSign,FOLLOW_2); if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXbaseConstructorCallAccess().getLessThanSignKeyword_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__Group_3__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_16);
            rule__XbaseConstructorCall__Group_3__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XbaseConstructorCall__Group_3__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__Group_3__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXbaseConstructorCallAccess().getTypeArgumentsAssignment_3_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XbaseConstructorCall__TypeArgumentsAssignment_3_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXbaseConstructorCallAccess().getTypeArgumentsAssignment_3_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__Group_3__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_16);
            rule__XbaseConstructorCall__Group_3__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XbaseConstructorCall__Group_3__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__Group_3__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXbaseConstructorCallAccess().getGroup_3_2()); 
            }
            loop203:
            do {
                int alt203=2;
                int LA203_0 = input.LA(1);

                if ( (LA203_0==KW_Comma) ) {
                    alt203=1;
                }


                switch (alt203) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_17);
            	    rule__XbaseConstructorCall__Group_3_2__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop203;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getXbaseConstructorCallAccess().getGroup_3_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__Group_3__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XbaseConstructorCall__Group_3__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__Group_3__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXbaseConstructorCallAccess().getGreaterThanSignKeyword_3_3()); 
            }
            match(input,KW_GreaterThanSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXbaseConstructorCallAccess().getGreaterThanSignKeyword_3_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__Group_3_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_51);
            rule__XbaseConstructorCall__Group_3_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XbaseConstructorCall__Group_3_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__Group_3_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXbaseConstructorCallAccess().getCommaKeyword_3_2_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXbaseConstructorCallAccess().getCommaKeyword_3_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__Group_3_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XbaseConstructorCall__Group_3_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__Group_3_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXbaseConstructorCallAccess().getTypeArgumentsAssignment_3_2_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XbaseConstructorCall__TypeArgumentsAssignment_3_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXbaseConstructorCallAccess().getTypeArgumentsAssignment_3_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__Group_4__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_74);
            rule__XbaseConstructorCall__Group_4__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XbaseConstructorCall__Group_4__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__Group_4__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXbaseConstructorCallAccess().getExplicitConstructorCallAssignment_4_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XbaseConstructorCall__ExplicitConstructorCallAssignment_4_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXbaseConstructorCallAccess().getExplicitConstructorCallAssignment_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__Group_4__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_74);
            rule__XbaseConstructorCall__Group_4__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XbaseConstructorCall__Group_4__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__Group_4__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXbaseConstructorCallAccess().getAlternatives_4_1()); 
            }
            int alt204=2;
            int LA204_0 = input.LA(1);

            if ( (LA204_0==KW_Package||(LA204_0>=KW_Class && LA204_0<=KW_LessThanSign)||(LA204_0>=KW_Extends && LA204_0<=KW_LeftCurlyBracket)||(LA204_0>=KW_Interface && LA204_0<=KW_LeftParenthesis)||LA204_0==KW_EqualsSignGreaterThanSign||(LA204_0>=KW_Extension && LA204_0<=KW_New)||(LA204_0>=KW_Public && LA204_0<=KW_Transient)||(LA204_0>=KW_Def && LA204_0<=KW_Create)||(LA204_0>=KW_AFTER && LA204_0<=KW_Import)||LA204_0==KW_Try||(LA204_0>=KW_VerticalLine && LA204_0<=KW_Switch)||(LA204_0>=KW_NumberSign && LA204_0<=KW_LeftSquareBracket)||(LA204_0>=KW_PlusSign && LA204_0<=KW_HyphenMinus)||LA204_0==KW_ExclamationMark||LA204_0==KW_If||(LA204_0>=KW_For && LA204_0<=KW_Return)||(LA204_0>=RULE_ID && LA204_0<=RULE_RICH_TEXT_START)) ) {
                alt204=1;
            }
            switch (alt204) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XbaseConstructorCall__Alternatives_4_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXbaseConstructorCallAccess().getAlternatives_4_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__Group_4__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XbaseConstructorCall__Group_4__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__Group_4__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXbaseConstructorCallAccess().getRightParenthesisKeyword_4_2()); 
            }
            match(input,KW_RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXbaseConstructorCallAccess().getRightParenthesisKeyword_4_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__Group_4_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_19);
            rule__XbaseConstructorCall__Group_4_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XbaseConstructorCall__Group_4_1_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__Group_4_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXbaseConstructorCallAccess().getArgumentsAssignment_4_1_1_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XbaseConstructorCall__ArgumentsAssignment_4_1_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXbaseConstructorCallAccess().getArgumentsAssignment_4_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__Group_4_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XbaseConstructorCall__Group_4_1_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__Group_4_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXbaseConstructorCallAccess().getGroup_4_1_1_1()); 
            }
            loop205:
            do {
                int alt205=2;
                int LA205_0 = input.LA(1);

                if ( (LA205_0==KW_Comma) ) {
                    alt205=1;
                }


                switch (alt205) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_17);
            	    rule__XbaseConstructorCall__Group_4_1_1_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop205;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getXbaseConstructorCallAccess().getGroup_4_1_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__Group_4_1_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XbaseConstructorCall__Group_4_1_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XbaseConstructorCall__Group_4_1_1_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__Group_4_1_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXbaseConstructorCallAccess().getCommaKeyword_4_1_1_1_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXbaseConstructorCallAccess().getCommaKeyword_4_1_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__Group_4_1_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XbaseConstructorCall__Group_4_1_1_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__Group_4_1_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXbaseConstructorCallAccess().getArgumentsAssignment_4_1_1_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XbaseConstructorCall__ArgumentsAssignment_4_1_1_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXbaseConstructorCallAccess().getArgumentsAssignment_4_1_1_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmFormalParameter__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_68);
            rule__JvmFormalParameter__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__JvmFormalParameter__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmFormalParameter__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmFormalParameterAccess().getExtensionAssignment_0()); 
            }
            int alt206=2;
            int LA206_0 = input.LA(1);

            if ( (LA206_0==KW_Extension) ) {
                alt206=1;
            }
            switch (alt206) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__JvmFormalParameter__ExtensionAssignment_0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmFormalParameterAccess().getExtensionAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmFormalParameter__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_68);
            rule__JvmFormalParameter__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__JvmFormalParameter__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmFormalParameter__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmFormalParameterAccess().getParameterTypeAssignment_1()); 
            }
            int alt207=2;
            switch ( input.LA(1) ) {
                case RULE_ID:
                    {
                    int LA207_1 = input.LA(2);

                    if ( (LA207_1==KW_Package||(LA207_1>=KW_Class && LA207_1<=KW_LessThanSign)||(LA207_1>=KW_Extends && LA207_1<=KW_Implements)||(LA207_1>=KW_Interface && LA207_1<=KW_Annotation)||LA207_1==KW_Throws||(LA207_1>=KW_FullStop && LA207_1<=KW_Transient)||(LA207_1>=KW_Def && LA207_1<=KW_Create)||(LA207_1>=KW_AFTER && LA207_1<=KW_Import)||LA207_1==KW_LeftSquareBracket||LA207_1==RULE_ID) ) {
                        alt207=1;
                    }
                    }
                    break;
                case KW_Create:
                    {
                    int LA207_2 = input.LA(2);

                    if ( (LA207_2==KW_Package||(LA207_2>=KW_Class && LA207_2<=KW_LessThanSign)||(LA207_2>=KW_Extends && LA207_2<=KW_Implements)||(LA207_2>=KW_Interface && LA207_2<=KW_Annotation)||LA207_2==KW_Throws||(LA207_2>=KW_FullStop && LA207_2<=KW_Transient)||(LA207_2>=KW_Def && LA207_2<=KW_Create)||(LA207_2>=KW_AFTER && LA207_2<=KW_Import)||LA207_2==KW_LeftSquareBracket||LA207_2==RULE_ID) ) {
                        alt207=1;
                    }
                    }
                    break;
                case KW_Annotation:
                    {
                    int LA207_3 = input.LA(2);

                    if ( (LA207_3==KW_Package||(LA207_3>=KW_Class && LA207_3<=KW_LessThanSign)||(LA207_3>=KW_Extends && LA207_3<=KW_Implements)||(LA207_3>=KW_Interface && LA207_3<=KW_Annotation)||LA207_3==KW_Throws||(LA207_3>=KW_FullStop && LA207_3<=KW_Transient)||(LA207_3>=KW_Def && LA207_3<=KW_Create)||(LA207_3>=KW_AFTER && LA207_3<=KW_Import)||LA207_3==KW_LeftSquareBracket||LA207_3==RULE_ID) ) {
                        alt207=1;
                    }
                    }
                    break;
                case KW_AFTER:
                    {
                    int LA207_4 = input.LA(2);

                    if ( (LA207_4==KW_Package||(LA207_4>=KW_Class && LA207_4<=KW_LessThanSign)||(LA207_4>=KW_Extends && LA207_4<=KW_Implements)||(LA207_4>=KW_Interface && LA207_4<=KW_Annotation)||LA207_4==KW_Throws||(LA207_4>=KW_FullStop && LA207_4<=KW_Transient)||(LA207_4>=KW_Def && LA207_4<=KW_Create)||(LA207_4>=KW_AFTER && LA207_4<=KW_Import)||LA207_4==KW_LeftSquareBracket||LA207_4==RULE_ID) ) {
                        alt207=1;
                    }
                    }
                    break;
                case KW_BEFORE:
                    {
                    int LA207_5 = input.LA(2);

                    if ( (LA207_5==KW_Package||(LA207_5>=KW_Class && LA207_5<=KW_LessThanSign)||(LA207_5>=KW_Extends && LA207_5<=KW_Implements)||(LA207_5>=KW_Interface && LA207_5<=KW_Annotation)||LA207_5==KW_Throws||(LA207_5>=KW_FullStop && LA207_5<=KW_Transient)||(LA207_5>=KW_Def && LA207_5<=KW_Create)||(LA207_5>=KW_AFTER && LA207_5<=KW_Import)||LA207_5==KW_LeftSquareBracket||LA207_5==RULE_ID) ) {
                        alt207=1;
                    }
                    }
                    break;
                case KW_SEPARATOR:
                    {
                    int LA207_6 = input.LA(2);

                    if ( (LA207_6==KW_Package||(LA207_6>=KW_Class && LA207_6<=KW_LessThanSign)||(LA207_6>=KW_Extends && LA207_6<=KW_Implements)||(LA207_6>=KW_Interface && LA207_6<=KW_Annotation)||LA207_6==KW_Throws||(LA207_6>=KW_FullStop && LA207_6<=KW_Transient)||(LA207_6>=KW_Def && LA207_6<=KW_Create)||(LA207_6>=KW_AFTER && LA207_6<=KW_Import)||LA207_6==KW_LeftSquareBracket||LA207_6==RULE_ID) ) {
                        alt207=1;
                    }
                    }
                    break;
                case KW_LeftParenthesis:
                case KW_EqualsSignGreaterThanSign:
                    {
                    alt207=1;
                    }
                    break;
            }

            switch (alt207) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__JvmFormalParameter__ParameterTypeAssignment_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmFormalParameterAccess().getParameterTypeAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmFormalParameter__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__JvmFormalParameter__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmFormalParameter__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmFormalParameterAccess().getNameAssignment_2()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__JvmFormalParameter__NameAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmFormalParameterAccess().getNameAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__FullJvmFormalParameter__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_28);
            rule__FullJvmFormalParameter__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__FullJvmFormalParameter__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__FullJvmFormalParameter__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getFullJvmFormalParameterAccess().getExtensionAssignment_0()); 
            }
            int alt208=2;
            int LA208_0 = input.LA(1);

            if ( (LA208_0==KW_Extension) ) {
                alt208=1;
            }
            switch (alt208) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__FullJvmFormalParameter__ExtensionAssignment_0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getFullJvmFormalParameterAccess().getExtensionAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__FullJvmFormalParameter__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_69);
            rule__FullJvmFormalParameter__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__FullJvmFormalParameter__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__FullJvmFormalParameter__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getFullJvmFormalParameterAccess().getParameterTypeAssignment_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__FullJvmFormalParameter__ParameterTypeAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getFullJvmFormalParameterAccess().getParameterTypeAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__FullJvmFormalParameter__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__FullJvmFormalParameter__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__FullJvmFormalParameter__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getFullJvmFormalParameterAccess().getNameAssignment_2()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__FullJvmFormalParameter__NameAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getFullJvmFormalParameterAccess().getNameAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__MultiTypeReference__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_75);
            rule__MultiTypeReference__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__MultiTypeReference__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__MultiTypeReference__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMultiTypeReferenceAccess().getJvmTypeReferenceParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMultiTypeReferenceAccess().getJvmTypeReferenceParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__MultiTypeReference__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__MultiTypeReference__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__MultiTypeReference__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMultiTypeReferenceAccess().getGroup_1()); 
            }
            int alt209=2;
            int LA209_0 = input.LA(1);

            if ( (LA209_0==KW_VerticalLine) ) {
                alt209=1;
            }
            switch (alt209) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__MultiTypeReference__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMultiTypeReferenceAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__MultiTypeReference__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_75);
            rule__MultiTypeReference__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__MultiTypeReference__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__MultiTypeReference__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMultiTypeReferenceAccess().getJvmSynonymTypeReferenceReferencesAction_1_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMultiTypeReferenceAccess().getJvmSynonymTypeReferenceReferencesAction_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__MultiTypeReference__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__MultiTypeReference__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__MultiTypeReference__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMultiTypeReferenceAccess().getGroup_1_1()); 
            }
            {
            pushFollow(FOLLOW_76);
            rule__MultiTypeReference__Group_1_1__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMultiTypeReferenceAccess().getGroup_1_1()); 
            }

            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMultiTypeReferenceAccess().getGroup_1_1()); 
            }
            loop210:
            do {
                int alt210=2;
                int LA210_0 = input.LA(1);

                if ( (LA210_0==KW_VerticalLine) ) {
                    alt210=1;
                }


                switch (alt210) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_76);
            	    rule__MultiTypeReference__Group_1_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop210;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getMultiTypeReferenceAccess().getGroup_1_1()); 
            }

            }


            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__MultiTypeReference__Group_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_28);
            rule__MultiTypeReference__Group_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__MultiTypeReference__Group_1_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__MultiTypeReference__Group_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMultiTypeReferenceAccess().getVerticalLineKeyword_1_1_0()); 
            }
            match(input,KW_VerticalLine,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMultiTypeReferenceAccess().getVerticalLineKeyword_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__MultiTypeReference__Group_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__MultiTypeReference__Group_1_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__MultiTypeReference__Group_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMultiTypeReferenceAccess().getReferencesAssignment_1_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__MultiTypeReference__ReferencesAssignment_1_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMultiTypeReferenceAccess().getReferencesAssignment_1_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_77);
            rule__XSwitchExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XSwitchExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSwitchExpressionAccess().getXSwitchExpressionAction_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXSwitchExpressionAccess().getXSwitchExpressionAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_78);
            rule__XSwitchExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XSwitchExpression__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSwitchExpressionAccess().getSwitchKeyword_1()); 
            }
            match(input,KW_Switch,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXSwitchExpressionAccess().getSwitchKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_23);
            rule__XSwitchExpression__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XSwitchExpression__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSwitchExpressionAccess().getAlternatives_2()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XSwitchExpression__Alternatives_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXSwitchExpressionAccess().getAlternatives_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_79);
            rule__XSwitchExpression__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XSwitchExpression__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSwitchExpressionAccess().getLeftCurlyBracketKeyword_3()); 
            }
            match(input,KW_LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXSwitchExpressionAccess().getLeftCurlyBracketKeyword_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_79);
            rule__XSwitchExpression__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XSwitchExpression__Group__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSwitchExpressionAccess().getCasesAssignment_4()); 
            }
            loop211:
            do {
                int alt211=2;
                int LA211_0 = input.LA(1);

                if ( (LA211_0==KW_Comma||(LA211_0>=KW_Annotation && LA211_0<=KW_LeftParenthesis)||LA211_0==KW_EqualsSignGreaterThanSign||(LA211_0>=KW_Create && LA211_0<=KW_SEPARATOR)||LA211_0==KW_Case||LA211_0==RULE_ID) ) {
                    alt211=1;
                }


                switch (alt211) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_80);
            	    rule__XSwitchExpression__CasesAssignment_4();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop211;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getXSwitchExpressionAccess().getCasesAssignment_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_79);
            rule__XSwitchExpression__Group__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XSwitchExpression__Group__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSwitchExpressionAccess().getGroup_5()); 
            }
            int alt212=2;
            int LA212_0 = input.LA(1);

            if ( (LA212_0==KW_Default) ) {
                alt212=1;
            }
            switch (alt212) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XSwitchExpression__Group_5__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXSwitchExpressionAccess().getGroup_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XSwitchExpression__Group__6__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSwitchExpressionAccess().getRightCurlyBracketKeyword_6()); 
            }
            match(input,KW_RightCurlyBracket,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXSwitchExpressionAccess().getRightCurlyBracketKeyword_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group_2_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XSwitchExpression__Group_2_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XSwitchExpression__Group_2_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group_2_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSwitchExpressionAccess().getGroup_2_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XSwitchExpression__Group_2_0_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXSwitchExpressionAccess().getGroup_2_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group_2_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_81);
            rule__XSwitchExpression__Group_2_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XSwitchExpression__Group_2_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group_2_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSwitchExpressionAccess().getSwitchAssignment_2_0_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XSwitchExpression__SwitchAssignment_2_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXSwitchExpressionAccess().getSwitchAssignment_2_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group_2_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XSwitchExpression__Group_2_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group_2_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSwitchExpressionAccess().getRightParenthesisKeyword_2_0_2()); 
            }
            match(input,KW_RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXSwitchExpressionAccess().getRightParenthesisKeyword_2_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group_2_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XSwitchExpression__Group_2_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group_2_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSwitchExpressionAccess().getGroup_2_0_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XSwitchExpression__Group_2_0_0_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXSwitchExpressionAccess().getGroup_2_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group_2_0_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_68);
            rule__XSwitchExpression__Group_2_0_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XSwitchExpression__Group_2_0_0_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group_2_0_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSwitchExpressionAccess().getLeftParenthesisKeyword_2_0_0_0_0()); 
            }
            match(input,KW_LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXSwitchExpressionAccess().getLeftParenthesisKeyword_2_0_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group_2_0_0_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_54);
            rule__XSwitchExpression__Group_2_0_0_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XSwitchExpression__Group_2_0_0_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group_2_0_0_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSwitchExpressionAccess().getDeclaredParamAssignment_2_0_0_0_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XSwitchExpression__DeclaredParamAssignment_2_0_0_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXSwitchExpressionAccess().getDeclaredParamAssignment_2_0_0_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group_2_0_0_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XSwitchExpression__Group_2_0_0_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group_2_0_0_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSwitchExpressionAccess().getColonKeyword_2_0_0_0_2()); 
            }
            match(input,KW_Colon,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXSwitchExpressionAccess().getColonKeyword_2_0_0_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group_2_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_78);
            rule__XSwitchExpression__Group_2_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XSwitchExpression__Group_2_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group_2_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSwitchExpressionAccess().getGroup_2_1_0()); 
            }
            int alt213=2;
            alt213 = dfa213.predict(input);
            switch (alt213) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XSwitchExpression__Group_2_1_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXSwitchExpressionAccess().getGroup_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group_2_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XSwitchExpression__Group_2_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group_2_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSwitchExpressionAccess().getSwitchAssignment_2_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XSwitchExpression__SwitchAssignment_2_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXSwitchExpressionAccess().getSwitchAssignment_2_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group_2_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XSwitchExpression__Group_2_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group_2_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSwitchExpressionAccess().getGroup_2_1_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XSwitchExpression__Group_2_1_0_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXSwitchExpressionAccess().getGroup_2_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group_2_1_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_54);
            rule__XSwitchExpression__Group_2_1_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XSwitchExpression__Group_2_1_0_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group_2_1_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSwitchExpressionAccess().getDeclaredParamAssignment_2_1_0_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XSwitchExpression__DeclaredParamAssignment_2_1_0_0_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXSwitchExpressionAccess().getDeclaredParamAssignment_2_1_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group_2_1_0_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XSwitchExpression__Group_2_1_0_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group_2_1_0_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSwitchExpressionAccess().getColonKeyword_2_1_0_0_1()); 
            }
            match(input,KW_Colon,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXSwitchExpressionAccess().getColonKeyword_2_1_0_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group_5__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_54);
            rule__XSwitchExpression__Group_5__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XSwitchExpression__Group_5__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group_5__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSwitchExpressionAccess().getDefaultKeyword_5_0()); 
            }
            match(input,KW_Default,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXSwitchExpressionAccess().getDefaultKeyword_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group_5__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XSwitchExpression__Group_5__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XSwitchExpression__Group_5__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group_5__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSwitchExpressionAccess().getColonKeyword_5_1()); 
            }
            match(input,KW_Colon,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXSwitchExpressionAccess().getColonKeyword_5_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group_5__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XSwitchExpression__Group_5__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__Group_5__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSwitchExpressionAccess().getDefaultAssignment_5_2()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XSwitchExpression__DefaultAssignment_5_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXSwitchExpressionAccess().getDefaultAssignment_5_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCasePart__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_82);
            rule__XCasePart__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XCasePart__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCasePart__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXCasePartAccess().getXCasePartAction_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXCasePartAccess().getXCasePartAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCasePart__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_82);
            rule__XCasePart__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XCasePart__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCasePart__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXCasePartAccess().getTypeGuardAssignment_1()); 
            }
            int alt214=2;
            int LA214_0 = input.LA(1);

            if ( ((LA214_0>=KW_Annotation && LA214_0<=KW_LeftParenthesis)||LA214_0==KW_EqualsSignGreaterThanSign||LA214_0==KW_Create||(LA214_0>=KW_AFTER && LA214_0<=KW_SEPARATOR)||LA214_0==RULE_ID) ) {
                alt214=1;
            }
            switch (alt214) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XCasePart__TypeGuardAssignment_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXCasePartAccess().getTypeGuardAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCasePart__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_82);
            rule__XCasePart__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XCasePart__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCasePart__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXCasePartAccess().getGroup_2()); 
            }
            int alt215=2;
            int LA215_0 = input.LA(1);

            if ( (LA215_0==KW_Case) ) {
                alt215=1;
            }
            switch (alt215) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XCasePart__Group_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXCasePartAccess().getGroup_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCasePart__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XCasePart__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCasePart__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXCasePartAccess().getAlternatives_3()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XCasePart__Alternatives_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXCasePartAccess().getAlternatives_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCasePart__Group_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XCasePart__Group_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XCasePart__Group_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCasePart__Group_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXCasePartAccess().getCaseKeyword_2_0()); 
            }
            match(input,KW_Case,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXCasePartAccess().getCaseKeyword_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCasePart__Group_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XCasePart__Group_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCasePart__Group_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXCasePartAccess().getCaseAssignment_2_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XCasePart__CaseAssignment_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXCasePartAccess().getCaseAssignment_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCasePart__Group_3_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XCasePart__Group_3_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XCasePart__Group_3_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCasePart__Group_3_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXCasePartAccess().getColonKeyword_3_0_0()); 
            }
            match(input,KW_Colon,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXCasePartAccess().getColonKeyword_3_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCasePart__Group_3_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XCasePart__Group_3_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCasePart__Group_3_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXCasePartAccess().getThenAssignment_3_0_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XCasePart__ThenAssignment_3_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXCasePartAccess().getThenAssignment_3_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__SimpleStringLiteral__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_83);
            rule__SimpleStringLiteral__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__SimpleStringLiteral__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__SimpleStringLiteral__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getSimpleStringLiteralAccess().getXStringLiteralAction_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getSimpleStringLiteralAccess().getXStringLiteralAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__SimpleStringLiteral__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__SimpleStringLiteral__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__SimpleStringLiteral__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getSimpleStringLiteralAccess().getValueAssignment_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__SimpleStringLiteral__ValueAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getSimpleStringLiteralAccess().getValueAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichString__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_84);
            rule__RichString__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RichString__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichString__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringAccess().getRichStringAction_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringAccess().getRichStringAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichString__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__RichString__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichString__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringAccess().getAlternatives_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__RichString__Alternatives_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringAccess().getAlternatives_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichString__Group_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_85);
            rule__RichString__Group_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RichString__Group_1_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichString__Group_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringAccess().getExpressionsAssignment_1_1_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__RichString__ExpressionsAssignment_1_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringAccess().getExpressionsAssignment_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichString__Group_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_85);
            rule__RichString__Group_1_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RichString__Group_1_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichString__Group_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringAccess().getExpressionsAssignment_1_1_1()); 
            }
            int alt216=2;
            int LA216_0 = input.LA(1);

            if ( (LA216_0==KW_Package||(LA216_0>=KW_Class && LA216_0<=KW_LessThanSign)||(LA216_0>=KW_Extends && LA216_0<=KW_LeftCurlyBracket)||(LA216_0>=KW_Interface && LA216_0<=KW_LeftParenthesis)||(LA216_0>=KW_Extension && LA216_0<=KW_New)||(LA216_0>=KW_Public && LA216_0<=KW_Create)||(LA216_0>=KW_AFTER && LA216_0<=KW_Import)||LA216_0==KW_Try||LA216_0==KW_Switch||LA216_0==KW_FOR||LA216_0==KW_IF||(LA216_0>=KW_NumberSign && LA216_0<=KW_LeftSquareBracket)||(LA216_0>=KW_PlusSign && LA216_0<=KW_HyphenMinus)||LA216_0==KW_ExclamationMark||LA216_0==KW_If||(LA216_0>=KW_For && LA216_0<=KW_Return)||(LA216_0>=RULE_ID && LA216_0<=RULE_RICH_TEXT_START)) ) {
                alt216=1;
            }
            switch (alt216) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__RichString__ExpressionsAssignment_1_1_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringAccess().getExpressionsAssignment_1_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichString__Group_1_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_85);
            rule__RichString__Group_1_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RichString__Group_1_1__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichString__Group_1_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringAccess().getGroup_1_1_2()); 
            }
            loop217:
            do {
                int alt217=2;
                int LA217_0 = input.LA(1);

                if ( ((LA217_0>=RULE_RICH_TEXT_INBETWEEN && LA217_0<=RULE_COMMENT_RICH_TEXT_INBETWEEN)) ) {
                    alt217=1;
                }


                switch (alt217) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_86);
            	    rule__RichString__Group_1_1_2__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop217;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringAccess().getGroup_1_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichString__Group_1_1__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__RichString__Group_1_1__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichString__Group_1_1__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringAccess().getExpressionsAssignment_1_1_3()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__RichString__ExpressionsAssignment_1_1_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringAccess().getExpressionsAssignment_1_1_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichString__Group_1_1_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_87);
            rule__RichString__Group_1_1_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RichString__Group_1_1_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichString__Group_1_1_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringAccess().getExpressionsAssignment_1_1_2_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__RichString__ExpressionsAssignment_1_1_2_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringAccess().getExpressionsAssignment_1_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichString__Group_1_1_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__RichString__Group_1_1_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichString__Group_1_1_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringAccess().getExpressionsAssignment_1_1_2_1()); 
            }
            int alt218=2;
            int LA218_0 = input.LA(1);

            if ( (LA218_0==KW_Package||(LA218_0>=KW_Class && LA218_0<=KW_LessThanSign)||(LA218_0>=KW_Extends && LA218_0<=KW_LeftCurlyBracket)||(LA218_0>=KW_Interface && LA218_0<=KW_LeftParenthesis)||(LA218_0>=KW_Extension && LA218_0<=KW_New)||(LA218_0>=KW_Public && LA218_0<=KW_Create)||(LA218_0>=KW_AFTER && LA218_0<=KW_Import)||LA218_0==KW_Try||LA218_0==KW_Switch||LA218_0==KW_FOR||LA218_0==KW_IF||(LA218_0>=KW_NumberSign && LA218_0<=KW_LeftSquareBracket)||(LA218_0>=KW_PlusSign && LA218_0<=KW_HyphenMinus)||LA218_0==KW_ExclamationMark||LA218_0==KW_If||(LA218_0>=KW_For && LA218_0<=KW_Return)||(LA218_0>=RULE_ID && LA218_0<=RULE_RICH_TEXT_START)) ) {
                alt218=1;
            }
            switch (alt218) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__RichString__ExpressionsAssignment_1_1_2_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringAccess().getExpressionsAssignment_1_1_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringLiteral__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_88);
            rule__RichStringLiteral__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RichStringLiteral__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringLiteral__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringLiteralAccess().getRichStringLiteralAction_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringLiteralAccess().getRichStringLiteralAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringLiteral__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__RichStringLiteral__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringLiteral__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringLiteralAccess().getValueAssignment_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__RichStringLiteral__ValueAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringLiteralAccess().getValueAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringLiteralStart__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_84);
            rule__RichStringLiteralStart__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RichStringLiteralStart__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringLiteralStart__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringLiteralStartAccess().getRichStringLiteralAction_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringLiteralStartAccess().getRichStringLiteralAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringLiteralStart__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__RichStringLiteralStart__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringLiteralStart__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringLiteralStartAccess().getValueAssignment_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__RichStringLiteralStart__ValueAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringLiteralStartAccess().getValueAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringLiteralInbetween__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_89);
            rule__RichStringLiteralInbetween__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RichStringLiteralInbetween__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringLiteralInbetween__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringLiteralInbetweenAccess().getRichStringLiteralAction_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringLiteralInbetweenAccess().getRichStringLiteralAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringLiteralInbetween__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__RichStringLiteralInbetween__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringLiteralInbetween__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringLiteralInbetweenAccess().getAlternatives_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__RichStringLiteralInbetween__Alternatives_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringLiteralInbetweenAccess().getAlternatives_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringLiteralEnd__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_85);
            rule__RichStringLiteralEnd__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RichStringLiteralEnd__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringLiteralEnd__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringLiteralEndAccess().getRichStringLiteralAction_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringLiteralEndAccess().getRichStringLiteralAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringLiteralEnd__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__RichStringLiteralEnd__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringLiteralEnd__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringLiteralEndAccess().getAlternatives_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__RichStringLiteralEnd__Alternatives_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringLiteralEndAccess().getAlternatives_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__InternalRichString__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_89);
            rule__InternalRichString__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__InternalRichString__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__InternalRichString__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getInternalRichStringAccess().getRichStringAction_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getInternalRichStringAccess().getRichStringAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__InternalRichString__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__InternalRichString__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__InternalRichString__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getInternalRichStringAccess().getGroup_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__InternalRichString__Group_1__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getInternalRichStringAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__InternalRichString__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_90);
            rule__InternalRichString__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__InternalRichString__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__InternalRichString__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getInternalRichStringAccess().getExpressionsAssignment_1_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__InternalRichString__ExpressionsAssignment_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getInternalRichStringAccess().getExpressionsAssignment_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__InternalRichString__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__InternalRichString__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__InternalRichString__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getInternalRichStringAccess().getGroup_1_1()); 
            }
            loop219:
            do {
                int alt219=2;
                int LA219_0 = input.LA(1);

                if ( (LA219_0==KW_Package||(LA219_0>=KW_Class && LA219_0<=KW_LessThanSign)||(LA219_0>=KW_Extends && LA219_0<=KW_LeftCurlyBracket)||(LA219_0>=KW_Interface && LA219_0<=KW_LeftParenthesis)||(LA219_0>=KW_Extension && LA219_0<=KW_New)||(LA219_0>=KW_Public && LA219_0<=KW_Create)||(LA219_0>=KW_AFTER && LA219_0<=KW_Import)||LA219_0==KW_Try||LA219_0==KW_Switch||LA219_0==KW_FOR||LA219_0==KW_IF||(LA219_0>=KW_NumberSign && LA219_0<=KW_LeftSquareBracket)||(LA219_0>=KW_PlusSign && LA219_0<=KW_HyphenMinus)||LA219_0==KW_ExclamationMark||LA219_0==KW_If||(LA219_0>=KW_For && LA219_0<=KW_Return)||(LA219_0>=RULE_ID && LA219_0<=RULE_COMMENT_RICH_TEXT_INBETWEEN)) ) {
                    alt219=1;
                }


                switch (alt219) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_91);
            	    rule__InternalRichString__Group_1_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop219;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getInternalRichStringAccess().getGroup_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__InternalRichString__Group_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_90);
            rule__InternalRichString__Group_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__InternalRichString__Group_1_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__InternalRichString__Group_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getInternalRichStringAccess().getExpressionsAssignment_1_1_0()); 
            }
            int alt220=2;
            int LA220_0 = input.LA(1);

            if ( (LA220_0==KW_Package||(LA220_0>=KW_Class && LA220_0<=KW_LessThanSign)||(LA220_0>=KW_Extends && LA220_0<=KW_LeftCurlyBracket)||(LA220_0>=KW_Interface && LA220_0<=KW_LeftParenthesis)||(LA220_0>=KW_Extension && LA220_0<=KW_New)||(LA220_0>=KW_Public && LA220_0<=KW_Create)||(LA220_0>=KW_AFTER && LA220_0<=KW_Import)||LA220_0==KW_Try||LA220_0==KW_Switch||LA220_0==KW_FOR||LA220_0==KW_IF||(LA220_0>=KW_NumberSign && LA220_0<=KW_LeftSquareBracket)||(LA220_0>=KW_PlusSign && LA220_0<=KW_HyphenMinus)||LA220_0==KW_ExclamationMark||LA220_0==KW_If||(LA220_0>=KW_For && LA220_0<=KW_Return)||(LA220_0>=RULE_ID && LA220_0<=RULE_RICH_TEXT_START)) ) {
                alt220=1;
            }
            switch (alt220) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__InternalRichString__ExpressionsAssignment_1_1_0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getInternalRichStringAccess().getExpressionsAssignment_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__InternalRichString__Group_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__InternalRichString__Group_1_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__InternalRichString__Group_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getInternalRichStringAccess().getExpressionsAssignment_1_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__InternalRichString__ExpressionsAssignment_1_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getInternalRichStringAccess().getExpressionsAssignment_1_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringForLoop__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_92);
            rule__RichStringForLoop__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RichStringForLoop__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringForLoop__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringForLoopAccess().getRichStringForLoopAction_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringForLoopAccess().getRichStringForLoopAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringForLoop__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_68);
            rule__RichStringForLoop__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RichStringForLoop__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringForLoop__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringForLoopAccess().getFORKeyword_1()); 
            }
            match(input,KW_FOR,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringForLoopAccess().getFORKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringForLoop__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_54);
            rule__RichStringForLoop__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RichStringForLoop__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringForLoop__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringForLoopAccess().getDeclaredParamAssignment_2()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__RichStringForLoop__DeclaredParamAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringForLoopAccess().getDeclaredParamAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringForLoop__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__RichStringForLoop__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RichStringForLoop__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringForLoop__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringForLoopAccess().getColonKeyword_3()); 
            }
            match(input,KW_Colon,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringForLoopAccess().getColonKeyword_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringForLoop__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_93);
            rule__RichStringForLoop__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RichStringForLoop__Group__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringForLoop__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringForLoopAccess().getForExpressionAssignment_4()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__RichStringForLoop__ForExpressionAssignment_4();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringForLoopAccess().getForExpressionAssignment_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringForLoop__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_93);
            rule__RichStringForLoop__Group__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RichStringForLoop__Group__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringForLoop__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringForLoopAccess().getGroup_5()); 
            }
            int alt221=2;
            int LA221_0 = input.LA(1);

            if ( (LA221_0==KW_BEFORE) ) {
                alt221=1;
            }
            switch (alt221) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__RichStringForLoop__Group_5__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringForLoopAccess().getGroup_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringForLoop__Group__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_93);
            rule__RichStringForLoop__Group__6__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RichStringForLoop__Group__7();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringForLoop__Group__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringForLoopAccess().getGroup_6()); 
            }
            int alt222=2;
            int LA222_0 = input.LA(1);

            if ( (LA222_0==KW_SEPARATOR) ) {
                alt222=1;
            }
            switch (alt222) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__RichStringForLoop__Group_6__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringForLoopAccess().getGroup_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringForLoop__Group__7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_93);
            rule__RichStringForLoop__Group__7__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RichStringForLoop__Group__8();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringForLoop__Group__7__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringForLoopAccess().getGroup_7()); 
            }
            int alt223=2;
            int LA223_0 = input.LA(1);

            if ( (LA223_0==KW_AFTER) ) {
                alt223=1;
            }
            switch (alt223) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__RichStringForLoop__Group_7__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringForLoopAccess().getGroup_7()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringForLoop__Group__8() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_94);
            rule__RichStringForLoop__Group__8__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RichStringForLoop__Group__9();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringForLoop__Group__8__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringForLoopAccess().getEachExpressionAssignment_8()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__RichStringForLoop__EachExpressionAssignment_8();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringForLoopAccess().getEachExpressionAssignment_8()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringForLoop__Group__9() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__RichStringForLoop__Group__9__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringForLoop__Group__9__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringForLoopAccess().getENDFORKeyword_9()); 
            }
            match(input,KW_ENDFOR,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringForLoopAccess().getENDFORKeyword_9()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringForLoop__Group_5__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__RichStringForLoop__Group_5__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RichStringForLoop__Group_5__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringForLoop__Group_5__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringForLoopAccess().getBEFOREKeyword_5_0()); 
            }
            match(input,KW_BEFORE,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringForLoopAccess().getBEFOREKeyword_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringForLoop__Group_5__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__RichStringForLoop__Group_5__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringForLoop__Group_5__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringForLoopAccess().getBeforeAssignment_5_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__RichStringForLoop__BeforeAssignment_5_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringForLoopAccess().getBeforeAssignment_5_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringForLoop__Group_6__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__RichStringForLoop__Group_6__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RichStringForLoop__Group_6__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringForLoop__Group_6__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringForLoopAccess().getSEPARATORKeyword_6_0()); 
            }
            match(input,KW_SEPARATOR,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringForLoopAccess().getSEPARATORKeyword_6_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringForLoop__Group_6__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__RichStringForLoop__Group_6__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringForLoop__Group_6__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringForLoopAccess().getSeparatorAssignment_6_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__RichStringForLoop__SeparatorAssignment_6_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringForLoopAccess().getSeparatorAssignment_6_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringForLoop__Group_7__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__RichStringForLoop__Group_7__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RichStringForLoop__Group_7__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringForLoop__Group_7__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringForLoopAccess().getAFTERKeyword_7_0()); 
            }
            match(input,KW_AFTER,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringForLoopAccess().getAFTERKeyword_7_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringForLoop__Group_7__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__RichStringForLoop__Group_7__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringForLoop__Group_7__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringForLoopAccess().getAfterAssignment_7_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__RichStringForLoop__AfterAssignment_7_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringForLoopAccess().getAfterAssignment_7_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringIf__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_87);
            rule__RichStringIf__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RichStringIf__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringIf__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringIfAccess().getRichStringIfAction_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringIfAccess().getRichStringIfAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringIf__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__RichStringIf__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RichStringIf__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringIf__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringIfAccess().getIFKeyword_1()); 
            }
            match(input,KW_IF,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringIfAccess().getIFKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringIf__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_93);
            rule__RichStringIf__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RichStringIf__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringIf__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringIfAccess().getIfAssignment_2()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__RichStringIf__IfAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringIfAccess().getIfAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringIf__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_95);
            rule__RichStringIf__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RichStringIf__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringIf__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringIfAccess().getThenAssignment_3()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__RichStringIf__ThenAssignment_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringIfAccess().getThenAssignment_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringIf__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_95);
            rule__RichStringIf__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RichStringIf__Group__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringIf__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringIfAccess().getElseIfsAssignment_4()); 
            }
            loop224:
            do {
                int alt224=2;
                int LA224_0 = input.LA(1);

                if ( (LA224_0==KW_ELSEIF) ) {
                    alt224=1;
                }


                switch (alt224) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_96);
            	    rule__RichStringIf__ElseIfsAssignment_4();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop224;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringIfAccess().getElseIfsAssignment_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringIf__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_95);
            rule__RichStringIf__Group__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RichStringIf__Group__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringIf__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringIfAccess().getGroup_5()); 
            }
            int alt225=2;
            int LA225_0 = input.LA(1);

            if ( (LA225_0==KW_ELSE) ) {
                alt225=1;
            }
            switch (alt225) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__RichStringIf__Group_5__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringIfAccess().getGroup_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringIf__Group__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__RichStringIf__Group__6__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringIf__Group__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringIfAccess().getENDIFKeyword_6()); 
            }
            match(input,KW_ENDIF,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringIfAccess().getENDIFKeyword_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringIf__Group_5__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_93);
            rule__RichStringIf__Group_5__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RichStringIf__Group_5__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringIf__Group_5__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringIfAccess().getELSEKeyword_5_0()); 
            }
            match(input,KW_ELSE,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringIfAccess().getELSEKeyword_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringIf__Group_5__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__RichStringIf__Group_5__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringIf__Group_5__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringIfAccess().getElseAssignment_5_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__RichStringIf__ElseAssignment_5_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringIfAccess().getElseAssignment_5_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringElseIf__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__RichStringElseIf__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RichStringElseIf__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringElseIf__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringElseIfAccess().getELSEIFKeyword_0()); 
            }
            match(input,KW_ELSEIF,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringElseIfAccess().getELSEIFKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringElseIf__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_93);
            rule__RichStringElseIf__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__RichStringElseIf__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringElseIf__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringElseIfAccess().getIfAssignment_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__RichStringElseIf__IfAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringElseIfAccess().getIfAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringElseIf__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__RichStringElseIf__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringElseIf__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringElseIfAccess().getThenAssignment_2()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__RichStringElseIf__ThenAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringElseIfAccess().getThenAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotation__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_56);
            rule__XAnnotation__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XAnnotation__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotation__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationAccess().getXAnnotationAction_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationAccess().getXAnnotationAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotation__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__XAnnotation__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XAnnotation__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotation__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationAccess().getCommercialAtKeyword_1()); 
            }
            match(input,KW_CommercialAt,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationAccess().getCommercialAtKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotation__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_43);
            rule__XAnnotation__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XAnnotation__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotation__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationAccess().getAnnotationTypeAssignment_2()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XAnnotation__AnnotationTypeAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationAccess().getAnnotationTypeAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotation__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XAnnotation__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotation__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationAccess().getGroup_3()); 
            }
            int alt226=2;
            alt226 = dfa226.predict(input);
            switch (alt226) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XAnnotation__Group_3__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationAccess().getGroup_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotation__Group_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_97);
            rule__XAnnotation__Group_3__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XAnnotation__Group_3__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotation__Group_3__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationAccess().getLeftParenthesisKeyword_3_0()); 
            }
            {
            match(input,KW_LeftParenthesis,FOLLOW_2); if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationAccess().getLeftParenthesisKeyword_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotation__Group_3__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_97);
            rule__XAnnotation__Group_3__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XAnnotation__Group_3__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotation__Group_3__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationAccess().getAlternatives_3_1()); 
            }
            int alt227=2;
            int LA227_0 = input.LA(1);

            if ( (LA227_0==KW_Package||(LA227_0>=KW_Class && LA227_0<=KW_LessThanSign)||(LA227_0>=KW_Extends && LA227_0<=KW_LeftCurlyBracket)||(LA227_0>=KW_Interface && LA227_0<=KW_LeftParenthesis)||(LA227_0>=KW_Extension && LA227_0<=KW_New)||(LA227_0>=KW_Public && LA227_0<=KW_Transient)||(LA227_0>=KW_Def && LA227_0<=KW_Create)||(LA227_0>=KW_AFTER && LA227_0<=KW_Import)||LA227_0==KW_Try||LA227_0==KW_Switch||(LA227_0>=KW_CommercialAt && LA227_0<=KW_LeftSquareBracket)||(LA227_0>=KW_PlusSign && LA227_0<=KW_HyphenMinus)||LA227_0==KW_ExclamationMark||LA227_0==KW_If||(LA227_0>=KW_For && LA227_0<=KW_Return)||(LA227_0>=RULE_ID && LA227_0<=RULE_RICH_TEXT_START)) ) {
                alt227=1;
            }
            switch (alt227) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XAnnotation__Alternatives_3_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationAccess().getAlternatives_3_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotation__Group_3__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XAnnotation__Group_3__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotation__Group_3__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationAccess().getRightParenthesisKeyword_3_2()); 
            }
            match(input,KW_RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationAccess().getRightParenthesisKeyword_3_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotation__Group_3_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_19);
            rule__XAnnotation__Group_3_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XAnnotation__Group_3_1_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotation__Group_3_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationAccess().getElementValuePairsAssignment_3_1_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XAnnotation__ElementValuePairsAssignment_3_1_0_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationAccess().getElementValuePairsAssignment_3_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotation__Group_3_1_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XAnnotation__Group_3_1_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotation__Group_3_1_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationAccess().getGroup_3_1_0_1()); 
            }
            loop228:
            do {
                int alt228=2;
                int LA228_0 = input.LA(1);

                if ( (LA228_0==KW_Comma) ) {
                    alt228=1;
                }


                switch (alt228) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_17);
            	    rule__XAnnotation__Group_3_1_0_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop228;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationAccess().getGroup_3_1_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotation__Group_3_1_0_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__XAnnotation__Group_3_1_0_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XAnnotation__Group_3_1_0_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotation__Group_3_1_0_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationAccess().getCommaKeyword_3_1_0_1_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationAccess().getCommaKeyword_3_1_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotation__Group_3_1_0_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XAnnotation__Group_3_1_0_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotation__Group_3_1_0_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationAccess().getElementValuePairsAssignment_3_1_0_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XAnnotation__ElementValuePairsAssignment_3_1_0_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationAccess().getElementValuePairsAssignment_3_1_0_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValuePair__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XAnnotationElementValuePair__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValuePair__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValuePair__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValuePairAccess().getGroup_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValuePair__Group_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValuePairAccess().getGroup_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValuePair__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValuePair__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValuePair__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValuePairAccess().getValueAssignment_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValuePair__ValueAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValuePairAccess().getValueAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValuePair__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValuePair__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValuePair__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValuePairAccess().getGroup_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValuePair__Group_0_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValuePairAccess().getGroup_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValuePair__Group_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_58);
            rule__XAnnotationElementValuePair__Group_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValuePair__Group_0_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValuePair__Group_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValuePairAccess().getElementAssignment_0_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValuePair__ElementAssignment_0_0_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValuePairAccess().getElementAssignment_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValuePair__Group_0_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValuePair__Group_0_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValuePair__Group_0_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValuePairAccess().getEqualsSignKeyword_0_0_1()); 
            }
            match(input,KW_EqualsSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValuePairAccess().getEqualsSignKeyword_0_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValueOrCommaList__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_98);
            rule__XAnnotationElementValueOrCommaList__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValueOrCommaList__Group_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValueOrCommaList__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getGroup_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValueOrCommaList__Group_0_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getGroup_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValueOrCommaList__Group_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_98);
            rule__XAnnotationElementValueOrCommaList__Group_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValueOrCommaList__Group_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValueOrCommaList__Group_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getGroup_0_1()); 
            }
            int alt229=2;
            int LA229_0 = input.LA(1);

            if ( (LA229_0==KW_Package||(LA229_0>=KW_Class && LA229_0<=KW_LessThanSign)||(LA229_0>=KW_Extends && LA229_0<=KW_LeftCurlyBracket)||(LA229_0>=KW_Interface && LA229_0<=KW_LeftParenthesis)||(LA229_0>=KW_Extension && LA229_0<=KW_New)||(LA229_0>=KW_Public && LA229_0<=KW_Transient)||(LA229_0>=KW_Def && LA229_0<=KW_Create)||(LA229_0>=KW_AFTER && LA229_0<=KW_Import)||LA229_0==KW_Try||LA229_0==KW_Switch||(LA229_0>=KW_CommercialAt && LA229_0<=KW_LeftSquareBracket)||(LA229_0>=KW_PlusSign && LA229_0<=KW_HyphenMinus)||LA229_0==KW_ExclamationMark||LA229_0==KW_If||(LA229_0>=KW_For && LA229_0<=KW_Return)||(LA229_0>=RULE_ID && LA229_0<=RULE_RICH_TEXT_START)) ) {
                alt229=1;
            }
            switch (alt229) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XAnnotationElementValueOrCommaList__Group_0_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getGroup_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValueOrCommaList__Group_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValueOrCommaList__Group_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValueOrCommaList__Group_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getRightSquareBracketKeyword_0_2()); 
            }
            match(input,KW_RightSquareBracket,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getRightSquareBracketKeyword_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValueOrCommaList__Group_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValueOrCommaList__Group_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValueOrCommaList__Group_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getGroup_0_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValueOrCommaList__Group_0_0_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getGroup_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValueOrCommaList__Group_0_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_99);
            rule__XAnnotationElementValueOrCommaList__Group_0_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValueOrCommaList__Group_0_0_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValueOrCommaList__Group_0_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getXListLiteralAction_0_0_0_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getXListLiteralAction_0_0_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValueOrCommaList__Group_0_0_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_48);
            rule__XAnnotationElementValueOrCommaList__Group_0_0_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValueOrCommaList__Group_0_0_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValueOrCommaList__Group_0_0_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getNumberSignKeyword_0_0_0_1()); 
            }
            match(input,KW_NumberSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getNumberSignKeyword_0_0_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValueOrCommaList__Group_0_0_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValueOrCommaList__Group_0_0_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValueOrCommaList__Group_0_0_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getLeftSquareBracketKeyword_0_0_0_2()); 
            }
            match(input,KW_LeftSquareBracket,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getLeftSquareBracketKeyword_0_0_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValueOrCommaList__Group_0_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_19);
            rule__XAnnotationElementValueOrCommaList__Group_0_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValueOrCommaList__Group_0_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValueOrCommaList__Group_0_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getElementsAssignment_0_1_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValueOrCommaList__ElementsAssignment_0_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getElementsAssignment_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValueOrCommaList__Group_0_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValueOrCommaList__Group_0_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValueOrCommaList__Group_0_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getGroup_0_1_1()); 
            }
            loop230:
            do {
                int alt230=2;
                int LA230_0 = input.LA(1);

                if ( (LA230_0==KW_Comma) ) {
                    alt230=1;
                }


                switch (alt230) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_17);
            	    rule__XAnnotationElementValueOrCommaList__Group_0_1_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop230;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getGroup_0_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValueOrCommaList__Group_0_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XAnnotationElementValueOrCommaList__Group_0_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValueOrCommaList__Group_0_1_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValueOrCommaList__Group_0_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getCommaKeyword_0_1_1_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getCommaKeyword_0_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValueOrCommaList__Group_0_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValueOrCommaList__Group_0_1_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValueOrCommaList__Group_0_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getElementsAssignment_0_1_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValueOrCommaList__ElementsAssignment_0_1_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getElementsAssignment_0_1_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValueOrCommaList__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_19);
            rule__XAnnotationElementValueOrCommaList__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValueOrCommaList__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValueOrCommaList__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getXAnnotationOrExpressionParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXAnnotationOrExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getXAnnotationOrExpressionParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValueOrCommaList__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValueOrCommaList__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValueOrCommaList__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getGroup_1_1()); 
            }
            int alt231=2;
            int LA231_0 = input.LA(1);

            if ( (LA231_0==KW_Comma) ) {
                alt231=1;
            }
            switch (alt231) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XAnnotationElementValueOrCommaList__Group_1_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getGroup_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValueOrCommaList__Group_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_19);
            rule__XAnnotationElementValueOrCommaList__Group_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValueOrCommaList__Group_1_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValueOrCommaList__Group_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getXListLiteralElementsAction_1_1_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getXListLiteralElementsAction_1_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValueOrCommaList__Group_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValueOrCommaList__Group_1_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValueOrCommaList__Group_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getGroup_1_1_1()); 
            }
            {
            pushFollow(FOLLOW_17);
            rule__XAnnotationElementValueOrCommaList__Group_1_1_1__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getGroup_1_1_1()); 
            }

            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getGroup_1_1_1()); 
            }
            loop232:
            do {
                int alt232=2;
                int LA232_0 = input.LA(1);

                if ( (LA232_0==KW_Comma) ) {
                    alt232=1;
                }


                switch (alt232) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_17);
            	    rule__XAnnotationElementValueOrCommaList__Group_1_1_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop232;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getGroup_1_1_1()); 
            }

            }


            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValueOrCommaList__Group_1_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XAnnotationElementValueOrCommaList__Group_1_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValueOrCommaList__Group_1_1_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValueOrCommaList__Group_1_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getCommaKeyword_1_1_1_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getCommaKeyword_1_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValueOrCommaList__Group_1_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValueOrCommaList__Group_1_1_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValueOrCommaList__Group_1_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getElementsAssignment_1_1_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValueOrCommaList__ElementsAssignment_1_1_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getElementsAssignment_1_1_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValue__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_98);
            rule__XAnnotationElementValue__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValue__Group_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValue__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValueAccess().getGroup_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValue__Group_0_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValueAccess().getGroup_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValue__Group_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_98);
            rule__XAnnotationElementValue__Group_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValue__Group_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValue__Group_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValueAccess().getGroup_0_1()); 
            }
            int alt233=2;
            int LA233_0 = input.LA(1);

            if ( (LA233_0==KW_Package||(LA233_0>=KW_Class && LA233_0<=KW_LessThanSign)||(LA233_0>=KW_Extends && LA233_0<=KW_LeftCurlyBracket)||(LA233_0>=KW_Interface && LA233_0<=KW_LeftParenthesis)||(LA233_0>=KW_Extension && LA233_0<=KW_New)||(LA233_0>=KW_Public && LA233_0<=KW_Transient)||(LA233_0>=KW_Def && LA233_0<=KW_Create)||(LA233_0>=KW_AFTER && LA233_0<=KW_Import)||LA233_0==KW_Try||LA233_0==KW_Switch||(LA233_0>=KW_CommercialAt && LA233_0<=KW_LeftSquareBracket)||(LA233_0>=KW_PlusSign && LA233_0<=KW_HyphenMinus)||LA233_0==KW_ExclamationMark||LA233_0==KW_If||(LA233_0>=KW_For && LA233_0<=KW_Return)||(LA233_0>=RULE_ID && LA233_0<=RULE_RICH_TEXT_START)) ) {
                alt233=1;
            }
            switch (alt233) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XAnnotationElementValue__Group_0_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValueAccess().getGroup_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValue__Group_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValue__Group_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValue__Group_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValueAccess().getRightSquareBracketKeyword_0_2()); 
            }
            match(input,KW_RightSquareBracket,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValueAccess().getRightSquareBracketKeyword_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValue__Group_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValue__Group_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValue__Group_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValueAccess().getGroup_0_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValue__Group_0_0_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValueAccess().getGroup_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValue__Group_0_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_99);
            rule__XAnnotationElementValue__Group_0_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValue__Group_0_0_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValue__Group_0_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValueAccess().getXListLiteralAction_0_0_0_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValueAccess().getXListLiteralAction_0_0_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValue__Group_0_0_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_48);
            rule__XAnnotationElementValue__Group_0_0_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValue__Group_0_0_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValue__Group_0_0_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValueAccess().getNumberSignKeyword_0_0_0_1()); 
            }
            match(input,KW_NumberSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValueAccess().getNumberSignKeyword_0_0_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValue__Group_0_0_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValue__Group_0_0_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValue__Group_0_0_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValueAccess().getLeftSquareBracketKeyword_0_0_0_2()); 
            }
            match(input,KW_LeftSquareBracket,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValueAccess().getLeftSquareBracketKeyword_0_0_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValue__Group_0_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_19);
            rule__XAnnotationElementValue__Group_0_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValue__Group_0_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValue__Group_0_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValueAccess().getElementsAssignment_0_1_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValue__ElementsAssignment_0_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValueAccess().getElementsAssignment_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValue__Group_0_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValue__Group_0_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValue__Group_0_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValueAccess().getGroup_0_1_1()); 
            }
            loop234:
            do {
                int alt234=2;
                int LA234_0 = input.LA(1);

                if ( (LA234_0==KW_Comma) ) {
                    alt234=1;
                }


                switch (alt234) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_17);
            	    rule__XAnnotationElementValue__Group_0_1_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop234;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValueAccess().getGroup_0_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValue__Group_0_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XAnnotationElementValue__Group_0_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValue__Group_0_1_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValue__Group_0_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValueAccess().getCommaKeyword_0_1_1_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValueAccess().getCommaKeyword_0_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValue__Group_0_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValue__Group_0_1_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValue__Group_0_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValueAccess().getElementsAssignment_0_1_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XAnnotationElementValue__ElementsAssignment_0_1_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValueAccess().getElementsAssignment_0_1_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpMultiAssign__Group_5__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_50);
            rule__OpMultiAssign__Group_5__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__OpMultiAssign__Group_5__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpMultiAssign__Group_5__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOpMultiAssignAccess().getLessThanSignKeyword_5_0()); 
            }
            match(input,KW_LessThanSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getOpMultiAssignAccess().getLessThanSignKeyword_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpMultiAssign__Group_5__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_58);
            rule__OpMultiAssign__Group_5__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__OpMultiAssign__Group_5__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpMultiAssign__Group_5__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOpMultiAssignAccess().getLessThanSignKeyword_5_1()); 
            }
            match(input,KW_LessThanSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getOpMultiAssignAccess().getLessThanSignKeyword_5_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpMultiAssign__Group_5__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__OpMultiAssign__Group_5__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpMultiAssign__Group_5__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOpMultiAssignAccess().getEqualsSignKeyword_5_2()); 
            }
            match(input,KW_EqualsSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getOpMultiAssignAccess().getEqualsSignKeyword_5_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpMultiAssign__Group_6__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_100);
            rule__OpMultiAssign__Group_6__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__OpMultiAssign__Group_6__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpMultiAssign__Group_6__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOpMultiAssignAccess().getGreaterThanSignKeyword_6_0()); 
            }
            match(input,KW_GreaterThanSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getOpMultiAssignAccess().getGreaterThanSignKeyword_6_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpMultiAssign__Group_6__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_100);
            rule__OpMultiAssign__Group_6__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__OpMultiAssign__Group_6__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpMultiAssign__Group_6__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOpMultiAssignAccess().getGreaterThanSignKeyword_6_1()); 
            }
            int alt235=2;
            int LA235_0 = input.LA(1);

            if ( (LA235_0==KW_GreaterThanSign) ) {
                alt235=1;
            }
            switch (alt235) {
                case 1 :
                    {
                    match(input,KW_GreaterThanSign,FOLLOW_2); if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getOpMultiAssignAccess().getGreaterThanSignKeyword_6_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpMultiAssign__Group_6__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__OpMultiAssign__Group_6__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpMultiAssign__Group_6__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOpMultiAssignAccess().getGreaterThanSignEqualsSignKeyword_6_2()); 
            }
            match(input,KW_GreaterThanSignEqualsSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getOpMultiAssignAccess().getGreaterThanSignEqualsSignKeyword_6_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XOrExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_101);
            rule__XOrExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XOrExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XOrExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXOrExpressionAccess().getXAndExpressionParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXAndExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXOrExpressionAccess().getXAndExpressionParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XOrExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XOrExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XOrExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXOrExpressionAccess().getGroup_1()); 
            }
            loop236:
            do {
                int alt236=2;
                int LA236_0 = input.LA(1);

                if ( (LA236_0==KW_VerticalLineVerticalLine) ) {
                    int LA236_2 = input.LA(2);

                    if ( (synpred342_InternalXtend()) ) {
                        alt236=1;
                    }


                }


                switch (alt236) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_102);
            	    rule__XOrExpression__Group_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop236;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getXOrExpressionAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XOrExpression__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XOrExpression__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XOrExpression__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XOrExpression__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXOrExpressionAccess().getGroup_1_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XOrExpression__Group_1_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXOrExpressionAccess().getGroup_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XOrExpression__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XOrExpression__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XOrExpression__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXOrExpressionAccess().getRightOperandAssignment_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XOrExpression__RightOperandAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXOrExpressionAccess().getRightOperandAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XOrExpression__Group_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XOrExpression__Group_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XOrExpression__Group_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXOrExpressionAccess().getGroup_1_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XOrExpression__Group_1_0_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXOrExpressionAccess().getGroup_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XOrExpression__Group_1_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_101);
            rule__XOrExpression__Group_1_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XOrExpression__Group_1_0_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XOrExpression__Group_1_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XOrExpression__Group_1_0_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XOrExpression__Group_1_0_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XOrExpression__Group_1_0_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXOrExpressionAccess().getFeatureAssignment_1_0_0_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XOrExpression__FeatureAssignment_1_0_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXOrExpressionAccess().getFeatureAssignment_1_0_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAndExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_103);
            rule__XAndExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XAndExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAndExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAndExpressionAccess().getXEqualityExpressionParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXEqualityExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAndExpressionAccess().getXEqualityExpressionParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAndExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XAndExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAndExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAndExpressionAccess().getGroup_1()); 
            }
            loop237:
            do {
                int alt237=2;
                int LA237_0 = input.LA(1);

                if ( (LA237_0==KW_AmpersandAmpersand) ) {
                    int LA237_2 = input.LA(2);

                    if ( (synpred343_InternalXtend()) ) {
                        alt237=1;
                    }


                }


                switch (alt237) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_104);
            	    rule__XAndExpression__Group_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop237;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getXAndExpressionAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAndExpression__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XAndExpression__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XAndExpression__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAndExpression__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAndExpressionAccess().getGroup_1_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XAndExpression__Group_1_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAndExpressionAccess().getGroup_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAndExpression__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XAndExpression__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAndExpression__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAndExpressionAccess().getRightOperandAssignment_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XAndExpression__RightOperandAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAndExpressionAccess().getRightOperandAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAndExpression__Group_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XAndExpression__Group_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAndExpression__Group_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAndExpressionAccess().getGroup_1_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XAndExpression__Group_1_0_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAndExpressionAccess().getGroup_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAndExpression__Group_1_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_103);
            rule__XAndExpression__Group_1_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XAndExpression__Group_1_0_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAndExpression__Group_1_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAndExpression__Group_1_0_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XAndExpression__Group_1_0_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAndExpression__Group_1_0_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAndExpressionAccess().getFeatureAssignment_1_0_0_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XAndExpression__FeatureAssignment_1_0_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAndExpressionAccess().getFeatureAssignment_1_0_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XEqualityExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_105);
            rule__XEqualityExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XEqualityExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XEqualityExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXEqualityExpressionAccess().getXRelationalExpressionParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXRelationalExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXEqualityExpressionAccess().getXRelationalExpressionParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XEqualityExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XEqualityExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XEqualityExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXEqualityExpressionAccess().getGroup_1()); 
            }
            loop238:
            do {
                int alt238=2;
                switch ( input.LA(1) ) {
                case KW_EqualsSignEqualsSign:
                    {
                    int LA238_2 = input.LA(2);

                    if ( (synpred344_InternalXtend()) ) {
                        alt238=1;
                    }


                    }
                    break;
                case KW_ExclamationMarkEqualsSign:
                    {
                    int LA238_3 = input.LA(2);

                    if ( (synpred344_InternalXtend()) ) {
                        alt238=1;
                    }


                    }
                    break;
                case KW_EqualsSignEqualsSignEqualsSign:
                    {
                    int LA238_4 = input.LA(2);

                    if ( (synpred344_InternalXtend()) ) {
                        alt238=1;
                    }


                    }
                    break;
                case KW_ExclamationMarkEqualsSignEqualsSign:
                    {
                    int LA238_5 = input.LA(2);

                    if ( (synpred344_InternalXtend()) ) {
                        alt238=1;
                    }


                    }
                    break;

                }

                switch (alt238) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_106);
            	    rule__XEqualityExpression__Group_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop238;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getXEqualityExpressionAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XEqualityExpression__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XEqualityExpression__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XEqualityExpression__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XEqualityExpression__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXEqualityExpressionAccess().getGroup_1_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XEqualityExpression__Group_1_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXEqualityExpressionAccess().getGroup_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XEqualityExpression__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XEqualityExpression__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XEqualityExpression__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXEqualityExpressionAccess().getRightOperandAssignment_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XEqualityExpression__RightOperandAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXEqualityExpressionAccess().getRightOperandAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XEqualityExpression__Group_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XEqualityExpression__Group_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XEqualityExpression__Group_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXEqualityExpressionAccess().getGroup_1_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XEqualityExpression__Group_1_0_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXEqualityExpressionAccess().getGroup_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XEqualityExpression__Group_1_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_105);
            rule__XEqualityExpression__Group_1_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XEqualityExpression__Group_1_0_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XEqualityExpression__Group_1_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XEqualityExpression__Group_1_0_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XEqualityExpression__Group_1_0_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XEqualityExpression__Group_1_0_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXEqualityExpressionAccess().getFeatureAssignment_1_0_0_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XEqualityExpression__FeatureAssignment_1_0_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXEqualityExpressionAccess().getFeatureAssignment_1_0_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XRelationalExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_107);
            rule__XRelationalExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XRelationalExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XRelationalExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXRelationalExpressionAccess().getXOtherOperatorExpressionParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXOtherOperatorExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXRelationalExpressionAccess().getXOtherOperatorExpressionParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XRelationalExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XRelationalExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XRelationalExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXRelationalExpressionAccess().getAlternatives_1()); 
            }
            loop239:
            do {
                int alt239=2;
                switch ( input.LA(1) ) {
                case KW_LessThanSign:
                    {
                    int LA239_2 = input.LA(2);

                    if ( (synpred345_InternalXtend()) ) {
                        alt239=1;
                    }


                    }
                    break;
                case KW_GreaterThanSign:
                    {
                    int LA239_3 = input.LA(2);

                    if ( (synpred345_InternalXtend()) ) {
                        alt239=1;
                    }


                    }
                    break;
                case KW_Instanceof:
                    {
                    int LA239_4 = input.LA(2);

                    if ( (synpred345_InternalXtend()) ) {
                        alt239=1;
                    }


                    }
                    break;
                case KW_GreaterThanSignEqualsSign:
                    {
                    int LA239_5 = input.LA(2);

                    if ( (synpred345_InternalXtend()) ) {
                        alt239=1;
                    }


                    }
                    break;

                }

                switch (alt239) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_108);
            	    rule__XRelationalExpression__Alternatives_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop239;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getXRelationalExpressionAccess().getAlternatives_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XRelationalExpression__Group_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_28);
            rule__XRelationalExpression__Group_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XRelationalExpression__Group_1_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XRelationalExpression__Group_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXRelationalExpressionAccess().getGroup_1_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XRelationalExpression__Group_1_0_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXRelationalExpressionAccess().getGroup_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XRelationalExpression__Group_1_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XRelationalExpression__Group_1_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XRelationalExpression__Group_1_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXRelationalExpressionAccess().getTypeAssignment_1_0_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XRelationalExpression__TypeAssignment_1_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXRelationalExpressionAccess().getTypeAssignment_1_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XRelationalExpression__Group_1_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XRelationalExpression__Group_1_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XRelationalExpression__Group_1_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXRelationalExpressionAccess().getGroup_1_0_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XRelationalExpression__Group_1_0_0_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXRelationalExpressionAccess().getGroup_1_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XRelationalExpression__Group_1_0_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_109);
            rule__XRelationalExpression__Group_1_0_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XRelationalExpression__Group_1_0_0_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XRelationalExpression__Group_1_0_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XRelationalExpression__Group_1_0_0_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XRelationalExpression__Group_1_0_0_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XRelationalExpression__Group_1_0_0_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXRelationalExpressionAccess().getInstanceofKeyword_1_0_0_0_1()); 
            }
            match(input,KW_Instanceof,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXRelationalExpressionAccess().getInstanceofKeyword_1_0_0_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XRelationalExpression__Group_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XRelationalExpression__Group_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XRelationalExpression__Group_1_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XRelationalExpression__Group_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXRelationalExpressionAccess().getGroup_1_1_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XRelationalExpression__Group_1_1_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXRelationalExpressionAccess().getGroup_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XRelationalExpression__Group_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XRelationalExpression__Group_1_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XRelationalExpression__Group_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXRelationalExpressionAccess().getRightOperandAssignment_1_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XRelationalExpression__RightOperandAssignment_1_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXRelationalExpressionAccess().getRightOperandAssignment_1_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XRelationalExpression__Group_1_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XRelationalExpression__Group_1_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XRelationalExpression__Group_1_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXRelationalExpressionAccess().getGroup_1_1_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XRelationalExpression__Group_1_1_0_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXRelationalExpressionAccess().getGroup_1_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XRelationalExpression__Group_1_1_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_107);
            rule__XRelationalExpression__Group_1_1_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XRelationalExpression__Group_1_1_0_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XRelationalExpression__Group_1_1_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XRelationalExpression__Group_1_1_0_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XRelationalExpression__Group_1_1_0_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XRelationalExpression__Group_1_1_0_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXRelationalExpressionAccess().getFeatureAssignment_1_1_0_0_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XRelationalExpression__FeatureAssignment_1_1_0_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXRelationalExpressionAccess().getFeatureAssignment_1_1_0_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpCompare__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_58);
            rule__OpCompare__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__OpCompare__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpCompare__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOpCompareAccess().getLessThanSignKeyword_1_0()); 
            }
            match(input,KW_LessThanSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getOpCompareAccess().getLessThanSignKeyword_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpCompare__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__OpCompare__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpCompare__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOpCompareAccess().getEqualsSignKeyword_1_1()); 
            }
            match(input,KW_EqualsSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getOpCompareAccess().getEqualsSignKeyword_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XOtherOperatorExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_110);
            rule__XOtherOperatorExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XOtherOperatorExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XOtherOperatorExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXOtherOperatorExpressionAccess().getXAdditiveExpressionParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXAdditiveExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXOtherOperatorExpressionAccess().getXAdditiveExpressionParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XOtherOperatorExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XOtherOperatorExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XOtherOperatorExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXOtherOperatorExpressionAccess().getGroup_1()); 
            }
            loop240:
            do {
                int alt240=2;
                alt240 = dfa240.predict(input);
                switch (alt240) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_111);
            	    rule__XOtherOperatorExpression__Group_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop240;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getXOtherOperatorExpressionAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XOtherOperatorExpression__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XOtherOperatorExpression__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XOtherOperatorExpression__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XOtherOperatorExpression__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXOtherOperatorExpressionAccess().getGroup_1_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XOtherOperatorExpression__Group_1_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXOtherOperatorExpressionAccess().getGroup_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XOtherOperatorExpression__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XOtherOperatorExpression__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XOtherOperatorExpression__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXOtherOperatorExpressionAccess().getRightOperandAssignment_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XOtherOperatorExpression__RightOperandAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXOtherOperatorExpressionAccess().getRightOperandAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XOtherOperatorExpression__Group_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XOtherOperatorExpression__Group_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XOtherOperatorExpression__Group_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXOtherOperatorExpressionAccess().getGroup_1_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XOtherOperatorExpression__Group_1_0_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXOtherOperatorExpressionAccess().getGroup_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XOtherOperatorExpression__Group_1_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_110);
            rule__XOtherOperatorExpression__Group_1_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XOtherOperatorExpression__Group_1_0_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XOtherOperatorExpression__Group_1_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XOtherOperatorExpression__Group_1_0_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XOtherOperatorExpression__Group_1_0_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XOtherOperatorExpression__Group_1_0_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXOtherOperatorExpressionAccess().getFeatureAssignment_1_0_0_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XOtherOperatorExpression__FeatureAssignment_1_0_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXOtherOperatorExpressionAccess().getFeatureAssignment_1_0_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpOther__Group_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_112);
            rule__OpOther__Group_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__OpOther__Group_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpOther__Group_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_2_0()); 
            }
            match(input,KW_GreaterThanSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpOther__Group_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__OpOther__Group_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpOther__Group_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOpOtherAccess().getFullStopFullStopKeyword_2_1()); 
            }
            match(input,KW_FullStopFullStop,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getOpOtherAccess().getFullStopFullStopKeyword_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpOther__Group_5__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_113);
            rule__OpOther__Group_5__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__OpOther__Group_5__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpOther__Group_5__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_5_0()); 
            }
            match(input,KW_GreaterThanSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpOther__Group_5__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__OpOther__Group_5__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpOther__Group_5__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOpOtherAccess().getAlternatives_5_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__OpOther__Alternatives_5_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getOpOtherAccess().getAlternatives_5_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpOther__Group_5_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__OpOther__Group_5_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpOther__Group_5_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOpOtherAccess().getGroup_5_1_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__OpOther__Group_5_1_0_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getOpOtherAccess().getGroup_5_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpOther__Group_5_1_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_113);
            rule__OpOther__Group_5_1_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__OpOther__Group_5_1_0_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpOther__Group_5_1_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_5_1_0_0_0()); 
            }
            match(input,KW_GreaterThanSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_5_1_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpOther__Group_5_1_0_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__OpOther__Group_5_1_0_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpOther__Group_5_1_0_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_5_1_0_0_1()); 
            }
            match(input,KW_GreaterThanSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_5_1_0_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpOther__Group_6__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_114);
            rule__OpOther__Group_6__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__OpOther__Group_6__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpOther__Group_6__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOpOtherAccess().getLessThanSignKeyword_6_0()); 
            }
            match(input,KW_LessThanSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getOpOtherAccess().getLessThanSignKeyword_6_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpOther__Group_6__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__OpOther__Group_6__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpOther__Group_6__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOpOtherAccess().getAlternatives_6_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__OpOther__Alternatives_6_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getOpOtherAccess().getAlternatives_6_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpOther__Group_6_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__OpOther__Group_6_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpOther__Group_6_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOpOtherAccess().getGroup_6_1_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__OpOther__Group_6_1_0_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getOpOtherAccess().getGroup_6_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpOther__Group_6_1_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_50);
            rule__OpOther__Group_6_1_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__OpOther__Group_6_1_0_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpOther__Group_6_1_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOpOtherAccess().getLessThanSignKeyword_6_1_0_0_0()); 
            }
            match(input,KW_LessThanSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getOpOtherAccess().getLessThanSignKeyword_6_1_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpOther__Group_6_1_0_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__OpOther__Group_6_1_0_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__OpOther__Group_6_1_0_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getOpOtherAccess().getLessThanSignKeyword_6_1_0_0_1()); 
            }
            match(input,KW_LessThanSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getOpOtherAccess().getLessThanSignKeyword_6_1_0_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAdditiveExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_115);
            rule__XAdditiveExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XAdditiveExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAdditiveExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAdditiveExpressionAccess().getXMultiplicativeExpressionParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXMultiplicativeExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAdditiveExpressionAccess().getXMultiplicativeExpressionParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAdditiveExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XAdditiveExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAdditiveExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAdditiveExpressionAccess().getGroup_1()); 
            }
            loop241:
            do {
                int alt241=2;
                int LA241_0 = input.LA(1);

                if ( (LA241_0==KW_HyphenMinus) ) {
                    int LA241_2 = input.LA(2);

                    if ( (synpred347_InternalXtend()) ) {
                        alt241=1;
                    }


                }
                else if ( (LA241_0==KW_PlusSign) ) {
                    int LA241_3 = input.LA(2);

                    if ( (synpred347_InternalXtend()) ) {
                        alt241=1;
                    }


                }


                switch (alt241) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_116);
            	    rule__XAdditiveExpression__Group_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop241;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getXAdditiveExpressionAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAdditiveExpression__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XAdditiveExpression__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XAdditiveExpression__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAdditiveExpression__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAdditiveExpressionAccess().getGroup_1_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XAdditiveExpression__Group_1_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAdditiveExpressionAccess().getGroup_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAdditiveExpression__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XAdditiveExpression__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAdditiveExpression__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAdditiveExpressionAccess().getRightOperandAssignment_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XAdditiveExpression__RightOperandAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAdditiveExpressionAccess().getRightOperandAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAdditiveExpression__Group_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XAdditiveExpression__Group_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAdditiveExpression__Group_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAdditiveExpressionAccess().getGroup_1_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XAdditiveExpression__Group_1_0_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAdditiveExpressionAccess().getGroup_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAdditiveExpression__Group_1_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_115);
            rule__XAdditiveExpression__Group_1_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XAdditiveExpression__Group_1_0_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAdditiveExpression__Group_1_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAdditiveExpression__Group_1_0_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XAdditiveExpression__Group_1_0_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAdditiveExpression__Group_1_0_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAdditiveExpressionAccess().getFeatureAssignment_1_0_0_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XAdditiveExpression__FeatureAssignment_1_0_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAdditiveExpressionAccess().getFeatureAssignment_1_0_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMultiplicativeExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_117);
            rule__XMultiplicativeExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XMultiplicativeExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMultiplicativeExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMultiplicativeExpressionAccess().getXUnaryOperationParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXUnaryOperation();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXMultiplicativeExpressionAccess().getXUnaryOperationParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMultiplicativeExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XMultiplicativeExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMultiplicativeExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMultiplicativeExpressionAccess().getGroup_1()); 
            }
            loop242:
            do {
                int alt242=2;
                switch ( input.LA(1) ) {
                case KW_Asterisk:
                    {
                    int LA242_2 = input.LA(2);

                    if ( (synpred348_InternalXtend()) ) {
                        alt242=1;
                    }


                    }
                    break;
                case KW_AsteriskAsterisk:
                    {
                    int LA242_3 = input.LA(2);

                    if ( (synpred348_InternalXtend()) ) {
                        alt242=1;
                    }


                    }
                    break;
                case KW_Solidus:
                    {
                    int LA242_4 = input.LA(2);

                    if ( (synpred348_InternalXtend()) ) {
                        alt242=1;
                    }


                    }
                    break;
                case KW_PercentSign:
                    {
                    int LA242_5 = input.LA(2);

                    if ( (synpred348_InternalXtend()) ) {
                        alt242=1;
                    }


                    }
                    break;

                }

                switch (alt242) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_118);
            	    rule__XMultiplicativeExpression__Group_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop242;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getXMultiplicativeExpressionAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMultiplicativeExpression__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XMultiplicativeExpression__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XMultiplicativeExpression__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMultiplicativeExpression__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMultiplicativeExpressionAccess().getGroup_1_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XMultiplicativeExpression__Group_1_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXMultiplicativeExpressionAccess().getGroup_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMultiplicativeExpression__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XMultiplicativeExpression__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMultiplicativeExpression__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMultiplicativeExpressionAccess().getRightOperandAssignment_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XMultiplicativeExpression__RightOperandAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXMultiplicativeExpressionAccess().getRightOperandAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMultiplicativeExpression__Group_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XMultiplicativeExpression__Group_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMultiplicativeExpression__Group_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMultiplicativeExpressionAccess().getGroup_1_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XMultiplicativeExpression__Group_1_0_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXMultiplicativeExpressionAccess().getGroup_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMultiplicativeExpression__Group_1_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_117);
            rule__XMultiplicativeExpression__Group_1_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XMultiplicativeExpression__Group_1_0_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMultiplicativeExpression__Group_1_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMultiplicativeExpression__Group_1_0_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XMultiplicativeExpression__Group_1_0_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMultiplicativeExpression__Group_1_0_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMultiplicativeExpressionAccess().getFeatureAssignment_1_0_0_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XMultiplicativeExpression__FeatureAssignment_1_0_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXMultiplicativeExpressionAccess().getFeatureAssignment_1_0_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XUnaryOperation__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_119);
            rule__XUnaryOperation__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XUnaryOperation__Group_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XUnaryOperation__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXUnaryOperationAccess().getXUnaryOperationAction_0_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXUnaryOperationAccess().getXUnaryOperationAction_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XUnaryOperation__Group_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XUnaryOperation__Group_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XUnaryOperation__Group_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XUnaryOperation__Group_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXUnaryOperationAccess().getFeatureAssignment_0_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XUnaryOperation__FeatureAssignment_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXUnaryOperationAccess().getFeatureAssignment_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XUnaryOperation__Group_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XUnaryOperation__Group_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XUnaryOperation__Group_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXUnaryOperationAccess().getOperandAssignment_0_2()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XUnaryOperation__OperandAssignment_0_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXUnaryOperationAccess().getOperandAssignment_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCastedExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_120);
            rule__XCastedExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XCastedExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCastedExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXCastedExpressionAccess().getXPostfixOperationParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXPostfixOperation();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXCastedExpressionAccess().getXPostfixOperationParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCastedExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XCastedExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCastedExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXCastedExpressionAccess().getGroup_1()); 
            }
            loop243:
            do {
                int alt243=2;
                int LA243_0 = input.LA(1);

                if ( (LA243_0==KW_As) ) {
                    int LA243_2 = input.LA(2);

                    if ( (synpred349_InternalXtend()) ) {
                        alt243=1;
                    }


                }


                switch (alt243) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_121);
            	    rule__XCastedExpression__Group_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop243;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getXCastedExpressionAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCastedExpression__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_28);
            rule__XCastedExpression__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XCastedExpression__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCastedExpression__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXCastedExpressionAccess().getGroup_1_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XCastedExpression__Group_1_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXCastedExpressionAccess().getGroup_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCastedExpression__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XCastedExpression__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCastedExpression__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXCastedExpressionAccess().getTypeAssignment_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XCastedExpression__TypeAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXCastedExpressionAccess().getTypeAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCastedExpression__Group_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XCastedExpression__Group_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCastedExpression__Group_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXCastedExpressionAccess().getGroup_1_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XCastedExpression__Group_1_0_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXCastedExpressionAccess().getGroup_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCastedExpression__Group_1_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_120);
            rule__XCastedExpression__Group_1_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XCastedExpression__Group_1_0_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCastedExpression__Group_1_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCastedExpression__Group_1_0_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XCastedExpression__Group_1_0_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCastedExpression__Group_1_0_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXCastedExpressionAccess().getAsKeyword_1_0_0_1()); 
            }
            match(input,KW_As,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXCastedExpressionAccess().getAsKeyword_1_0_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XPostfixOperation__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_38);
            rule__XPostfixOperation__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XPostfixOperation__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XPostfixOperation__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXPostfixOperationAccess().getXMemberFeatureCallParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXMemberFeatureCall();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXPostfixOperationAccess().getXMemberFeatureCallParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XPostfixOperation__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XPostfixOperation__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XPostfixOperation__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXPostfixOperationAccess().getGroup_1()); 
            }
            int alt244=2;
            int LA244_0 = input.LA(1);

            if ( (LA244_0==KW_PlusSignPlusSign) ) {
                int LA244_1 = input.LA(2);

                if ( (synpred350_InternalXtend()) ) {
                    alt244=1;
                }
            }
            else if ( (LA244_0==KW_HyphenMinusHyphenMinus) ) {
                int LA244_2 = input.LA(2);

                if ( (synpred350_InternalXtend()) ) {
                    alt244=1;
                }
            }
            switch (alt244) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XPostfixOperation__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXPostfixOperationAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XPostfixOperation__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XPostfixOperation__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XPostfixOperation__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXPostfixOperationAccess().getGroup_1_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XPostfixOperation__Group_1_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXPostfixOperationAccess().getGroup_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XPostfixOperation__Group_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_38);
            rule__XPostfixOperation__Group_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XPostfixOperation__Group_1_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XPostfixOperation__Group_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XPostfixOperation__Group_1_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XPostfixOperation__Group_1_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XPostfixOperation__Group_1_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXPostfixOperationAccess().getFeatureAssignment_1_0_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XPostfixOperation__FeatureAssignment_1_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXPostfixOperationAccess().getFeatureAssignment_1_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_122);
            rule__XMemberFeatureCall__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getXPrimaryExpressionParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXPrimaryExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getXPrimaryExpressionParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getAlternatives_1()); 
            }
            loop245:
            do {
                int alt245=2;
                switch ( input.LA(1) ) {
                case KW_FullStop:
                    {
                    int LA245_2 = input.LA(2);

                    if ( (synpred351_InternalXtend()) ) {
                        alt245=1;
                    }


                    }
                    break;
                case KW_ColonColon:
                    {
                    int LA245_3 = input.LA(2);

                    if ( (synpred351_InternalXtend()) ) {
                        alt245=1;
                    }


                    }
                    break;
                case KW_QuestionMarkFullStop:
                    {
                    int LA245_4 = input.LA(2);

                    if ( (synpred351_InternalXtend()) ) {
                        alt245=1;
                    }


                    }
                    break;

                }

                switch (alt245) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_123);
            	    rule__XMemberFeatureCall__Alternatives_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop245;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getAlternatives_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XMemberFeatureCall__Group_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__Group_1_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getGroup_1_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__Group_1_0_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getGroup_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__Group_1_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getValueAssignment_1_0_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__ValueAssignment_1_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getValueAssignment_1_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__Group_1_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getGroup_1_0_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__Group_1_0_0_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getGroup_1_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_0_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_124);
            rule__XMemberFeatureCall__Group_1_0_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__Group_1_0_0_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_0_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_0_0_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_57);
            rule__XMemberFeatureCall__Group_1_0_0_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__Group_1_0_0_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_0_0_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getAlternatives_1_0_0_0_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__Alternatives_1_0_0_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getAlternatives_1_0_0_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_0_0_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_58);
            rule__XMemberFeatureCall__Group_1_0_0_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__Group_1_0_0_0__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_0_0_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getFeatureAssignment_1_0_0_0_2()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__FeatureAssignment_1_0_0_0_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getFeatureAssignment_1_0_0_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_0_0_0__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__Group_1_0_0_0__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_0_0_0__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getOpSingleAssignParserRuleCall_1_0_0_0_3()); 
            }
            pushFollow(FOLLOW_2);
            ruleOpSingleAssign();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getOpSingleAssignParserRuleCall_1_0_0_0_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_125);
            rule__XMemberFeatureCall__Group_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__Group_1_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getGroup_1_1_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__Group_1_1_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getGroup_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_125);
            rule__XMemberFeatureCall__Group_1_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__Group_1_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getGroup_1_1_1()); 
            }
            int alt246=2;
            int LA246_0 = input.LA(1);

            if ( (LA246_0==KW_LessThanSign) ) {
                alt246=1;
            }
            switch (alt246) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XMemberFeatureCall__Group_1_1_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getGroup_1_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_126);
            rule__XMemberFeatureCall__Group_1_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__Group_1_1__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getFeatureAssignment_1_1_2()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__FeatureAssignment_1_1_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getFeatureAssignment_1_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_1__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_126);
            rule__XMemberFeatureCall__Group_1_1__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__Group_1_1__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_1__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getGroup_1_1_3()); 
            }
            int alt247=2;
            alt247 = dfa247.predict(input);
            switch (alt247) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XMemberFeatureCall__Group_1_1_3__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getGroup_1_1_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_1__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__Group_1_1__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_1__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getMemberCallArgumentsAssignment_1_1_4()); 
            }
            int alt248=2;
            alt248 = dfa248.predict(input);
            switch (alt248) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XMemberFeatureCall__MemberCallArgumentsAssignment_1_1_4();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getMemberCallArgumentsAssignment_1_1_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__Group_1_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getGroup_1_1_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__Group_1_1_0_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getGroup_1_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_1_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_122);
            rule__XMemberFeatureCall__Group_1_1_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__Group_1_1_0_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_1_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_1_0_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__Group_1_1_0_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_1_0_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getAlternatives_1_1_0_0_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__Alternatives_1_1_0_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getAlternatives_1_1_0_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_51);
            rule__XMemberFeatureCall__Group_1_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__Group_1_1_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getLessThanSignKeyword_1_1_1_0()); 
            }
            match(input,KW_LessThanSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getLessThanSignKeyword_1_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_16);
            rule__XMemberFeatureCall__Group_1_1_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__Group_1_1_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getTypeArgumentsAssignment_1_1_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__TypeArgumentsAssignment_1_1_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getTypeArgumentsAssignment_1_1_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_1_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_16);
            rule__XMemberFeatureCall__Group_1_1_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__Group_1_1_1__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_1_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getGroup_1_1_1_2()); 
            }
            loop249:
            do {
                int alt249=2;
                int LA249_0 = input.LA(1);

                if ( (LA249_0==KW_Comma) ) {
                    alt249=1;
                }


                switch (alt249) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_17);
            	    rule__XMemberFeatureCall__Group_1_1_1_2__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop249;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getGroup_1_1_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_1_1__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__Group_1_1_1__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_1_1__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getGreaterThanSignKeyword_1_1_1_3()); 
            }
            match(input,KW_GreaterThanSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getGreaterThanSignKeyword_1_1_1_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_1_1_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_51);
            rule__XMemberFeatureCall__Group_1_1_1_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__Group_1_1_1_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_1_1_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getCommaKeyword_1_1_1_2_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getCommaKeyword_1_1_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_1_1_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__Group_1_1_1_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_1_1_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getTypeArgumentsAssignment_1_1_1_2_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__TypeArgumentsAssignment_1_1_1_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getTypeArgumentsAssignment_1_1_1_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_1_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_74);
            rule__XMemberFeatureCall__Group_1_1_3__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__Group_1_1_3__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_1_3__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getExplicitOperationCallAssignment_1_1_3_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__ExplicitOperationCallAssignment_1_1_3_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getExplicitOperationCallAssignment_1_1_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_1_3__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_74);
            rule__XMemberFeatureCall__Group_1_1_3__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__Group_1_1_3__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_1_3__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getAlternatives_1_1_3_1()); 
            }
            int alt250=2;
            int LA250_0 = input.LA(1);

            if ( (LA250_0==KW_Package||(LA250_0>=KW_Class && LA250_0<=KW_LessThanSign)||(LA250_0>=KW_Extends && LA250_0<=KW_LeftCurlyBracket)||(LA250_0>=KW_Interface && LA250_0<=KW_LeftParenthesis)||LA250_0==KW_EqualsSignGreaterThanSign||(LA250_0>=KW_Extension && LA250_0<=KW_New)||(LA250_0>=KW_Public && LA250_0<=KW_Transient)||(LA250_0>=KW_Def && LA250_0<=KW_Create)||(LA250_0>=KW_AFTER && LA250_0<=KW_Import)||LA250_0==KW_Try||(LA250_0>=KW_VerticalLine && LA250_0<=KW_Switch)||(LA250_0>=KW_NumberSign && LA250_0<=KW_LeftSquareBracket)||(LA250_0>=KW_PlusSign && LA250_0<=KW_HyphenMinus)||LA250_0==KW_ExclamationMark||LA250_0==KW_If||(LA250_0>=KW_For && LA250_0<=KW_Return)||(LA250_0>=RULE_ID && LA250_0<=RULE_RICH_TEXT_START)) ) {
                alt250=1;
            }
            switch (alt250) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XMemberFeatureCall__Alternatives_1_1_3_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getAlternatives_1_1_3_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_1_3__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__Group_1_1_3__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_1_3__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getRightParenthesisKeyword_1_1_3_2()); 
            }
            match(input,KW_RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getRightParenthesisKeyword_1_1_3_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_1_3_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_19);
            rule__XMemberFeatureCall__Group_1_1_3_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__Group_1_1_3_1_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_1_3_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getMemberCallArgumentsAssignment_1_1_3_1_1_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__MemberCallArgumentsAssignment_1_1_3_1_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getMemberCallArgumentsAssignment_1_1_3_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_1_3_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__Group_1_1_3_1_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_1_3_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getGroup_1_1_3_1_1_1()); 
            }
            loop251:
            do {
                int alt251=2;
                int LA251_0 = input.LA(1);

                if ( (LA251_0==KW_Comma) ) {
                    alt251=1;
                }


                switch (alt251) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_17);
            	    rule__XMemberFeatureCall__Group_1_1_3_1_1_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop251;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getGroup_1_1_3_1_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_1_3_1_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XMemberFeatureCall__Group_1_1_3_1_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__Group_1_1_3_1_1_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_1_3_1_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getCommaKeyword_1_1_3_1_1_1_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getCommaKeyword_1_1_3_1_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_1_3_1_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__Group_1_1_3_1_1_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__Group_1_1_3_1_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getMemberCallArgumentsAssignment_1_1_3_1_1_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XMemberFeatureCall__MemberCallArgumentsAssignment_1_1_3_1_1_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getMemberCallArgumentsAssignment_1_1_3_1_1_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSetLiteral__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_99);
            rule__XSetLiteral__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XSetLiteral__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSetLiteral__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSetLiteralAccess().getXSetLiteralAction_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXSetLiteralAccess().getXSetLiteralAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSetLiteral__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_23);
            rule__XSetLiteral__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XSetLiteral__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSetLiteral__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSetLiteralAccess().getNumberSignKeyword_1()); 
            }
            match(input,KW_NumberSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXSetLiteralAccess().getNumberSignKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSetLiteral__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_127);
            rule__XSetLiteral__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XSetLiteral__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSetLiteral__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSetLiteralAccess().getLeftCurlyBracketKeyword_2()); 
            }
            match(input,KW_LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXSetLiteralAccess().getLeftCurlyBracketKeyword_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSetLiteral__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_127);
            rule__XSetLiteral__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XSetLiteral__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSetLiteral__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSetLiteralAccess().getGroup_3()); 
            }
            int alt252=2;
            int LA252_0 = input.LA(1);

            if ( (LA252_0==KW_Package||(LA252_0>=KW_Class && LA252_0<=KW_LessThanSign)||(LA252_0>=KW_Extends && LA252_0<=KW_LeftCurlyBracket)||(LA252_0>=KW_Interface && LA252_0<=KW_LeftParenthesis)||(LA252_0>=KW_Extension && LA252_0<=KW_New)||(LA252_0>=KW_Public && LA252_0<=KW_Transient)||(LA252_0>=KW_Def && LA252_0<=KW_Create)||(LA252_0>=KW_AFTER && LA252_0<=KW_Import)||LA252_0==KW_Try||LA252_0==KW_Switch||(LA252_0>=KW_NumberSign && LA252_0<=KW_LeftSquareBracket)||(LA252_0>=KW_PlusSign && LA252_0<=KW_HyphenMinus)||LA252_0==KW_ExclamationMark||LA252_0==KW_If||(LA252_0>=KW_For && LA252_0<=KW_Return)||(LA252_0>=RULE_ID && LA252_0<=RULE_RICH_TEXT_START)) ) {
                alt252=1;
            }
            switch (alt252) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XSetLiteral__Group_3__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXSetLiteralAccess().getGroup_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSetLiteral__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XSetLiteral__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSetLiteral__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSetLiteralAccess().getRightCurlyBracketKeyword_4()); 
            }
            match(input,KW_RightCurlyBracket,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXSetLiteralAccess().getRightCurlyBracketKeyword_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSetLiteral__Group_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_19);
            rule__XSetLiteral__Group_3__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XSetLiteral__Group_3__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSetLiteral__Group_3__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSetLiteralAccess().getElementsAssignment_3_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XSetLiteral__ElementsAssignment_3_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXSetLiteralAccess().getElementsAssignment_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSetLiteral__Group_3__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XSetLiteral__Group_3__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSetLiteral__Group_3__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSetLiteralAccess().getGroup_3_1()); 
            }
            loop253:
            do {
                int alt253=2;
                int LA253_0 = input.LA(1);

                if ( (LA253_0==KW_Comma) ) {
                    alt253=1;
                }


                switch (alt253) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_17);
            	    rule__XSetLiteral__Group_3_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop253;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getXSetLiteralAccess().getGroup_3_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSetLiteral__Group_3_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XSetLiteral__Group_3_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XSetLiteral__Group_3_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSetLiteral__Group_3_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSetLiteralAccess().getCommaKeyword_3_1_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXSetLiteralAccess().getCommaKeyword_3_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSetLiteral__Group_3_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XSetLiteral__Group_3_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSetLiteral__Group_3_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSetLiteralAccess().getElementsAssignment_3_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XSetLiteral__ElementsAssignment_3_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXSetLiteralAccess().getElementsAssignment_3_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XListLiteral__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_99);
            rule__XListLiteral__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XListLiteral__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XListLiteral__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXListLiteralAccess().getXListLiteralAction_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXListLiteralAccess().getXListLiteralAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XListLiteral__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_48);
            rule__XListLiteral__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XListLiteral__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XListLiteral__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXListLiteralAccess().getNumberSignKeyword_1()); 
            }
            match(input,KW_NumberSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXListLiteralAccess().getNumberSignKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XListLiteral__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_98);
            rule__XListLiteral__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XListLiteral__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XListLiteral__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXListLiteralAccess().getLeftSquareBracketKeyword_2()); 
            }
            match(input,KW_LeftSquareBracket,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXListLiteralAccess().getLeftSquareBracketKeyword_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XListLiteral__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_98);
            rule__XListLiteral__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XListLiteral__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XListLiteral__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXListLiteralAccess().getGroup_3()); 
            }
            int alt254=2;
            int LA254_0 = input.LA(1);

            if ( (LA254_0==KW_Package||(LA254_0>=KW_Class && LA254_0<=KW_LessThanSign)||(LA254_0>=KW_Extends && LA254_0<=KW_LeftCurlyBracket)||(LA254_0>=KW_Interface && LA254_0<=KW_LeftParenthesis)||(LA254_0>=KW_Extension && LA254_0<=KW_New)||(LA254_0>=KW_Public && LA254_0<=KW_Transient)||(LA254_0>=KW_Def && LA254_0<=KW_Create)||(LA254_0>=KW_AFTER && LA254_0<=KW_Import)||LA254_0==KW_Try||LA254_0==KW_Switch||(LA254_0>=KW_NumberSign && LA254_0<=KW_LeftSquareBracket)||(LA254_0>=KW_PlusSign && LA254_0<=KW_HyphenMinus)||LA254_0==KW_ExclamationMark||LA254_0==KW_If||(LA254_0>=KW_For && LA254_0<=KW_Return)||(LA254_0>=RULE_ID && LA254_0<=RULE_RICH_TEXT_START)) ) {
                alt254=1;
            }
            switch (alt254) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XListLiteral__Group_3__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXListLiteralAccess().getGroup_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XListLiteral__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XListLiteral__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XListLiteral__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXListLiteralAccess().getRightSquareBracketKeyword_4()); 
            }
            match(input,KW_RightSquareBracket,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXListLiteralAccess().getRightSquareBracketKeyword_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XListLiteral__Group_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_19);
            rule__XListLiteral__Group_3__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XListLiteral__Group_3__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XListLiteral__Group_3__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXListLiteralAccess().getElementsAssignment_3_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XListLiteral__ElementsAssignment_3_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXListLiteralAccess().getElementsAssignment_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XListLiteral__Group_3__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XListLiteral__Group_3__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XListLiteral__Group_3__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXListLiteralAccess().getGroup_3_1()); 
            }
            loop255:
            do {
                int alt255=2;
                int LA255_0 = input.LA(1);

                if ( (LA255_0==KW_Comma) ) {
                    alt255=1;
                }


                switch (alt255) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_17);
            	    rule__XListLiteral__Group_3_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop255;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getXListLiteralAccess().getGroup_3_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XListLiteral__Group_3_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XListLiteral__Group_3_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XListLiteral__Group_3_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XListLiteral__Group_3_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXListLiteralAccess().getCommaKeyword_3_1_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXListLiteralAccess().getCommaKeyword_3_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XListLiteral__Group_3_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XListLiteral__Group_3_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XListLiteral__Group_3_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXListLiteralAccess().getElementsAssignment_3_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XListLiteral__ElementsAssignment_3_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXListLiteralAccess().getElementsAssignment_3_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XClosure__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_128);
            rule__XClosure__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XClosure__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XClosure__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXClosureAccess().getGroup_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XClosure__Group_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXClosureAccess().getGroup_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XClosure__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_128);
            rule__XClosure__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XClosure__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XClosure__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXClosureAccess().getGroup_1()); 
            }
            int alt256=2;
            alt256 = dfa256.predict(input);
            switch (alt256) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XClosure__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXClosureAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XClosure__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_129);
            rule__XClosure__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XClosure__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XClosure__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXClosureAccess().getExpressionAssignment_2()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XClosure__ExpressionAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXClosureAccess().getExpressionAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XClosure__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XClosure__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XClosure__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXClosureAccess().getRightSquareBracketKeyword_3()); 
            }
            match(input,KW_RightSquareBracket,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXClosureAccess().getRightSquareBracketKeyword_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XClosure__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XClosure__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XClosure__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXClosureAccess().getGroup_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XClosure__Group_0_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXClosureAccess().getGroup_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XClosure__Group_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_48);
            rule__XClosure__Group_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XClosure__Group_0_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XClosure__Group_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXClosureAccess().getXClosureAction_0_0_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXClosureAccess().getXClosureAction_0_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XClosure__Group_0_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XClosure__Group_0_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XClosure__Group_0_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXClosureAccess().getLeftSquareBracketKeyword_0_0_1()); 
            }
            match(input,KW_LeftSquareBracket,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXClosureAccess().getLeftSquareBracketKeyword_0_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XClosure__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XClosure__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XClosure__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXClosureAccess().getGroup_1_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XClosure__Group_1_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXClosureAccess().getGroup_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XClosure__Group_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_130);
            rule__XClosure__Group_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XClosure__Group_1_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XClosure__Group_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXClosureAccess().getGroup_1_0_0()); 
            }
            int alt257=2;
            int LA257_0 = input.LA(1);

            if ( (LA257_0==KW_Package||LA257_0==KW_Class||(LA257_0>=KW_Extends && LA257_0<=KW_Implements)||(LA257_0>=KW_Interface && LA257_0<=KW_LeftParenthesis)||LA257_0==KW_EqualsSignGreaterThanSign||(LA257_0>=KW_Extension && LA257_0<=KW_Throws)||(LA257_0>=KW_Public && LA257_0<=KW_Transient)||(LA257_0>=KW_Def && LA257_0<=KW_Create)||(LA257_0>=KW_AFTER && LA257_0<=KW_Import)||LA257_0==RULE_ID) ) {
                alt257=1;
            }
            switch (alt257) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XClosure__Group_1_0_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXClosureAccess().getGroup_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XClosure__Group_1_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XClosure__Group_1_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XClosure__Group_1_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXClosureAccess().getExplicitSyntaxAssignment_1_0_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XClosure__ExplicitSyntaxAssignment_1_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXClosureAccess().getExplicitSyntaxAssignment_1_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XClosure__Group_1_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_19);
            rule__XClosure__Group_1_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XClosure__Group_1_0_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XClosure__Group_1_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXClosureAccess().getDeclaredFormalParametersAssignment_1_0_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XClosure__DeclaredFormalParametersAssignment_1_0_0_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXClosureAccess().getDeclaredFormalParametersAssignment_1_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XClosure__Group_1_0_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XClosure__Group_1_0_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XClosure__Group_1_0_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXClosureAccess().getGroup_1_0_0_1()); 
            }
            loop258:
            do {
                int alt258=2;
                int LA258_0 = input.LA(1);

                if ( (LA258_0==KW_Comma) ) {
                    alt258=1;
                }


                switch (alt258) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_17);
            	    rule__XClosure__Group_1_0_0_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop258;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getXClosureAccess().getGroup_1_0_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XClosure__Group_1_0_0_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_68);
            rule__XClosure__Group_1_0_0_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XClosure__Group_1_0_0_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XClosure__Group_1_0_0_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXClosureAccess().getCommaKeyword_1_0_0_1_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXClosureAccess().getCommaKeyword_1_0_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XClosure__Group_1_0_0_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XClosure__Group_1_0_0_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XClosure__Group_1_0_0_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXClosureAccess().getDeclaredFormalParametersAssignment_1_0_0_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XClosure__DeclaredFormalParametersAssignment_1_0_0_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXClosureAccess().getDeclaredFormalParametersAssignment_1_0_0_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XExpressionInClosure__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_128);
            rule__XExpressionInClosure__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XExpressionInClosure__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XExpressionInClosure__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXExpressionInClosureAccess().getXBlockExpressionAction_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXExpressionInClosureAccess().getXBlockExpressionAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XExpressionInClosure__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XExpressionInClosure__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XExpressionInClosure__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXExpressionInClosureAccess().getGroup_1()); 
            }
            loop259:
            do {
                int alt259=2;
                int LA259_0 = input.LA(1);

                if ( (LA259_0==KW_Package||(LA259_0>=KW_Class && LA259_0<=KW_LessThanSign)||(LA259_0>=KW_Extends && LA259_0<=KW_LeftCurlyBracket)||(LA259_0>=KW_Interface && LA259_0<=KW_LeftParenthesis)||(LA259_0>=KW_Extension && LA259_0<=KW_New)||(LA259_0>=KW_Public && LA259_0<=KW_Create)||(LA259_0>=KW_AFTER && LA259_0<=KW_Import)||LA259_0==KW_Try||LA259_0==KW_Switch||(LA259_0>=KW_NumberSign && LA259_0<=KW_LeftSquareBracket)||(LA259_0>=KW_PlusSign && LA259_0<=KW_HyphenMinus)||LA259_0==KW_ExclamationMark||LA259_0==KW_If||(LA259_0>=KW_For && LA259_0<=KW_Return)||(LA259_0>=RULE_ID && LA259_0<=RULE_RICH_TEXT_START)) ) {
                    alt259=1;
                }


                switch (alt259) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_131);
            	    rule__XExpressionInClosure__Group_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop259;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getXExpressionInClosureAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XExpressionInClosure__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_8);
            rule__XExpressionInClosure__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XExpressionInClosure__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XExpressionInClosure__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXExpressionInClosureAccess().getExpressionsAssignment_1_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XExpressionInClosure__ExpressionsAssignment_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXExpressionInClosureAccess().getExpressionsAssignment_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XExpressionInClosure__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XExpressionInClosure__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XExpressionInClosure__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXExpressionInClosureAccess().getSemicolonKeyword_1_1()); 
            }
            int alt260=2;
            int LA260_0 = input.LA(1);

            if ( (LA260_0==KW_Semicolon) ) {
                alt260=1;
            }
            switch (alt260) {
                case 1 :
                    {
                    match(input,KW_Semicolon,FOLLOW_2); if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXExpressionInClosureAccess().getSemicolonKeyword_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XShortClosure__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XShortClosure__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XShortClosure__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XShortClosure__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXShortClosureAccess().getGroup_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XShortClosure__Group_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXShortClosureAccess().getGroup_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XShortClosure__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XShortClosure__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XShortClosure__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXShortClosureAccess().getExpressionAssignment_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XShortClosure__ExpressionAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXShortClosureAccess().getExpressionAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XShortClosure__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XShortClosure__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XShortClosure__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXShortClosureAccess().getGroup_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XShortClosure__Group_0_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXShortClosureAccess().getGroup_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XShortClosure__Group_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_130);
            rule__XShortClosure__Group_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XShortClosure__Group_0_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XShortClosure__Group_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXShortClosureAccess().getXClosureAction_0_0_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXShortClosureAccess().getXClosureAction_0_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XShortClosure__Group_0_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_130);
            rule__XShortClosure__Group_0_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XShortClosure__Group_0_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XShortClosure__Group_0_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXShortClosureAccess().getGroup_0_0_1()); 
            }
            int alt261=2;
            int LA261_0 = input.LA(1);

            if ( (LA261_0==KW_Package||LA261_0==KW_Class||(LA261_0>=KW_Extends && LA261_0<=KW_Implements)||(LA261_0>=KW_Interface && LA261_0<=KW_LeftParenthesis)||LA261_0==KW_EqualsSignGreaterThanSign||(LA261_0>=KW_Extension && LA261_0<=KW_Throws)||(LA261_0>=KW_Public && LA261_0<=KW_Transient)||(LA261_0>=KW_Def && LA261_0<=KW_Create)||(LA261_0>=KW_AFTER && LA261_0<=KW_Import)||LA261_0==RULE_ID) ) {
                alt261=1;
            }
            switch (alt261) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XShortClosure__Group_0_0_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXShortClosureAccess().getGroup_0_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XShortClosure__Group_0_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XShortClosure__Group_0_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XShortClosure__Group_0_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXShortClosureAccess().getExplicitSyntaxAssignment_0_0_2()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XShortClosure__ExplicitSyntaxAssignment_0_0_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXShortClosureAccess().getExplicitSyntaxAssignment_0_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XShortClosure__Group_0_0_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_19);
            rule__XShortClosure__Group_0_0_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XShortClosure__Group_0_0_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XShortClosure__Group_0_0_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXShortClosureAccess().getDeclaredFormalParametersAssignment_0_0_1_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XShortClosure__DeclaredFormalParametersAssignment_0_0_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXShortClosureAccess().getDeclaredFormalParametersAssignment_0_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XShortClosure__Group_0_0_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XShortClosure__Group_0_0_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XShortClosure__Group_0_0_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXShortClosureAccess().getGroup_0_0_1_1()); 
            }
            loop262:
            do {
                int alt262=2;
                int LA262_0 = input.LA(1);

                if ( (LA262_0==KW_Comma) ) {
                    alt262=1;
                }


                switch (alt262) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_17);
            	    rule__XShortClosure__Group_0_0_1_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop262;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getXShortClosureAccess().getGroup_0_0_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XShortClosure__Group_0_0_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_68);
            rule__XShortClosure__Group_0_0_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XShortClosure__Group_0_0_1_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XShortClosure__Group_0_0_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXShortClosureAccess().getCommaKeyword_0_0_1_1_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXShortClosureAccess().getCommaKeyword_0_0_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XShortClosure__Group_0_0_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XShortClosure__Group_0_0_1_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XShortClosure__Group_0_0_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXShortClosureAccess().getDeclaredFormalParametersAssignment_0_0_1_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XShortClosure__DeclaredFormalParametersAssignment_0_0_1_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXShortClosureAccess().getDeclaredFormalParametersAssignment_0_0_1_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XParenthesizedExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XParenthesizedExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XParenthesizedExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XParenthesizedExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXParenthesizedExpressionAccess().getLeftParenthesisKeyword_0()); 
            }
            match(input,KW_LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXParenthesizedExpressionAccess().getLeftParenthesisKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XParenthesizedExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_81);
            rule__XParenthesizedExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XParenthesizedExpression__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XParenthesizedExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXParenthesizedExpressionAccess().getXExpressionParserRuleCall_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXParenthesizedExpressionAccess().getXExpressionParserRuleCall_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XParenthesizedExpression__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XParenthesizedExpression__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XParenthesizedExpression__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXParenthesizedExpressionAccess().getRightParenthesisKeyword_2()); 
            }
            match(input,KW_RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXParenthesizedExpressionAccess().getRightParenthesisKeyword_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XIfExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_132);
            rule__XIfExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XIfExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XIfExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXIfExpressionAccess().getXIfExpressionAction_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXIfExpressionAccess().getXIfExpressionAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XIfExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_43);
            rule__XIfExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XIfExpression__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XIfExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXIfExpressionAccess().getIfKeyword_1()); 
            }
            match(input,KW_If,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXIfExpressionAccess().getIfKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XIfExpression__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XIfExpression__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XIfExpression__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XIfExpression__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXIfExpressionAccess().getLeftParenthesisKeyword_2()); 
            }
            match(input,KW_LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXIfExpressionAccess().getLeftParenthesisKeyword_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XIfExpression__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_81);
            rule__XIfExpression__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XIfExpression__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XIfExpression__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXIfExpressionAccess().getIfAssignment_3()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XIfExpression__IfAssignment_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXIfExpressionAccess().getIfAssignment_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XIfExpression__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XIfExpression__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XIfExpression__Group__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XIfExpression__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXIfExpressionAccess().getRightParenthesisKeyword_4()); 
            }
            match(input,KW_RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXIfExpressionAccess().getRightParenthesisKeyword_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XIfExpression__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_133);
            rule__XIfExpression__Group__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XIfExpression__Group__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XIfExpression__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXIfExpressionAccess().getThenAssignment_5()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XIfExpression__ThenAssignment_5();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXIfExpressionAccess().getThenAssignment_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XIfExpression__Group__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XIfExpression__Group__6__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XIfExpression__Group__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXIfExpressionAccess().getGroup_6()); 
            }
            int alt263=2;
            int LA263_0 = input.LA(1);

            if ( (LA263_0==KW_Else) ) {
                int LA263_1 = input.LA(2);

                if ( (synpred369_InternalXtend()) ) {
                    alt263=1;
                }
            }
            switch (alt263) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XIfExpression__Group_6__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXIfExpressionAccess().getGroup_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XIfExpression__Group_6__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XIfExpression__Group_6__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XIfExpression__Group_6__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XIfExpression__Group_6__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXIfExpressionAccess().getElseKeyword_6_0()); 
            }
            {
            match(input,KW_Else,FOLLOW_2); if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXIfExpressionAccess().getElseKeyword_6_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XIfExpression__Group_6__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XIfExpression__Group_6__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XIfExpression__Group_6__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXIfExpressionAccess().getElseAssignment_6_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XIfExpression__ElseAssignment_6_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXIfExpressionAccess().getElseAssignment_6_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XForLoopExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XForLoopExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XForLoopExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XForLoopExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXForLoopExpressionAccess().getGroup_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XForLoopExpression__Group_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXForLoopExpressionAccess().getGroup_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XForLoopExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_81);
            rule__XForLoopExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XForLoopExpression__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XForLoopExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXForLoopExpressionAccess().getForExpressionAssignment_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XForLoopExpression__ForExpressionAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXForLoopExpressionAccess().getForExpressionAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XForLoopExpression__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XForLoopExpression__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XForLoopExpression__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XForLoopExpression__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXForLoopExpressionAccess().getRightParenthesisKeyword_2()); 
            }
            match(input,KW_RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXForLoopExpressionAccess().getRightParenthesisKeyword_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XForLoopExpression__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XForLoopExpression__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XForLoopExpression__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXForLoopExpressionAccess().getEachExpressionAssignment_3()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XForLoopExpression__EachExpressionAssignment_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXForLoopExpressionAccess().getEachExpressionAssignment_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XForLoopExpression__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XForLoopExpression__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XForLoopExpression__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXForLoopExpressionAccess().getGroup_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XForLoopExpression__Group_0_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXForLoopExpressionAccess().getGroup_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XForLoopExpression__Group_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_134);
            rule__XForLoopExpression__Group_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XForLoopExpression__Group_0_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XForLoopExpression__Group_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXForLoopExpressionAccess().getXForLoopExpressionAction_0_0_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXForLoopExpressionAccess().getXForLoopExpressionAction_0_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XForLoopExpression__Group_0_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_43);
            rule__XForLoopExpression__Group_0_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XForLoopExpression__Group_0_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XForLoopExpression__Group_0_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXForLoopExpressionAccess().getForKeyword_0_0_1()); 
            }
            match(input,KW_For,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXForLoopExpressionAccess().getForKeyword_0_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XForLoopExpression__Group_0_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_68);
            rule__XForLoopExpression__Group_0_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XForLoopExpression__Group_0_0__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XForLoopExpression__Group_0_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXForLoopExpressionAccess().getLeftParenthesisKeyword_0_0_2()); 
            }
            match(input,KW_LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXForLoopExpressionAccess().getLeftParenthesisKeyword_0_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XForLoopExpression__Group_0_0__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_54);
            rule__XForLoopExpression__Group_0_0__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XForLoopExpression__Group_0_0__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XForLoopExpression__Group_0_0__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXForLoopExpressionAccess().getDeclaredParamAssignment_0_0_3()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XForLoopExpression__DeclaredParamAssignment_0_0_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXForLoopExpressionAccess().getDeclaredParamAssignment_0_0_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XForLoopExpression__Group_0_0__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XForLoopExpression__Group_0_0__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XForLoopExpression__Group_0_0__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXForLoopExpressionAccess().getColonKeyword_0_0_4()); 
            }
            match(input,KW_Colon,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXForLoopExpressionAccess().getColonKeyword_0_0_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBasicForLoopExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_134);
            rule__XBasicForLoopExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XBasicForLoopExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBasicForLoopExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXBasicForLoopExpressionAccess().getXBasicForLoopExpressionAction_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXBasicForLoopExpressionAccess().getXBasicForLoopExpressionAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBasicForLoopExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_43);
            rule__XBasicForLoopExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XBasicForLoopExpression__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBasicForLoopExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXBasicForLoopExpressionAccess().getForKeyword_1()); 
            }
            match(input,KW_For,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXBasicForLoopExpressionAccess().getForKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBasicForLoopExpression__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_135);
            rule__XBasicForLoopExpression__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XBasicForLoopExpression__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBasicForLoopExpression__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXBasicForLoopExpressionAccess().getLeftParenthesisKeyword_2()); 
            }
            match(input,KW_LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXBasicForLoopExpressionAccess().getLeftParenthesisKeyword_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBasicForLoopExpression__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_135);
            rule__XBasicForLoopExpression__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XBasicForLoopExpression__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBasicForLoopExpression__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXBasicForLoopExpressionAccess().getGroup_3()); 
            }
            int alt264=2;
            int LA264_0 = input.LA(1);

            if ( (LA264_0==KW_Package||(LA264_0>=KW_Class && LA264_0<=KW_LessThanSign)||(LA264_0>=KW_Extends && LA264_0<=KW_LeftCurlyBracket)||(LA264_0>=KW_Interface && LA264_0<=KW_LeftParenthesis)||(LA264_0>=KW_Extension && LA264_0<=KW_New)||(LA264_0>=KW_Public && LA264_0<=KW_Create)||(LA264_0>=KW_AFTER && LA264_0<=KW_Import)||LA264_0==KW_Try||LA264_0==KW_Switch||(LA264_0>=KW_NumberSign && LA264_0<=KW_LeftSquareBracket)||(LA264_0>=KW_PlusSign && LA264_0<=KW_HyphenMinus)||LA264_0==KW_ExclamationMark||LA264_0==KW_If||(LA264_0>=KW_For && LA264_0<=KW_Return)||(LA264_0>=RULE_ID && LA264_0<=RULE_RICH_TEXT_START)) ) {
                alt264=1;
            }
            switch (alt264) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XBasicForLoopExpression__Group_3__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXBasicForLoopExpressionAccess().getGroup_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBasicForLoopExpression__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_136);
            rule__XBasicForLoopExpression__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XBasicForLoopExpression__Group__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBasicForLoopExpression__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXBasicForLoopExpressionAccess().getSemicolonKeyword_4()); 
            }
            match(input,KW_Semicolon,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXBasicForLoopExpressionAccess().getSemicolonKeyword_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBasicForLoopExpression__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_136);
            rule__XBasicForLoopExpression__Group__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XBasicForLoopExpression__Group__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBasicForLoopExpression__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXBasicForLoopExpressionAccess().getExpressionAssignment_5()); 
            }
            int alt265=2;
            int LA265_0 = input.LA(1);

            if ( (LA265_0==KW_Package||(LA265_0>=KW_Class && LA265_0<=KW_LessThanSign)||(LA265_0>=KW_Extends && LA265_0<=KW_LeftCurlyBracket)||(LA265_0>=KW_Interface && LA265_0<=KW_LeftParenthesis)||(LA265_0>=KW_Extension && LA265_0<=KW_New)||(LA265_0>=KW_Public && LA265_0<=KW_Transient)||(LA265_0>=KW_Def && LA265_0<=KW_Create)||(LA265_0>=KW_AFTER && LA265_0<=KW_Import)||LA265_0==KW_Try||LA265_0==KW_Switch||(LA265_0>=KW_NumberSign && LA265_0<=KW_LeftSquareBracket)||(LA265_0>=KW_PlusSign && LA265_0<=KW_HyphenMinus)||LA265_0==KW_ExclamationMark||LA265_0==KW_If||(LA265_0>=KW_For && LA265_0<=KW_Return)||(LA265_0>=RULE_ID && LA265_0<=RULE_RICH_TEXT_START)) ) {
                alt265=1;
            }
            switch (alt265) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XBasicForLoopExpression__ExpressionAssignment_5();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXBasicForLoopExpressionAccess().getExpressionAssignment_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBasicForLoopExpression__Group__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_97);
            rule__XBasicForLoopExpression__Group__6__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XBasicForLoopExpression__Group__7();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBasicForLoopExpression__Group__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXBasicForLoopExpressionAccess().getSemicolonKeyword_6()); 
            }
            match(input,KW_Semicolon,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXBasicForLoopExpressionAccess().getSemicolonKeyword_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBasicForLoopExpression__Group__7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_97);
            rule__XBasicForLoopExpression__Group__7__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XBasicForLoopExpression__Group__8();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBasicForLoopExpression__Group__7__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXBasicForLoopExpressionAccess().getGroup_7()); 
            }
            int alt266=2;
            int LA266_0 = input.LA(1);

            if ( (LA266_0==KW_Package||(LA266_0>=KW_Class && LA266_0<=KW_LessThanSign)||(LA266_0>=KW_Extends && LA266_0<=KW_LeftCurlyBracket)||(LA266_0>=KW_Interface && LA266_0<=KW_LeftParenthesis)||(LA266_0>=KW_Extension && LA266_0<=KW_New)||(LA266_0>=KW_Public && LA266_0<=KW_Transient)||(LA266_0>=KW_Def && LA266_0<=KW_Create)||(LA266_0>=KW_AFTER && LA266_0<=KW_Import)||LA266_0==KW_Try||LA266_0==KW_Switch||(LA266_0>=KW_NumberSign && LA266_0<=KW_LeftSquareBracket)||(LA266_0>=KW_PlusSign && LA266_0<=KW_HyphenMinus)||LA266_0==KW_ExclamationMark||LA266_0==KW_If||(LA266_0>=KW_For && LA266_0<=KW_Return)||(LA266_0>=RULE_ID && LA266_0<=RULE_RICH_TEXT_START)) ) {
                alt266=1;
            }
            switch (alt266) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XBasicForLoopExpression__Group_7__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXBasicForLoopExpressionAccess().getGroup_7()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBasicForLoopExpression__Group__8() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XBasicForLoopExpression__Group__8__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XBasicForLoopExpression__Group__9();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBasicForLoopExpression__Group__8__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXBasicForLoopExpressionAccess().getRightParenthesisKeyword_8()); 
            }
            match(input,KW_RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXBasicForLoopExpressionAccess().getRightParenthesisKeyword_8()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBasicForLoopExpression__Group__9() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XBasicForLoopExpression__Group__9__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBasicForLoopExpression__Group__9__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXBasicForLoopExpressionAccess().getEachExpressionAssignment_9()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XBasicForLoopExpression__EachExpressionAssignment_9();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXBasicForLoopExpressionAccess().getEachExpressionAssignment_9()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBasicForLoopExpression__Group_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_19);
            rule__XBasicForLoopExpression__Group_3__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XBasicForLoopExpression__Group_3__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBasicForLoopExpression__Group_3__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXBasicForLoopExpressionAccess().getInitExpressionsAssignment_3_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XBasicForLoopExpression__InitExpressionsAssignment_3_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXBasicForLoopExpressionAccess().getInitExpressionsAssignment_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBasicForLoopExpression__Group_3__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XBasicForLoopExpression__Group_3__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBasicForLoopExpression__Group_3__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXBasicForLoopExpressionAccess().getGroup_3_1()); 
            }
            loop267:
            do {
                int alt267=2;
                int LA267_0 = input.LA(1);

                if ( (LA267_0==KW_Comma) ) {
                    alt267=1;
                }


                switch (alt267) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_17);
            	    rule__XBasicForLoopExpression__Group_3_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop267;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getXBasicForLoopExpressionAccess().getGroup_3_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBasicForLoopExpression__Group_3_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_137);
            rule__XBasicForLoopExpression__Group_3_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XBasicForLoopExpression__Group_3_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBasicForLoopExpression__Group_3_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXBasicForLoopExpressionAccess().getCommaKeyword_3_1_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXBasicForLoopExpressionAccess().getCommaKeyword_3_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBasicForLoopExpression__Group_3_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XBasicForLoopExpression__Group_3_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBasicForLoopExpression__Group_3_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXBasicForLoopExpressionAccess().getInitExpressionsAssignment_3_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XBasicForLoopExpression__InitExpressionsAssignment_3_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXBasicForLoopExpressionAccess().getInitExpressionsAssignment_3_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBasicForLoopExpression__Group_7__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_19);
            rule__XBasicForLoopExpression__Group_7__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XBasicForLoopExpression__Group_7__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBasicForLoopExpression__Group_7__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXBasicForLoopExpressionAccess().getUpdateExpressionsAssignment_7_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XBasicForLoopExpression__UpdateExpressionsAssignment_7_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXBasicForLoopExpressionAccess().getUpdateExpressionsAssignment_7_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBasicForLoopExpression__Group_7__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XBasicForLoopExpression__Group_7__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBasicForLoopExpression__Group_7__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXBasicForLoopExpressionAccess().getGroup_7_1()); 
            }
            loop268:
            do {
                int alt268=2;
                int LA268_0 = input.LA(1);

                if ( (LA268_0==KW_Comma) ) {
                    alt268=1;
                }


                switch (alt268) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_17);
            	    rule__XBasicForLoopExpression__Group_7_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop268;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getXBasicForLoopExpressionAccess().getGroup_7_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBasicForLoopExpression__Group_7_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XBasicForLoopExpression__Group_7_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XBasicForLoopExpression__Group_7_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBasicForLoopExpression__Group_7_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXBasicForLoopExpressionAccess().getCommaKeyword_7_1_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXBasicForLoopExpressionAccess().getCommaKeyword_7_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBasicForLoopExpression__Group_7_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XBasicForLoopExpression__Group_7_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBasicForLoopExpression__Group_7_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXBasicForLoopExpressionAccess().getUpdateExpressionsAssignment_7_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XBasicForLoopExpression__UpdateExpressionsAssignment_7_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXBasicForLoopExpressionAccess().getUpdateExpressionsAssignment_7_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XWhileExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_138);
            rule__XWhileExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XWhileExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XWhileExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXWhileExpressionAccess().getXWhileExpressionAction_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXWhileExpressionAccess().getXWhileExpressionAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XWhileExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_43);
            rule__XWhileExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XWhileExpression__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XWhileExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXWhileExpressionAccess().getWhileKeyword_1()); 
            }
            match(input,KW_While,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXWhileExpressionAccess().getWhileKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XWhileExpression__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XWhileExpression__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XWhileExpression__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XWhileExpression__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXWhileExpressionAccess().getLeftParenthesisKeyword_2()); 
            }
            match(input,KW_LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXWhileExpressionAccess().getLeftParenthesisKeyword_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XWhileExpression__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_81);
            rule__XWhileExpression__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XWhileExpression__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XWhileExpression__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXWhileExpressionAccess().getPredicateAssignment_3()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XWhileExpression__PredicateAssignment_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXWhileExpressionAccess().getPredicateAssignment_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XWhileExpression__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XWhileExpression__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XWhileExpression__Group__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XWhileExpression__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXWhileExpressionAccess().getRightParenthesisKeyword_4()); 
            }
            match(input,KW_RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXWhileExpressionAccess().getRightParenthesisKeyword_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XWhileExpression__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XWhileExpression__Group__5__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XWhileExpression__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXWhileExpressionAccess().getBodyAssignment_5()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XWhileExpression__BodyAssignment_5();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXWhileExpressionAccess().getBodyAssignment_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XDoWhileExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_139);
            rule__XDoWhileExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XDoWhileExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XDoWhileExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXDoWhileExpressionAccess().getXDoWhileExpressionAction_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXDoWhileExpressionAccess().getXDoWhileExpressionAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XDoWhileExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XDoWhileExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XDoWhileExpression__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XDoWhileExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXDoWhileExpressionAccess().getDoKeyword_1()); 
            }
            match(input,KW_Do,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXDoWhileExpressionAccess().getDoKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XDoWhileExpression__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_138);
            rule__XDoWhileExpression__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XDoWhileExpression__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XDoWhileExpression__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXDoWhileExpressionAccess().getBodyAssignment_2()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XDoWhileExpression__BodyAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXDoWhileExpressionAccess().getBodyAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XDoWhileExpression__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_43);
            rule__XDoWhileExpression__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XDoWhileExpression__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XDoWhileExpression__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXDoWhileExpressionAccess().getWhileKeyword_3()); 
            }
            match(input,KW_While,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXDoWhileExpressionAccess().getWhileKeyword_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XDoWhileExpression__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XDoWhileExpression__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XDoWhileExpression__Group__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XDoWhileExpression__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXDoWhileExpressionAccess().getLeftParenthesisKeyword_4()); 
            }
            match(input,KW_LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXDoWhileExpressionAccess().getLeftParenthesisKeyword_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XDoWhileExpression__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_81);
            rule__XDoWhileExpression__Group__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XDoWhileExpression__Group__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XDoWhileExpression__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXDoWhileExpressionAccess().getPredicateAssignment_5()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XDoWhileExpression__PredicateAssignment_5();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXDoWhileExpressionAccess().getPredicateAssignment_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XDoWhileExpression__Group__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XDoWhileExpression__Group__6__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XDoWhileExpression__Group__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXDoWhileExpressionAccess().getRightParenthesisKeyword_6()); 
            }
            match(input,KW_RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXDoWhileExpressionAccess().getRightParenthesisKeyword_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBlockExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_23);
            rule__XBlockExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XBlockExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBlockExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXBlockExpressionAccess().getXBlockExpressionAction_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXBlockExpressionAccess().getXBlockExpressionAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBlockExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_140);
            rule__XBlockExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XBlockExpression__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBlockExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXBlockExpressionAccess().getLeftCurlyBracketKeyword_1()); 
            }
            match(input,KW_LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXBlockExpressionAccess().getLeftCurlyBracketKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBlockExpression__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_140);
            rule__XBlockExpression__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XBlockExpression__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBlockExpression__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXBlockExpressionAccess().getGroup_2()); 
            }
            loop269:
            do {
                int alt269=2;
                int LA269_0 = input.LA(1);

                if ( (LA269_0==KW_Package||(LA269_0>=KW_Class && LA269_0<=KW_LessThanSign)||(LA269_0>=KW_Extends && LA269_0<=KW_LeftCurlyBracket)||(LA269_0>=KW_Interface && LA269_0<=KW_LeftParenthesis)||(LA269_0>=KW_Extension && LA269_0<=KW_New)||(LA269_0>=KW_Public && LA269_0<=KW_Create)||(LA269_0>=KW_AFTER && LA269_0<=KW_Import)||LA269_0==KW_Try||LA269_0==KW_Switch||(LA269_0>=KW_NumberSign && LA269_0<=KW_LeftSquareBracket)||(LA269_0>=KW_PlusSign && LA269_0<=KW_HyphenMinus)||LA269_0==KW_ExclamationMark||LA269_0==KW_If||(LA269_0>=KW_For && LA269_0<=KW_Return)||(LA269_0>=RULE_ID && LA269_0<=RULE_RICH_TEXT_START)) ) {
                    alt269=1;
                }


                switch (alt269) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_131);
            	    rule__XBlockExpression__Group_2__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop269;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getXBlockExpressionAccess().getGroup_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBlockExpression__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XBlockExpression__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBlockExpression__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXBlockExpressionAccess().getRightCurlyBracketKeyword_3()); 
            }
            match(input,KW_RightCurlyBracket,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXBlockExpressionAccess().getRightCurlyBracketKeyword_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBlockExpression__Group_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_8);
            rule__XBlockExpression__Group_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XBlockExpression__Group_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBlockExpression__Group_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXBlockExpressionAccess().getExpressionsAssignment_2_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XBlockExpression__ExpressionsAssignment_2_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXBlockExpressionAccess().getExpressionsAssignment_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBlockExpression__Group_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XBlockExpression__Group_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBlockExpression__Group_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXBlockExpressionAccess().getSemicolonKeyword_2_1()); 
            }
            int alt270=2;
            int LA270_0 = input.LA(1);

            if ( (LA270_0==KW_Semicolon) ) {
                alt270=1;
            }
            switch (alt270) {
                case 1 :
                    {
                    match(input,KW_Semicolon,FOLLOW_2); if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXBlockExpressionAccess().getSemicolonKeyword_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_125);
            rule__XFeatureCall__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XFeatureCall__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFeatureCallAccess().getXFeatureCallAction_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXFeatureCallAccess().getXFeatureCallAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_125);
            rule__XFeatureCall__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XFeatureCall__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFeatureCallAccess().getGroup_1()); 
            }
            int alt271=2;
            int LA271_0 = input.LA(1);

            if ( (LA271_0==KW_LessThanSign) ) {
                alt271=1;
            }
            switch (alt271) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XFeatureCall__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXFeatureCallAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_126);
            rule__XFeatureCall__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XFeatureCall__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFeatureCallAccess().getFeatureAssignment_2()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XFeatureCall__FeatureAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXFeatureCallAccess().getFeatureAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_126);
            rule__XFeatureCall__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XFeatureCall__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFeatureCallAccess().getGroup_3()); 
            }
            int alt272=2;
            alt272 = dfa272.predict(input);
            switch (alt272) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XFeatureCall__Group_3__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXFeatureCallAccess().getGroup_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XFeatureCall__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFeatureCallAccess().getFeatureCallArgumentsAssignment_4()); 
            }
            int alt273=2;
            alt273 = dfa273.predict(input);
            switch (alt273) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XFeatureCall__FeatureCallArgumentsAssignment_4();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXFeatureCallAccess().getFeatureCallArgumentsAssignment_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_51);
            rule__XFeatureCall__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XFeatureCall__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFeatureCallAccess().getLessThanSignKeyword_1_0()); 
            }
            match(input,KW_LessThanSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXFeatureCallAccess().getLessThanSignKeyword_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_16);
            rule__XFeatureCall__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XFeatureCall__Group_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFeatureCallAccess().getTypeArgumentsAssignment_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XFeatureCall__TypeArgumentsAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXFeatureCallAccess().getTypeArgumentsAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__Group_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_16);
            rule__XFeatureCall__Group_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XFeatureCall__Group_1__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__Group_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFeatureCallAccess().getGroup_1_2()); 
            }
            loop274:
            do {
                int alt274=2;
                int LA274_0 = input.LA(1);

                if ( (LA274_0==KW_Comma) ) {
                    alt274=1;
                }


                switch (alt274) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_17);
            	    rule__XFeatureCall__Group_1_2__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop274;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getXFeatureCallAccess().getGroup_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__Group_1__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XFeatureCall__Group_1__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__Group_1__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFeatureCallAccess().getGreaterThanSignKeyword_1_3()); 
            }
            match(input,KW_GreaterThanSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXFeatureCallAccess().getGreaterThanSignKeyword_1_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__Group_1_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_51);
            rule__XFeatureCall__Group_1_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XFeatureCall__Group_1_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__Group_1_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFeatureCallAccess().getCommaKeyword_1_2_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXFeatureCallAccess().getCommaKeyword_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__Group_1_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XFeatureCall__Group_1_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__Group_1_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFeatureCallAccess().getTypeArgumentsAssignment_1_2_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XFeatureCall__TypeArgumentsAssignment_1_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXFeatureCallAccess().getTypeArgumentsAssignment_1_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__Group_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_74);
            rule__XFeatureCall__Group_3__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XFeatureCall__Group_3__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__Group_3__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFeatureCallAccess().getExplicitOperationCallAssignment_3_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XFeatureCall__ExplicitOperationCallAssignment_3_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXFeatureCallAccess().getExplicitOperationCallAssignment_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__Group_3__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_74);
            rule__XFeatureCall__Group_3__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XFeatureCall__Group_3__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__Group_3__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFeatureCallAccess().getAlternatives_3_1()); 
            }
            int alt275=2;
            int LA275_0 = input.LA(1);

            if ( (LA275_0==KW_Package||(LA275_0>=KW_Class && LA275_0<=KW_LessThanSign)||(LA275_0>=KW_Extends && LA275_0<=KW_LeftCurlyBracket)||(LA275_0>=KW_Interface && LA275_0<=KW_LeftParenthesis)||LA275_0==KW_EqualsSignGreaterThanSign||(LA275_0>=KW_Extension && LA275_0<=KW_New)||(LA275_0>=KW_Public && LA275_0<=KW_Transient)||(LA275_0>=KW_Def && LA275_0<=KW_Create)||(LA275_0>=KW_AFTER && LA275_0<=KW_Import)||LA275_0==KW_Try||(LA275_0>=KW_VerticalLine && LA275_0<=KW_Switch)||(LA275_0>=KW_NumberSign && LA275_0<=KW_LeftSquareBracket)||(LA275_0>=KW_PlusSign && LA275_0<=KW_HyphenMinus)||LA275_0==KW_ExclamationMark||LA275_0==KW_If||(LA275_0>=KW_For && LA275_0<=KW_Return)||(LA275_0>=RULE_ID && LA275_0<=RULE_RICH_TEXT_START)) ) {
                alt275=1;
            }
            switch (alt275) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XFeatureCall__Alternatives_3_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXFeatureCallAccess().getAlternatives_3_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__Group_3__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XFeatureCall__Group_3__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__Group_3__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFeatureCallAccess().getRightParenthesisKeyword_3_2()); 
            }
            match(input,KW_RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXFeatureCallAccess().getRightParenthesisKeyword_3_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__Group_3_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_19);
            rule__XFeatureCall__Group_3_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XFeatureCall__Group_3_1_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__Group_3_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFeatureCallAccess().getFeatureCallArgumentsAssignment_3_1_1_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XFeatureCall__FeatureCallArgumentsAssignment_3_1_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXFeatureCallAccess().getFeatureCallArgumentsAssignment_3_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__Group_3_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XFeatureCall__Group_3_1_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__Group_3_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFeatureCallAccess().getGroup_3_1_1_1()); 
            }
            loop276:
            do {
                int alt276=2;
                int LA276_0 = input.LA(1);

                if ( (LA276_0==KW_Comma) ) {
                    alt276=1;
                }


                switch (alt276) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_17);
            	    rule__XFeatureCall__Group_3_1_1_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop276;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getXFeatureCallAccess().getGroup_3_1_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__Group_3_1_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XFeatureCall__Group_3_1_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XFeatureCall__Group_3_1_1_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__Group_3_1_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFeatureCallAccess().getCommaKeyword_3_1_1_1_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXFeatureCallAccess().getCommaKeyword_3_1_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__Group_3_1_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XFeatureCall__Group_3_1_1_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__Group_3_1_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFeatureCallAccess().getFeatureCallArgumentsAssignment_3_1_1_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XFeatureCall__FeatureCallArgumentsAssignment_3_1_1_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXFeatureCallAccess().getFeatureCallArgumentsAssignment_3_1_1_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBooleanLiteral__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_141);
            rule__XBooleanLiteral__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XBooleanLiteral__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBooleanLiteral__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXBooleanLiteralAccess().getXBooleanLiteralAction_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXBooleanLiteralAccess().getXBooleanLiteralAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBooleanLiteral__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XBooleanLiteral__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBooleanLiteral__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXBooleanLiteralAccess().getAlternatives_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XBooleanLiteral__Alternatives_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXBooleanLiteralAccess().getAlternatives_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XNullLiteral__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_142);
            rule__XNullLiteral__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XNullLiteral__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XNullLiteral__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXNullLiteralAccess().getXNullLiteralAction_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXNullLiteralAccess().getXNullLiteralAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XNullLiteral__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XNullLiteral__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XNullLiteral__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXNullLiteralAccess().getNullKeyword_1()); 
            }
            match(input,KW_Null,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXNullLiteralAccess().getNullKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XNumberLiteral__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_143);
            rule__XNumberLiteral__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XNumberLiteral__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XNumberLiteral__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXNumberLiteralAccess().getXNumberLiteralAction_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXNumberLiteralAccess().getXNumberLiteralAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XNumberLiteral__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XNumberLiteral__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XNumberLiteral__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXNumberLiteralAccess().getValueAssignment_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XNumberLiteral__ValueAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXNumberLiteralAccess().getValueAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTypeLiteral__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_144);
            rule__XTypeLiteral__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XTypeLiteral__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTypeLiteral__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTypeLiteralAccess().getXTypeLiteralAction_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXTypeLiteralAccess().getXTypeLiteralAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTypeLiteral__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_43);
            rule__XTypeLiteral__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XTypeLiteral__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTypeLiteral__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTypeLiteralAccess().getTypeofKeyword_1()); 
            }
            match(input,KW_Typeof,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXTypeLiteralAccess().getTypeofKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTypeLiteral__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__XTypeLiteral__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XTypeLiteral__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTypeLiteral__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTypeLiteralAccess().getLeftParenthesisKeyword_2()); 
            }
            match(input,KW_LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXTypeLiteralAccess().getLeftParenthesisKeyword_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTypeLiteral__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_145);
            rule__XTypeLiteral__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XTypeLiteral__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTypeLiteral__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTypeLiteralAccess().getTypeAssignment_3()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XTypeLiteral__TypeAssignment_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXTypeLiteralAccess().getTypeAssignment_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTypeLiteral__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_145);
            rule__XTypeLiteral__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XTypeLiteral__Group__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTypeLiteral__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTypeLiteralAccess().getArrayDimensionsAssignment_4()); 
            }
            loop277:
            do {
                int alt277=2;
                int LA277_0 = input.LA(1);

                if ( (LA277_0==KW_LeftSquareBracket) ) {
                    alt277=1;
                }


                switch (alt277) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_49);
            	    rule__XTypeLiteral__ArrayDimensionsAssignment_4();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop277;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getXTypeLiteralAccess().getArrayDimensionsAssignment_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTypeLiteral__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XTypeLiteral__Group__5__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTypeLiteral__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTypeLiteralAccess().getRightParenthesisKeyword_5()); 
            }
            match(input,KW_RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXTypeLiteralAccess().getRightParenthesisKeyword_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XThrowExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_146);
            rule__XThrowExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XThrowExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XThrowExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXThrowExpressionAccess().getXThrowExpressionAction_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXThrowExpressionAccess().getXThrowExpressionAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XThrowExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XThrowExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XThrowExpression__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XThrowExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXThrowExpressionAccess().getThrowKeyword_1()); 
            }
            match(input,KW_Throw,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXThrowExpressionAccess().getThrowKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XThrowExpression__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XThrowExpression__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XThrowExpression__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXThrowExpressionAccess().getExpressionAssignment_2()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XThrowExpression__ExpressionAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXThrowExpressionAccess().getExpressionAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XReturnExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_147);
            rule__XReturnExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XReturnExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XReturnExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXReturnExpressionAccess().getXReturnExpressionAction_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXReturnExpressionAccess().getXReturnExpressionAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XReturnExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XReturnExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XReturnExpression__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XReturnExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXReturnExpressionAccess().getReturnKeyword_1()); 
            }
            match(input,KW_Return,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXReturnExpressionAccess().getReturnKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XReturnExpression__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XReturnExpression__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XReturnExpression__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXReturnExpressionAccess().getExpressionAssignment_2()); 
            }
            int alt278=2;
            alt278 = dfa278.predict(input);
            switch (alt278) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XReturnExpression__ExpressionAssignment_2();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXReturnExpressionAccess().getExpressionAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSynchronizedExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XSynchronizedExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XSynchronizedExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSynchronizedExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSynchronizedExpressionAccess().getGroup_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XSynchronizedExpression__Group_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXSynchronizedExpressionAccess().getGroup_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSynchronizedExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_81);
            rule__XSynchronizedExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XSynchronizedExpression__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSynchronizedExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSynchronizedExpressionAccess().getParamAssignment_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XSynchronizedExpression__ParamAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXSynchronizedExpressionAccess().getParamAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSynchronizedExpression__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XSynchronizedExpression__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XSynchronizedExpression__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSynchronizedExpression__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSynchronizedExpressionAccess().getRightParenthesisKeyword_2()); 
            }
            match(input,KW_RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXSynchronizedExpressionAccess().getRightParenthesisKeyword_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSynchronizedExpression__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XSynchronizedExpression__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSynchronizedExpression__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSynchronizedExpressionAccess().getExpressionAssignment_3()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XSynchronizedExpression__ExpressionAssignment_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXSynchronizedExpressionAccess().getExpressionAssignment_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSynchronizedExpression__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XSynchronizedExpression__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSynchronizedExpression__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSynchronizedExpressionAccess().getGroup_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XSynchronizedExpression__Group_0_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXSynchronizedExpressionAccess().getGroup_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSynchronizedExpression__Group_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_148);
            rule__XSynchronizedExpression__Group_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XSynchronizedExpression__Group_0_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSynchronizedExpression__Group_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSynchronizedExpressionAccess().getXSynchronizedExpressionAction_0_0_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXSynchronizedExpressionAccess().getXSynchronizedExpressionAction_0_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSynchronizedExpression__Group_0_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_43);
            rule__XSynchronizedExpression__Group_0_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XSynchronizedExpression__Group_0_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSynchronizedExpression__Group_0_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSynchronizedExpressionAccess().getSynchronizedKeyword_0_0_1()); 
            }
            match(input,KW_Synchronized,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXSynchronizedExpressionAccess().getSynchronizedKeyword_0_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSynchronizedExpression__Group_0_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XSynchronizedExpression__Group_0_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSynchronizedExpression__Group_0_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSynchronizedExpressionAccess().getLeftParenthesisKeyword_0_0_2()); 
            }
            match(input,KW_LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXSynchronizedExpressionAccess().getLeftParenthesisKeyword_0_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCatchClause__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_43);
            rule__XCatchClause__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XCatchClause__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCatchClause__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXCatchClauseAccess().getCatchKeyword_0()); 
            }
            {
            match(input,KW_Catch,FOLLOW_2); if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXCatchClauseAccess().getCatchKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCatchClause__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_28);
            rule__XCatchClause__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XCatchClause__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCatchClause__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXCatchClauseAccess().getLeftParenthesisKeyword_1()); 
            }
            match(input,KW_LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXCatchClauseAccess().getLeftParenthesisKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCatchClause__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_81);
            rule__XCatchClause__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XCatchClause__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCatchClause__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXCatchClauseAccess().getDeclaredParamAssignment_2()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XCatchClause__DeclaredParamAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXCatchClauseAccess().getDeclaredParamAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCatchClause__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_33);
            rule__XCatchClause__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XCatchClause__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCatchClause__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXCatchClauseAccess().getRightParenthesisKeyword_3()); 
            }
            match(input,KW_RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXCatchClauseAccess().getRightParenthesisKeyword_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCatchClause__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XCatchClause__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCatchClause__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXCatchClauseAccess().getExpressionAssignment_4()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XCatchClause__ExpressionAssignment_4();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXCatchClauseAccess().getExpressionAssignment_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__QualifiedName__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_52);
            rule__QualifiedName__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__QualifiedName__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__QualifiedName__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleValidID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__QualifiedName__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__QualifiedName__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__QualifiedName__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getQualifiedNameAccess().getGroup_1()); 
            }
            loop279:
            do {
                int alt279=2;
                alt279 = dfa279.predict(input);
                switch (alt279) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_53);
            	    rule__QualifiedName__Group_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop279;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getQualifiedNameAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__QualifiedName__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__QualifiedName__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__QualifiedName__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__QualifiedName__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
            }
            {
            match(input,KW_FullStop,FOLLOW_2); if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__QualifiedName__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__QualifiedName__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__QualifiedName__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_1_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleValidID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Number__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_52);
            rule__Number__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Number__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Number__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getNumberAccess().getAlternatives_1_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Number__Alternatives_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getNumberAccess().getAlternatives_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Number__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Number__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Number__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getNumberAccess().getGroup_1_1()); 
            }
            int alt280=2;
            int LA280_0 = input.LA(1);

            if ( (LA280_0==KW_FullStop) ) {
                int LA280_1 = input.LA(2);

                if ( ((LA280_1>=RULE_INT && LA280_1<=RULE_DECIMAL)) ) {
                    alt280=1;
                }
            }
            switch (alt280) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__Number__Group_1_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getNumberAccess().getGroup_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Number__Group_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_149);
            rule__Number__Group_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Number__Group_1_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Number__Group_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getNumberAccess().getFullStopKeyword_1_1_0()); 
            }
            match(input,KW_FullStop,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getNumberAccess().getFullStopKeyword_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Number__Group_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__Number__Group_1_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Number__Group_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getNumberAccess().getAlternatives_1_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__Number__Alternatives_1_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getNumberAccess().getAlternatives_1_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmTypeReference__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_48);
            rule__JvmTypeReference__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__JvmTypeReference__Group_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmTypeReference__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmTypeReferenceAccess().getJvmParameterizedTypeReferenceParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmParameterizedTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getJvmTypeReferenceAccess().getJvmParameterizedTypeReferenceParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmTypeReference__Group_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__JvmTypeReference__Group_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmTypeReference__Group_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmTypeReferenceAccess().getGroup_0_1()); 
            }
            loop281:
            do {
                int alt281=2;
                int LA281_0 = input.LA(1);

                if ( (LA281_0==KW_LeftSquareBracket) ) {
                    int LA281_2 = input.LA(2);

                    if ( (LA281_2==KW_RightSquareBracket) ) {
                        int LA281_3 = input.LA(3);

                        if ( (synpred387_InternalXtend()) ) {
                            alt281=1;
                        }


                    }


                }


                switch (alt281) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_49);
            	    rule__JvmTypeReference__Group_0_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop281;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmTypeReferenceAccess().getGroup_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmTypeReference__Group_0_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__JvmTypeReference__Group_0_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmTypeReference__Group_0_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmTypeReferenceAccess().getGroup_0_1_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__JvmTypeReference__Group_0_1_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmTypeReferenceAccess().getGroup_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmTypeReference__Group_0_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_48);
            rule__JvmTypeReference__Group_0_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__JvmTypeReference__Group_0_1_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmTypeReference__Group_0_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmTypeReferenceAccess().getJvmGenericArrayTypeReferenceComponentTypeAction_0_1_0_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmTypeReferenceAccess().getJvmGenericArrayTypeReferenceComponentTypeAction_0_1_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmTypeReference__Group_0_1_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__JvmTypeReference__Group_0_1_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmTypeReference__Group_0_1_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmTypeReferenceAccess().getArrayBracketsParserRuleCall_0_1_0_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleArrayBrackets();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getJvmTypeReferenceAccess().getArrayBracketsParserRuleCall_0_1_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ArrayBrackets__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_129);
            rule__ArrayBrackets__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ArrayBrackets__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ArrayBrackets__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getArrayBracketsAccess().getLeftSquareBracketKeyword_0()); 
            }
            match(input,KW_LeftSquareBracket,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getArrayBracketsAccess().getLeftSquareBracketKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ArrayBrackets__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__ArrayBrackets__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ArrayBrackets__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getArrayBracketsAccess().getRightSquareBracketKeyword_1()); 
            }
            match(input,KW_RightSquareBracket,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getArrayBracketsAccess().getRightSquareBracketKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionTypeRef__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_28);
            rule__XFunctionTypeRef__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XFunctionTypeRef__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionTypeRef__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFunctionTypeRefAccess().getGroup_0()); 
            }
            int alt282=2;
            int LA282_0 = input.LA(1);

            if ( (LA282_0==KW_LeftParenthesis) ) {
                alt282=1;
            }
            switch (alt282) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XFunctionTypeRef__Group_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXFunctionTypeRefAccess().getGroup_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionTypeRef__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_28);
            rule__XFunctionTypeRef__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XFunctionTypeRef__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionTypeRef__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFunctionTypeRefAccess().getEqualsSignGreaterThanSignKeyword_1()); 
            }
            match(input,KW_EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXFunctionTypeRefAccess().getEqualsSignGreaterThanSignKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionTypeRef__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XFunctionTypeRef__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionTypeRef__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFunctionTypeRefAccess().getReturnTypeAssignment_2()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XFunctionTypeRef__ReturnTypeAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXFunctionTypeRefAccess().getReturnTypeAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionTypeRef__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_29);
            rule__XFunctionTypeRef__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XFunctionTypeRef__Group_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionTypeRef__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFunctionTypeRefAccess().getLeftParenthesisKeyword_0_0()); 
            }
            match(input,KW_LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXFunctionTypeRefAccess().getLeftParenthesisKeyword_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionTypeRef__Group_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_29);
            rule__XFunctionTypeRef__Group_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XFunctionTypeRef__Group_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionTypeRef__Group_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFunctionTypeRefAccess().getGroup_0_1()); 
            }
            int alt283=2;
            int LA283_0 = input.LA(1);

            if ( ((LA283_0>=KW_Annotation && LA283_0<=KW_LeftParenthesis)||LA283_0==KW_EqualsSignGreaterThanSign||LA283_0==KW_Create||(LA283_0>=KW_AFTER && LA283_0<=KW_SEPARATOR)||LA283_0==RULE_ID) ) {
                alt283=1;
            }
            switch (alt283) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XFunctionTypeRef__Group_0_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXFunctionTypeRefAccess().getGroup_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionTypeRef__Group_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XFunctionTypeRef__Group_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionTypeRef__Group_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFunctionTypeRefAccess().getRightParenthesisKeyword_0_2()); 
            }
            match(input,KW_RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXFunctionTypeRefAccess().getRightParenthesisKeyword_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionTypeRef__Group_0_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_19);
            rule__XFunctionTypeRef__Group_0_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XFunctionTypeRef__Group_0_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionTypeRef__Group_0_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFunctionTypeRefAccess().getParamTypesAssignment_0_1_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XFunctionTypeRef__ParamTypesAssignment_0_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXFunctionTypeRefAccess().getParamTypesAssignment_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionTypeRef__Group_0_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XFunctionTypeRef__Group_0_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionTypeRef__Group_0_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFunctionTypeRefAccess().getGroup_0_1_1()); 
            }
            loop284:
            do {
                int alt284=2;
                int LA284_0 = input.LA(1);

                if ( (LA284_0==KW_Comma) ) {
                    alt284=1;
                }


                switch (alt284) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_17);
            	    rule__XFunctionTypeRef__Group_0_1_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop284;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getXFunctionTypeRefAccess().getGroup_0_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionTypeRef__Group_0_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_28);
            rule__XFunctionTypeRef__Group_0_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XFunctionTypeRef__Group_0_1_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionTypeRef__Group_0_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFunctionTypeRefAccess().getCommaKeyword_0_1_1_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXFunctionTypeRefAccess().getCommaKeyword_0_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionTypeRef__Group_0_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XFunctionTypeRef__Group_0_1_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionTypeRef__Group_0_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFunctionTypeRefAccess().getParamTypesAssignment_0_1_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XFunctionTypeRef__ParamTypesAssignment_0_1_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXFunctionTypeRefAccess().getParamTypesAssignment_0_1_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_50);
            rule__JvmParameterizedTypeReference__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__JvmParameterizedTypeReference__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmParameterizedTypeReferenceAccess().getTypeAssignment_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__JvmParameterizedTypeReference__TypeAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmParameterizedTypeReferenceAccess().getTypeAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__JvmParameterizedTypeReference__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmParameterizedTypeReferenceAccess().getGroup_1()); 
            }
            int alt285=2;
            alt285 = dfa285.predict(input);
            switch (alt285) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__JvmParameterizedTypeReference__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmParameterizedTypeReferenceAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_51);
            rule__JvmParameterizedTypeReference__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__JvmParameterizedTypeReference__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmParameterizedTypeReferenceAccess().getLessThanSignKeyword_1_0()); 
            }
            {
            match(input,KW_LessThanSign,FOLLOW_2); if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmParameterizedTypeReferenceAccess().getLessThanSignKeyword_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_16);
            rule__JvmParameterizedTypeReference__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__JvmParameterizedTypeReference__Group_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsAssignment_1_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__JvmParameterizedTypeReference__ArgumentsAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__Group_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_16);
            rule__JvmParameterizedTypeReference__Group_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__JvmParameterizedTypeReference__Group_1__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__Group_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmParameterizedTypeReferenceAccess().getGroup_1_2()); 
            }
            loop286:
            do {
                int alt286=2;
                int LA286_0 = input.LA(1);

                if ( (LA286_0==KW_Comma) ) {
                    alt286=1;
                }


                switch (alt286) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_17);
            	    rule__JvmParameterizedTypeReference__Group_1_2__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop286;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmParameterizedTypeReferenceAccess().getGroup_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__Group_1__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_52);
            rule__JvmParameterizedTypeReference__Group_1__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__JvmParameterizedTypeReference__Group_1__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__Group_1__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmParameterizedTypeReferenceAccess().getGreaterThanSignKeyword_1_3()); 
            }
            match(input,KW_GreaterThanSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getJvmParameterizedTypeReferenceAccess().getGreaterThanSignKeyword_1_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__Group_1__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__JvmParameterizedTypeReference__Group_1__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__Group_1__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmParameterizedTypeReferenceAccess().getGroup_1_4()); 
            }
            loop287:
            do {
                int alt287=2;
                alt287 = dfa287.predict(input);
                switch (alt287) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_53);
            	    rule__JvmParameterizedTypeReference__Group_1_4__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop287;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmParameterizedTypeReferenceAccess().getGroup_1_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__Group_1_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_51);
            rule__JvmParameterizedTypeReference__Group_1_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__JvmParameterizedTypeReference__Group_1_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__Group_1_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmParameterizedTypeReferenceAccess().getCommaKeyword_1_2_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getJvmParameterizedTypeReferenceAccess().getCommaKeyword_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__Group_1_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__JvmParameterizedTypeReference__Group_1_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__Group_1_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsAssignment_1_2_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__JvmParameterizedTypeReference__ArgumentsAssignment_1_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsAssignment_1_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__Group_1_4__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_7);
            rule__JvmParameterizedTypeReference__Group_1_4__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__JvmParameterizedTypeReference__Group_1_4__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__Group_1_4__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmParameterizedTypeReferenceAccess().getGroup_1_4_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__JvmParameterizedTypeReference__Group_1_4_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmParameterizedTypeReferenceAccess().getGroup_1_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__Group_1_4__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_50);
            rule__JvmParameterizedTypeReference__Group_1_4__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__JvmParameterizedTypeReference__Group_1_4__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__Group_1_4__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmParameterizedTypeReferenceAccess().getTypeAssignment_1_4_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__JvmParameterizedTypeReference__TypeAssignment_1_4_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmParameterizedTypeReferenceAccess().getTypeAssignment_1_4_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__Group_1_4__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__JvmParameterizedTypeReference__Group_1_4__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__Group_1_4__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmParameterizedTypeReferenceAccess().getGroup_1_4_2()); 
            }
            int alt288=2;
            alt288 = dfa288.predict(input);
            switch (alt288) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__JvmParameterizedTypeReference__Group_1_4_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmParameterizedTypeReferenceAccess().getGroup_1_4_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__Group_1_4_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__JvmParameterizedTypeReference__Group_1_4_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__Group_1_4_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmParameterizedTypeReferenceAccess().getGroup_1_4_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__JvmParameterizedTypeReference__Group_1_4_0_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmParameterizedTypeReferenceAccess().getGroup_1_4_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__Group_1_4_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_52);
            rule__JvmParameterizedTypeReference__Group_1_4_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__JvmParameterizedTypeReference__Group_1_4_0_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__Group_1_4_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmParameterizedTypeReferenceAccess().getJvmInnerTypeReferenceOuterAction_1_4_0_0_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmParameterizedTypeReferenceAccess().getJvmInnerTypeReferenceOuterAction_1_4_0_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__Group_1_4_0_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__JvmParameterizedTypeReference__Group_1_4_0_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__Group_1_4_0_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmParameterizedTypeReferenceAccess().getFullStopKeyword_1_4_0_0_1()); 
            }
            match(input,KW_FullStop,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getJvmParameterizedTypeReferenceAccess().getFullStopKeyword_1_4_0_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__Group_1_4_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_51);
            rule__JvmParameterizedTypeReference__Group_1_4_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__JvmParameterizedTypeReference__Group_1_4_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__Group_1_4_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmParameterizedTypeReferenceAccess().getLessThanSignKeyword_1_4_2_0()); 
            }
            {
            match(input,KW_LessThanSign,FOLLOW_2); if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmParameterizedTypeReferenceAccess().getLessThanSignKeyword_1_4_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__Group_1_4_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_16);
            rule__JvmParameterizedTypeReference__Group_1_4_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__JvmParameterizedTypeReference__Group_1_4_2__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__Group_1_4_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsAssignment_1_4_2_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__JvmParameterizedTypeReference__ArgumentsAssignment_1_4_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsAssignment_1_4_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__Group_1_4_2__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_16);
            rule__JvmParameterizedTypeReference__Group_1_4_2__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__JvmParameterizedTypeReference__Group_1_4_2__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__Group_1_4_2__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmParameterizedTypeReferenceAccess().getGroup_1_4_2_2()); 
            }
            loop289:
            do {
                int alt289=2;
                int LA289_0 = input.LA(1);

                if ( (LA289_0==KW_Comma) ) {
                    alt289=1;
                }


                switch (alt289) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_17);
            	    rule__JvmParameterizedTypeReference__Group_1_4_2_2__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop289;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmParameterizedTypeReferenceAccess().getGroup_1_4_2_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__Group_1_4_2__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__JvmParameterizedTypeReference__Group_1_4_2__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__Group_1_4_2__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmParameterizedTypeReferenceAccess().getGreaterThanSignKeyword_1_4_2_3()); 
            }
            match(input,KW_GreaterThanSign,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getJvmParameterizedTypeReferenceAccess().getGreaterThanSignKeyword_1_4_2_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__Group_1_4_2_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_51);
            rule__JvmParameterizedTypeReference__Group_1_4_2_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__JvmParameterizedTypeReference__Group_1_4_2_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__Group_1_4_2_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmParameterizedTypeReferenceAccess().getCommaKeyword_1_4_2_2_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getJvmParameterizedTypeReferenceAccess().getCommaKeyword_1_4_2_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__Group_1_4_2_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__JvmParameterizedTypeReference__Group_1_4_2_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__Group_1_4_2_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsAssignment_1_4_2_2_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__JvmParameterizedTypeReference__ArgumentsAssignment_1_4_2_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsAssignment_1_4_2_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmWildcardTypeReference__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_51);
            rule__JvmWildcardTypeReference__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__JvmWildcardTypeReference__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmWildcardTypeReference__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmWildcardTypeReferenceAccess().getJvmWildcardTypeReferenceAction_0()); 
            }
            {
            }

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmWildcardTypeReferenceAccess().getJvmWildcardTypeReferenceAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmWildcardTypeReference__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_150);
            rule__JvmWildcardTypeReference__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__JvmWildcardTypeReference__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmWildcardTypeReference__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmWildcardTypeReferenceAccess().getQuestionMarkKeyword_1()); 
            }
            match(input,KW_QuestionMark,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getJvmWildcardTypeReferenceAccess().getQuestionMarkKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmWildcardTypeReference__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__JvmWildcardTypeReference__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmWildcardTypeReference__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmWildcardTypeReferenceAccess().getAlternatives_2()); 
            }
            int alt290=2;
            int LA290_0 = input.LA(1);

            if ( (LA290_0==KW_Extends||LA290_0==KW_Super) ) {
                alt290=1;
            }
            switch (alt290) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__JvmWildcardTypeReference__Alternatives_2();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmWildcardTypeReferenceAccess().getAlternatives_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmWildcardTypeReference__Group_2_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_151);
            rule__JvmWildcardTypeReference__Group_2_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__JvmWildcardTypeReference__Group_2_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmWildcardTypeReference__Group_2_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsAssignment_2_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__JvmWildcardTypeReference__ConstraintsAssignment_2_0_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsAssignment_2_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmWildcardTypeReference__Group_2_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__JvmWildcardTypeReference__Group_2_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmWildcardTypeReference__Group_2_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsAssignment_2_0_1()); 
            }
            loop291:
            do {
                int alt291=2;
                int LA291_0 = input.LA(1);

                if ( (LA291_0==KW_Ampersand) ) {
                    alt291=1;
                }


                switch (alt291) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_152);
            	    rule__JvmWildcardTypeReference__ConstraintsAssignment_2_0_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop291;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsAssignment_2_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmWildcardTypeReference__Group_2_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_151);
            rule__JvmWildcardTypeReference__Group_2_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__JvmWildcardTypeReference__Group_2_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmWildcardTypeReference__Group_2_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsAssignment_2_1_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__JvmWildcardTypeReference__ConstraintsAssignment_2_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsAssignment_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmWildcardTypeReference__Group_2_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__JvmWildcardTypeReference__Group_2_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmWildcardTypeReference__Group_2_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsAssignment_2_1_1()); 
            }
            loop292:
            do {
                int alt292=2;
                int LA292_0 = input.LA(1);

                if ( (LA292_0==KW_Ampersand) ) {
                    alt292=1;
                }


                switch (alt292) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_152);
            	    rule__JvmWildcardTypeReference__ConstraintsAssignment_2_1_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop292;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsAssignment_2_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmUpperBound__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_28);
            rule__JvmUpperBound__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__JvmUpperBound__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmUpperBound__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmUpperBoundAccess().getExtendsKeyword_0()); 
            }
            match(input,KW_Extends,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getJvmUpperBoundAccess().getExtendsKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmUpperBound__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__JvmUpperBound__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmUpperBound__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmUpperBoundAccess().getTypeReferenceAssignment_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__JvmUpperBound__TypeReferenceAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmUpperBoundAccess().getTypeReferenceAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmUpperBoundAnded__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_28);
            rule__JvmUpperBoundAnded__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__JvmUpperBoundAnded__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmUpperBoundAnded__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmUpperBoundAndedAccess().getAmpersandKeyword_0()); 
            }
            match(input,KW_Ampersand,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getJvmUpperBoundAndedAccess().getAmpersandKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmUpperBoundAnded__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__JvmUpperBoundAnded__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmUpperBoundAnded__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmUpperBoundAndedAccess().getTypeReferenceAssignment_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__JvmUpperBoundAnded__TypeReferenceAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmUpperBoundAndedAccess().getTypeReferenceAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmLowerBound__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_28);
            rule__JvmLowerBound__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__JvmLowerBound__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmLowerBound__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmLowerBoundAccess().getSuperKeyword_0()); 
            }
            match(input,KW_Super,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getJvmLowerBoundAccess().getSuperKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmLowerBound__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__JvmLowerBound__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmLowerBound__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmLowerBoundAccess().getTypeReferenceAssignment_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__JvmLowerBound__TypeReferenceAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmLowerBoundAccess().getTypeReferenceAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmLowerBoundAnded__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_28);
            rule__JvmLowerBoundAnded__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__JvmLowerBoundAnded__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmLowerBoundAnded__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmLowerBoundAndedAccess().getAmpersandKeyword_0()); 
            }
            match(input,KW_Ampersand,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getJvmLowerBoundAndedAccess().getAmpersandKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmLowerBoundAnded__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__JvmLowerBoundAnded__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmLowerBoundAnded__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmLowerBoundAndedAccess().getTypeReferenceAssignment_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__JvmLowerBoundAnded__TypeReferenceAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmLowerBoundAndedAccess().getTypeReferenceAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmTypeParameter__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_153);
            rule__JvmTypeParameter__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__JvmTypeParameter__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmTypeParameter__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmTypeParameterAccess().getNameAssignment_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__JvmTypeParameter__NameAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmTypeParameterAccess().getNameAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmTypeParameter__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__JvmTypeParameter__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmTypeParameter__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmTypeParameterAccess().getGroup_1()); 
            }
            int alt293=2;
            int LA293_0 = input.LA(1);

            if ( (LA293_0==KW_Extends) ) {
                alt293=1;
            }
            switch (alt293) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__JvmTypeParameter__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmTypeParameterAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmTypeParameter__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_151);
            rule__JvmTypeParameter__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__JvmTypeParameter__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmTypeParameter__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmTypeParameterAccess().getConstraintsAssignment_1_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__JvmTypeParameter__ConstraintsAssignment_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmTypeParameterAccess().getConstraintsAssignment_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmTypeParameter__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__JvmTypeParameter__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmTypeParameter__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmTypeParameterAccess().getConstraintsAssignment_1_1()); 
            }
            loop294:
            do {
                int alt294=2;
                int LA294_0 = input.LA(1);

                if ( (LA294_0==KW_Ampersand) ) {
                    alt294=1;
                }


                switch (alt294) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_152);
            	    rule__JvmTypeParameter__ConstraintsAssignment_1_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop294;
                }
            } while (true);

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmTypeParameterAccess().getConstraintsAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__QualifiedNameWithWildcard__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_52);
            rule__QualifiedNameWithWildcard__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__QualifiedNameWithWildcard__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__QualifiedNameWithWildcard__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleQualifiedName();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__QualifiedNameWithWildcard__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_154);
            rule__QualifiedNameWithWildcard__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__QualifiedNameWithWildcard__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__QualifiedNameWithWildcard__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopKeyword_1()); 
            }
            match(input,KW_FullStop,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__QualifiedNameWithWildcard__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__QualifiedNameWithWildcard__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__QualifiedNameWithWildcard__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getQualifiedNameWithWildcardAccess().getAsteriskKeyword_2()); 
            }
            match(input,KW_Asterisk,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getQualifiedNameWithWildcardAccess().getAsteriskKeyword_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XImportDeclaration__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_155);
            rule__XImportDeclaration__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XImportDeclaration__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XImportDeclaration__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXImportDeclarationAccess().getImportKeyword_0()); 
            }
            match(input,KW_Import,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXImportDeclarationAccess().getImportKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XImportDeclaration__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_8);
            rule__XImportDeclaration__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XImportDeclaration__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XImportDeclaration__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXImportDeclarationAccess().getAlternatives_1()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XImportDeclaration__Alternatives_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXImportDeclarationAccess().getAlternatives_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XImportDeclaration__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XImportDeclaration__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XImportDeclaration__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXImportDeclarationAccess().getSemicolonKeyword_2()); 
            }
            int alt295=2;
            int LA295_0 = input.LA(1);

            if ( (LA295_0==KW_Semicolon) ) {
                alt295=1;
            }
            switch (alt295) {
                case 1 :
                    {
                    match(input,KW_Semicolon,FOLLOW_2); if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXImportDeclarationAccess().getSemicolonKeyword_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XImportDeclaration__Group_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_156);
            rule__XImportDeclaration__Group_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XImportDeclaration__Group_1_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XImportDeclaration__Group_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXImportDeclarationAccess().getStaticAssignment_1_0_0()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XImportDeclaration__StaticAssignment_1_0_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXImportDeclarationAccess().getStaticAssignment_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XImportDeclaration__Group_1_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_156);
            rule__XImportDeclaration__Group_1_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XImportDeclaration__Group_1_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XImportDeclaration__Group_1_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXImportDeclarationAccess().getExtensionAssignment_1_0_1()); 
            }
            int alt296=2;
            int LA296_0 = input.LA(1);

            if ( (LA296_0==KW_Extension) ) {
                alt296=1;
            }
            switch (alt296) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    rule__XImportDeclaration__ExtensionAssignment_1_0_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXImportDeclarationAccess().getExtensionAssignment_1_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XImportDeclaration__Group_1_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_157);
            rule__XImportDeclaration__Group_1_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XImportDeclaration__Group_1_0__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XImportDeclaration__Group_1_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXImportDeclarationAccess().getImportedTypeAssignment_1_0_2()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XImportDeclaration__ImportedTypeAssignment_1_0_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXImportDeclarationAccess().getImportedTypeAssignment_1_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XImportDeclaration__Group_1_0__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__XImportDeclaration__Group_1_0__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XImportDeclaration__Group_1_0__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXImportDeclarationAccess().getAlternatives_1_0_3()); 
            }
            {
            pushFollow(FOLLOW_2);
            rule__XImportDeclaration__Alternatives_1_0_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXImportDeclarationAccess().getAlternatives_1_0_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__QualifiedNameInStaticImport__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_52);
            rule__QualifiedNameInStaticImport__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__QualifiedNameInStaticImport__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__QualifiedNameInStaticImport__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getQualifiedNameInStaticImportAccess().getValidIDParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleValidID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getQualifiedNameInStaticImportAccess().getValidIDParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__QualifiedNameInStaticImport__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__QualifiedNameInStaticImport__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__QualifiedNameInStaticImport__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getQualifiedNameInStaticImportAccess().getFullStopKeyword_1()); 
            }
            match(input,KW_FullStop,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getQualifiedNameInStaticImportAccess().getFullStopKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__File__PackageAssignment_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getFileAccess().getPackageQualifiedNameParserRuleCall_0_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleQualifiedName();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getFileAccess().getPackageQualifiedNameParserRuleCall_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__File__ImportSectionAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getFileAccess().getImportSectionXImportSectionParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXImportSection();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getFileAccess().getImportSectionXImportSectionParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__File__XtendTypesAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getFileAccess().getXtendTypesTypeParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleType();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getFileAccess().getXtendTypesTypeParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__AnnotationsAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getAnnotationsXAnnotationParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXAnnotation();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getAnnotationsXAnnotationParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__ModifiersAssignment_2_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getModifiersCommonModifierParserRuleCall_2_0_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleCommonModifier();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getModifiersCommonModifierParserRuleCall_2_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__NameAssignment_2_0_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getNameValidIDParserRuleCall_2_0_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleValidID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getNameValidIDParserRuleCall_2_0_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__TypeParametersAssignment_2_0_4_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getTypeParametersJvmTypeParameterParserRuleCall_2_0_4_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeParameter();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getTypeParametersJvmTypeParameterParserRuleCall_2_0_4_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__TypeParametersAssignment_2_0_4_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getTypeParametersJvmTypeParameterParserRuleCall_2_0_4_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeParameter();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getTypeParametersJvmTypeParameterParserRuleCall_2_0_4_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__ExtendsAssignment_2_0_5_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getExtendsJvmParameterizedTypeReferenceParserRuleCall_2_0_5_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmParameterizedTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getExtendsJvmParameterizedTypeReferenceParserRuleCall_2_0_5_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__ImplementsAssignment_2_0_6_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getImplementsJvmSuperTypeReferenceParserRuleCall_2_0_6_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmSuperTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getImplementsJvmSuperTypeReferenceParserRuleCall_2_0_6_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__ImplementsAssignment_2_0_6_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getImplementsJvmSuperTypeReferenceParserRuleCall_2_0_6_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmSuperTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getImplementsJvmSuperTypeReferenceParserRuleCall_2_0_6_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__MembersAssignment_2_0_8() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getMembersMemberParserRuleCall_2_0_8_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleMember();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getMembersMemberParserRuleCall_2_0_8_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__ModifiersAssignment_2_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getModifiersCommonModifierParserRuleCall_2_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleCommonModifier();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getModifiersCommonModifierParserRuleCall_2_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__NameAssignment_2_1_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getNameValidIDParserRuleCall_2_1_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleValidID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getNameValidIDParserRuleCall_2_1_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__TypeParametersAssignment_2_1_4_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getTypeParametersJvmTypeParameterParserRuleCall_2_1_4_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeParameter();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getTypeParametersJvmTypeParameterParserRuleCall_2_1_4_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__TypeParametersAssignment_2_1_4_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getTypeParametersJvmTypeParameterParserRuleCall_2_1_4_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeParameter();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getTypeParametersJvmTypeParameterParserRuleCall_2_1_4_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__ExtendsAssignment_2_1_5_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getExtendsJvmSuperTypeReferenceParserRuleCall_2_1_5_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmSuperTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getExtendsJvmSuperTypeReferenceParserRuleCall_2_1_5_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__ExtendsAssignment_2_1_5_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getExtendsJvmSuperTypeReferenceParserRuleCall_2_1_5_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmSuperTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getExtendsJvmSuperTypeReferenceParserRuleCall_2_1_5_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__MembersAssignment_2_1_7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getMembersMemberParserRuleCall_2_1_7_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleMember();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getMembersMemberParserRuleCall_2_1_7_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__ModifiersAssignment_2_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getModifiersCommonModifierParserRuleCall_2_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleCommonModifier();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getModifiersCommonModifierParserRuleCall_2_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__NameAssignment_2_2_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getNameValidIDParserRuleCall_2_2_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleValidID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getNameValidIDParserRuleCall_2_2_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__MembersAssignment_2_2_5_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getMembersXtendEnumLiteralParserRuleCall_2_2_5_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXtendEnumLiteral();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getMembersXtendEnumLiteralParserRuleCall_2_2_5_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__MembersAssignment_2_2_5_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getMembersXtendEnumLiteralParserRuleCall_2_2_5_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXtendEnumLiteral();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getMembersXtendEnumLiteralParserRuleCall_2_2_5_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__ModifiersAssignment_2_3_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getModifiersCommonModifierParserRuleCall_2_3_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleCommonModifier();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getModifiersCommonModifierParserRuleCall_2_3_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__NameAssignment_2_3_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getNameValidIDParserRuleCall_2_3_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleValidID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getNameValidIDParserRuleCall_2_3_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Type__MembersAssignment_2_3_5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeAccess().getMembersAnnotationFieldParserRuleCall_2_3_5_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleAnnotationField();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeAccess().getMembersAnnotationFieldParserRuleCall_2_3_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionSuperTypeRef__InstanceContextAssignment_0_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFunctionSuperTypeRefAccess().getInstanceContextLeftParenthesisKeyword_0_0_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFunctionSuperTypeRefAccess().getInstanceContextLeftParenthesisKeyword_0_0_0()); 
            }
            match(input,KW_LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXFunctionSuperTypeRefAccess().getInstanceContextLeftParenthesisKeyword_0_0_0()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXFunctionSuperTypeRefAccess().getInstanceContextLeftParenthesisKeyword_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionSuperTypeRef__ParamTypesAssignment_0_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFunctionSuperTypeRefAccess().getParamTypesJvmTypeReferenceParserRuleCall_0_1_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXFunctionSuperTypeRefAccess().getParamTypesJvmTypeReferenceParserRuleCall_0_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionSuperTypeRef__ParamTypesAssignment_0_1_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFunctionSuperTypeRefAccess().getParamTypesJvmTypeReferenceParserRuleCall_0_1_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXFunctionSuperTypeRefAccess().getParamTypesJvmTypeReferenceParserRuleCall_0_1_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionSuperTypeRef__ReturnTypeAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFunctionSuperTypeRefAccess().getReturnTypeJvmTypeReferenceParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXFunctionSuperTypeRefAccess().getReturnTypeJvmTypeReferenceParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__AnnotationsAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getAnnotationsXAnnotationParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXAnnotation();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getAnnotationsXAnnotationParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__ModifiersAssignment_2_0_0_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getModifiersCommonModifierParserRuleCall_2_0_0_0_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleCommonModifier();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getModifiersCommonModifierParserRuleCall_2_0_0_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__ModifiersAssignment_2_0_0_0_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getModifiersFieldModifierParserRuleCall_2_0_0_0_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleFieldModifier();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getModifiersFieldModifierParserRuleCall_2_0_0_0_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__ModifiersAssignment_2_0_0_0_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getModifiersCommonModifierParserRuleCall_2_0_0_0_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleCommonModifier();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getModifiersCommonModifierParserRuleCall_2_0_0_0_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__TypeAssignment_2_0_0_0_4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getTypeJvmTypeReferenceParserRuleCall_2_0_0_0_4_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getTypeJvmTypeReferenceParserRuleCall_2_0_0_0_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__NameAssignment_2_0_0_0_5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getNameValidIDParserRuleCall_2_0_0_0_5_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleValidID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getNameValidIDParserRuleCall_2_0_0_0_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__ModifiersAssignment_2_0_0_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getModifiersCommonModifierParserRuleCall_2_0_0_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleCommonModifier();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getModifiersCommonModifierParserRuleCall_2_0_0_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__TypeAssignment_2_0_0_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getTypeJvmTypeReferenceParserRuleCall_2_0_0_1_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getTypeJvmTypeReferenceParserRuleCall_2_0_0_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__NameAssignment_2_0_0_1_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getNameValidIDParserRuleCall_2_0_0_1_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleValidID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getNameValidIDParserRuleCall_2_0_0_1_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__InitialValueAssignment_2_0_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getInitialValueXAnnotationElementValueParserRuleCall_2_0_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXAnnotationElementValue();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getInitialValueXAnnotationElementValueParserRuleCall_2_0_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__ModifiersAssignment_2_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getModifiersCommonModifierParserRuleCall_2_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleCommonModifier();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getModifiersCommonModifierParserRuleCall_2_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__NameAssignment_2_1_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getNameValidIDParserRuleCall_2_1_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleValidID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getNameValidIDParserRuleCall_2_1_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__TypeParametersAssignment_2_1_4_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getTypeParametersJvmTypeParameterParserRuleCall_2_1_4_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeParameter();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getTypeParametersJvmTypeParameterParserRuleCall_2_1_4_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__TypeParametersAssignment_2_1_4_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getTypeParametersJvmTypeParameterParserRuleCall_2_1_4_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeParameter();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getTypeParametersJvmTypeParameterParserRuleCall_2_1_4_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__ExtendsAssignment_2_1_5_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getExtendsJvmParameterizedTypeReferenceParserRuleCall_2_1_5_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmParameterizedTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getExtendsJvmParameterizedTypeReferenceParserRuleCall_2_1_5_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__ImplementsAssignment_2_1_6_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getImplementsJvmParameterizedTypeReferenceParserRuleCall_2_1_6_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmParameterizedTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getImplementsJvmParameterizedTypeReferenceParserRuleCall_2_1_6_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__ImplementsAssignment_2_1_6_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getImplementsJvmParameterizedTypeReferenceParserRuleCall_2_1_6_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmParameterizedTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getImplementsJvmParameterizedTypeReferenceParserRuleCall_2_1_6_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__MembersAssignment_2_1_8() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getMembersMemberParserRuleCall_2_1_8_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleMember();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getMembersMemberParserRuleCall_2_1_8_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__ModifiersAssignment_2_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getModifiersCommonModifierParserRuleCall_2_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleCommonModifier();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getModifiersCommonModifierParserRuleCall_2_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__NameAssignment_2_2_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getNameValidIDParserRuleCall_2_2_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleValidID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getNameValidIDParserRuleCall_2_2_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__TypeParametersAssignment_2_2_4_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getTypeParametersJvmTypeParameterParserRuleCall_2_2_4_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeParameter();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getTypeParametersJvmTypeParameterParserRuleCall_2_2_4_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__TypeParametersAssignment_2_2_4_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getTypeParametersJvmTypeParameterParserRuleCall_2_2_4_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeParameter();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getTypeParametersJvmTypeParameterParserRuleCall_2_2_4_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__ExtendsAssignment_2_2_5_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getExtendsJvmParameterizedTypeReferenceParserRuleCall_2_2_5_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmParameterizedTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getExtendsJvmParameterizedTypeReferenceParserRuleCall_2_2_5_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__ExtendsAssignment_2_2_5_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getExtendsJvmParameterizedTypeReferenceParserRuleCall_2_2_5_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmParameterizedTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getExtendsJvmParameterizedTypeReferenceParserRuleCall_2_2_5_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__MembersAssignment_2_2_7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getMembersMemberParserRuleCall_2_2_7_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleMember();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getMembersMemberParserRuleCall_2_2_7_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__ModifiersAssignment_2_3_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getModifiersCommonModifierParserRuleCall_2_3_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleCommonModifier();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getModifiersCommonModifierParserRuleCall_2_3_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__NameAssignment_2_3_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getNameValidIDParserRuleCall_2_3_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleValidID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getNameValidIDParserRuleCall_2_3_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__MembersAssignment_2_3_5_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getMembersXtendEnumLiteralParserRuleCall_2_3_5_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXtendEnumLiteral();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getMembersXtendEnumLiteralParserRuleCall_2_3_5_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__MembersAssignment_2_3_5_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getMembersXtendEnumLiteralParserRuleCall_2_3_5_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXtendEnumLiteral();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getMembersXtendEnumLiteralParserRuleCall_2_3_5_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__ModifiersAssignment_2_4_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getModifiersCommonModifierParserRuleCall_2_4_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleCommonModifier();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getModifiersCommonModifierParserRuleCall_2_4_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__NameAssignment_2_4_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getNameValidIDParserRuleCall_2_4_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleValidID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getNameValidIDParserRuleCall_2_4_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__AnnotationField__MembersAssignment_2_4_5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getAnnotationFieldAccess().getMembersAnnotationFieldParserRuleCall_2_4_5_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleAnnotationField();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getAnnotationFieldAccess().getMembersAnnotationFieldParserRuleCall_2_4_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__AnnotationsAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getAnnotationsXAnnotationParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXAnnotation();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getAnnotationsXAnnotationParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__ModifiersAssignment_2_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getModifiersCommonModifierParserRuleCall_2_0_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleCommonModifier();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getModifiersCommonModifierParserRuleCall_2_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__ModifiersAssignment_2_0_2_0_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getModifiersFieldModifierParserRuleCall_2_0_2_0_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleFieldModifier();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getModifiersFieldModifierParserRuleCall_2_0_2_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__ModifiersAssignment_2_0_2_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getModifiersCommonModifierParserRuleCall_2_0_2_0_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleCommonModifier();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getModifiersCommonModifierParserRuleCall_2_0_2_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__TypeAssignment_2_0_2_0_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getTypeJvmTypeReferenceParserRuleCall_2_0_2_0_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getTypeJvmTypeReferenceParserRuleCall_2_0_2_0_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__NameAssignment_2_0_2_0_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getNameValidIDParserRuleCall_2_0_2_0_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleValidID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getNameValidIDParserRuleCall_2_0_2_0_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__ModifiersAssignment_2_0_2_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getModifiersExtensionKeyword_2_0_2_1_0_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getModifiersExtensionKeyword_2_0_2_1_0_0()); 
            }
            match(input,KW_Extension,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getModifiersExtensionKeyword_2_0_2_1_0_0()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getModifiersExtensionKeyword_2_0_2_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__ModifiersAssignment_2_0_2_1_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getModifiersFieldModifierParserRuleCall_2_0_2_1_1_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleFieldModifier();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getModifiersFieldModifierParserRuleCall_2_0_2_1_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__ModifiersAssignment_2_0_2_1_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getModifiersCommonModifierParserRuleCall_2_0_2_1_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleCommonModifier();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getModifiersCommonModifierParserRuleCall_2_0_2_1_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__TypeAssignment_2_0_2_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getTypeJvmTypeReferenceParserRuleCall_2_0_2_1_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getTypeJvmTypeReferenceParserRuleCall_2_0_2_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__NameAssignment_2_0_2_1_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getNameValidIDParserRuleCall_2_0_2_1_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleValidID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getNameValidIDParserRuleCall_2_0_2_1_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__ModifiersAssignment_2_0_2_2_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getModifiersFieldModifierParserRuleCall_2_0_2_2_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleFieldModifier();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getModifiersFieldModifierParserRuleCall_2_0_2_2_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__ModifiersAssignment_2_0_2_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getModifiersCommonModifierParserRuleCall_2_0_2_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleCommonModifier();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getModifiersCommonModifierParserRuleCall_2_0_2_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__ModifiersAssignment_2_0_2_2_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getModifiersExtensionKeyword_2_0_2_2_2_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getModifiersExtensionKeyword_2_0_2_2_2_0()); 
            }
            match(input,KW_Extension,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getModifiersExtensionKeyword_2_0_2_2_2_0()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getModifiersExtensionKeyword_2_0_2_2_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__ModifiersAssignment_2_0_2_2_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getModifiersCommonModifierParserRuleCall_2_0_2_2_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleCommonModifier();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getModifiersCommonModifierParserRuleCall_2_0_2_2_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__TypeAssignment_2_0_2_2_4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getTypeJvmTypeReferenceParserRuleCall_2_0_2_2_4_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getTypeJvmTypeReferenceParserRuleCall_2_0_2_2_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__NameAssignment_2_0_2_2_5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getNameValidIDParserRuleCall_2_0_2_2_5_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleValidID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getNameValidIDParserRuleCall_2_0_2_2_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__TypeAssignment_2_0_2_3_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getTypeJvmTypeReferenceParserRuleCall_2_0_2_3_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getTypeJvmTypeReferenceParserRuleCall_2_0_2_3_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__NameAssignment_2_0_2_3_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getNameValidIDParserRuleCall_2_0_2_3_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleValidID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getNameValidIDParserRuleCall_2_0_2_3_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__InitialValueAssignment_2_0_3_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getInitialValueXExpressionParserRuleCall_2_0_3_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getInitialValueXExpressionParserRuleCall_2_0_3_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__ModifiersAssignment_2_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getModifiersCommonModifierParserRuleCall_2_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleCommonModifier();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getModifiersCommonModifierParserRuleCall_2_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__ModifiersAssignment_2_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getModifiersMethodModifierParserRuleCall_2_1_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleMethodModifier();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getModifiersMethodModifierParserRuleCall_2_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__ModifiersAssignment_2_1_3_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getModifiersCommonModifierParserRuleCall_2_1_3_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleCommonModifier();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getModifiersCommonModifierParserRuleCall_2_1_3_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__ModifiersAssignment_2_1_3_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getModifiersMethodModifierParserRuleCall_2_1_3_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleMethodModifier();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getModifiersMethodModifierParserRuleCall_2_1_3_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__TypeParametersAssignment_2_1_4_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getTypeParametersJvmTypeParameterParserRuleCall_2_1_4_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeParameter();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getTypeParametersJvmTypeParameterParserRuleCall_2_1_4_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__TypeParametersAssignment_2_1_4_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getTypeParametersJvmTypeParameterParserRuleCall_2_1_4_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeParameter();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getTypeParametersJvmTypeParameterParserRuleCall_2_1_4_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__ReturnTypeAssignment_2_1_5_0_0_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getReturnTypeJvmTypeReferenceParserRuleCall_2_1_5_0_0_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getReturnTypeJvmTypeReferenceParserRuleCall_2_1_5_0_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__CreateExtensionInfoAssignment_2_1_5_0_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getCreateExtensionInfoCreateExtensionInfoParserRuleCall_2_1_5_0_0_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleCreateExtensionInfo();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getCreateExtensionInfoCreateExtensionInfoParserRuleCall_2_1_5_0_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__NameAssignment_2_1_5_0_0_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getNameValidIDParserRuleCall_2_1_5_0_0_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleValidID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getNameValidIDParserRuleCall_2_1_5_0_0_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__ReturnTypeAssignment_2_1_5_1_0_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getReturnTypeTypeReferenceWithTypeArgsParserRuleCall_2_1_5_1_0_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleTypeReferenceWithTypeArgs();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getReturnTypeTypeReferenceWithTypeArgsParserRuleCall_2_1_5_1_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__NameAssignment_2_1_5_1_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getNameFunctionIDParserRuleCall_2_1_5_1_0_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleFunctionID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getNameFunctionIDParserRuleCall_2_1_5_1_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__ReturnTypeAssignment_2_1_5_2_0_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getReturnTypeTypeReferenceNoTypeArgsParserRuleCall_2_1_5_2_0_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleTypeReferenceNoTypeArgs();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getReturnTypeTypeReferenceNoTypeArgsParserRuleCall_2_1_5_2_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__NameAssignment_2_1_5_2_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getNameFunctionIDParserRuleCall_2_1_5_2_0_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleFunctionID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getNameFunctionIDParserRuleCall_2_1_5_2_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__CreateExtensionInfoAssignment_2_1_5_3_0_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getCreateExtensionInfoCreateExtensionInfoParserRuleCall_2_1_5_3_0_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleCreateExtensionInfo();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getCreateExtensionInfoCreateExtensionInfoParserRuleCall_2_1_5_3_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__NameAssignment_2_1_5_3_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getNameValidIDParserRuleCall_2_1_5_3_0_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleValidID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getNameValidIDParserRuleCall_2_1_5_3_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__NameAssignment_2_1_5_4_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getNameFunctionIDParserRuleCall_2_1_5_4_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleFunctionID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getNameFunctionIDParserRuleCall_2_1_5_4_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__ParametersAssignment_2_1_6_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getParametersParameterParserRuleCall_2_1_6_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleParameter();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getParametersParameterParserRuleCall_2_1_6_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__ParametersAssignment_2_1_6_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getParametersParameterParserRuleCall_2_1_6_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleParameter();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getParametersParameterParserRuleCall_2_1_6_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__ExceptionsAssignment_2_1_8_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getExceptionsJvmTypeReferenceParserRuleCall_2_1_8_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getExceptionsJvmTypeReferenceParserRuleCall_2_1_8_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__ExceptionsAssignment_2_1_8_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getExceptionsJvmTypeReferenceParserRuleCall_2_1_8_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getExceptionsJvmTypeReferenceParserRuleCall_2_1_8_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__ExpressionAssignment_2_1_9_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getExpressionXBlockExpressionParserRuleCall_2_1_9_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXBlockExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getExpressionXBlockExpressionParserRuleCall_2_1_9_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__ExpressionAssignment_2_1_9_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getExpressionRichStringParserRuleCall_2_1_9_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleRichString();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getExpressionRichStringParserRuleCall_2_1_9_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__ModifiersAssignment_2_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getModifiersCommonModifierParserRuleCall_2_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleCommonModifier();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getModifiersCommonModifierParserRuleCall_2_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__TypeParametersAssignment_2_2_3_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getTypeParametersJvmTypeParameterParserRuleCall_2_2_3_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeParameter();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getTypeParametersJvmTypeParameterParserRuleCall_2_2_3_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__TypeParametersAssignment_2_2_3_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getTypeParametersJvmTypeParameterParserRuleCall_2_2_3_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeParameter();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getTypeParametersJvmTypeParameterParserRuleCall_2_2_3_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__ParametersAssignment_2_2_5_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getParametersParameterParserRuleCall_2_2_5_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleParameter();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getParametersParameterParserRuleCall_2_2_5_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__ParametersAssignment_2_2_5_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getParametersParameterParserRuleCall_2_2_5_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleParameter();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getParametersParameterParserRuleCall_2_2_5_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__ExceptionsAssignment_2_2_7_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getExceptionsJvmTypeReferenceParserRuleCall_2_2_7_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getExceptionsJvmTypeReferenceParserRuleCall_2_2_7_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__ExceptionsAssignment_2_2_7_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getExceptionsJvmTypeReferenceParserRuleCall_2_2_7_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getExceptionsJvmTypeReferenceParserRuleCall_2_2_7_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__ExpressionAssignment_2_2_8() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getExpressionXBlockExpressionParserRuleCall_2_2_8_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXBlockExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getExpressionXBlockExpressionParserRuleCall_2_2_8_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__ModifiersAssignment_2_3_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getModifiersCommonModifierParserRuleCall_2_3_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleCommonModifier();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getModifiersCommonModifierParserRuleCall_2_3_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__NameAssignment_2_3_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getNameValidIDParserRuleCall_2_3_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleValidID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getNameValidIDParserRuleCall_2_3_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__TypeParametersAssignment_2_3_4_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getTypeParametersJvmTypeParameterParserRuleCall_2_3_4_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeParameter();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getTypeParametersJvmTypeParameterParserRuleCall_2_3_4_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__TypeParametersAssignment_2_3_4_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getTypeParametersJvmTypeParameterParserRuleCall_2_3_4_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeParameter();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getTypeParametersJvmTypeParameterParserRuleCall_2_3_4_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__ExtendsAssignment_2_3_5_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getExtendsJvmParameterizedTypeReferenceParserRuleCall_2_3_5_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmParameterizedTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getExtendsJvmParameterizedTypeReferenceParserRuleCall_2_3_5_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__ImplementsAssignment_2_3_6_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getImplementsJvmParameterizedTypeReferenceParserRuleCall_2_3_6_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmParameterizedTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getImplementsJvmParameterizedTypeReferenceParserRuleCall_2_3_6_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__ImplementsAssignment_2_3_6_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getImplementsJvmParameterizedTypeReferenceParserRuleCall_2_3_6_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmParameterizedTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getImplementsJvmParameterizedTypeReferenceParserRuleCall_2_3_6_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__MembersAssignment_2_3_8() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getMembersMemberParserRuleCall_2_3_8_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleMember();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getMembersMemberParserRuleCall_2_3_8_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__ModifiersAssignment_2_4_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getModifiersCommonModifierParserRuleCall_2_4_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleCommonModifier();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getModifiersCommonModifierParserRuleCall_2_4_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__NameAssignment_2_4_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getNameValidIDParserRuleCall_2_4_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleValidID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getNameValidIDParserRuleCall_2_4_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__TypeParametersAssignment_2_4_4_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getTypeParametersJvmTypeParameterParserRuleCall_2_4_4_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeParameter();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getTypeParametersJvmTypeParameterParserRuleCall_2_4_4_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__TypeParametersAssignment_2_4_4_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getTypeParametersJvmTypeParameterParserRuleCall_2_4_4_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeParameter();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getTypeParametersJvmTypeParameterParserRuleCall_2_4_4_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__ExtendsAssignment_2_4_5_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getExtendsJvmParameterizedTypeReferenceParserRuleCall_2_4_5_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmParameterizedTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getExtendsJvmParameterizedTypeReferenceParserRuleCall_2_4_5_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__ExtendsAssignment_2_4_5_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getExtendsJvmParameterizedTypeReferenceParserRuleCall_2_4_5_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmParameterizedTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getExtendsJvmParameterizedTypeReferenceParserRuleCall_2_4_5_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__MembersAssignment_2_4_7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getMembersMemberParserRuleCall_2_4_7_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleMember();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getMembersMemberParserRuleCall_2_4_7_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__ModifiersAssignment_2_5_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getModifiersCommonModifierParserRuleCall_2_5_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleCommonModifier();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getModifiersCommonModifierParserRuleCall_2_5_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__NameAssignment_2_5_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getNameValidIDParserRuleCall_2_5_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleValidID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getNameValidIDParserRuleCall_2_5_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__MembersAssignment_2_5_5_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getMembersXtendEnumLiteralParserRuleCall_2_5_5_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXtendEnumLiteral();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getMembersXtendEnumLiteralParserRuleCall_2_5_5_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__MembersAssignment_2_5_5_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getMembersXtendEnumLiteralParserRuleCall_2_5_5_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXtendEnumLiteral();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getMembersXtendEnumLiteralParserRuleCall_2_5_5_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__ModifiersAssignment_2_6_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getModifiersCommonModifierParserRuleCall_2_6_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleCommonModifier();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getModifiersCommonModifierParserRuleCall_2_6_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__NameAssignment_2_6_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getNameValidIDParserRuleCall_2_6_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleValidID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getNameValidIDParserRuleCall_2_6_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Member__MembersAssignment_2_6_5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMemberAccess().getMembersAnnotationFieldParserRuleCall_2_6_5_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleAnnotationField();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMemberAccess().getMembersAnnotationFieldParserRuleCall_2_6_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__TypeReferenceNoTypeArgs__TypeAssignment() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeReferenceNoTypeArgsAccess().getTypeJvmTypeCrossReference_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getTypeReferenceNoTypeArgsAccess().getTypeJvmTypeQualifiedNameParserRuleCall_0_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleQualifiedName();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getTypeReferenceNoTypeArgsAccess().getTypeJvmTypeQualifiedNameParserRuleCall_0_1()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getTypeReferenceNoTypeArgsAccess().getTypeJvmTypeCrossReference_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__TypeAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getTypeJvmTypeCrossReference_0_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getTypeJvmTypeQualifiedNameParserRuleCall_0_0_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleQualifiedName();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getTypeJvmTypeQualifiedNameParserRuleCall_0_0_1()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getTypeJvmTypeCrossReference_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__ArgumentsAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmArgumentTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__ArgumentsAssignment_1_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmArgumentTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__TypeAssignment_1_4_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getTypeJvmTypeCrossReference_1_4_1_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getTypeJvmTypeValidIDParserRuleCall_1_4_1_0_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleValidID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getTypeJvmTypeValidIDParserRuleCall_1_4_1_0_1()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getTypeJvmTypeCrossReference_1_4_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__ArgumentsAssignment_1_4_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_4_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmArgumentTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_4_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__ParameterizedTypeReferenceWithTypeArgs__ArgumentsAssignment_1_4_2_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_4_2_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmArgumentTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getParameterizedTypeReferenceWithTypeArgsAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_4_2_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XtendEnumLiteral__AnnotationsAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXtendEnumLiteralAccess().getAnnotationsXAnnotationParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXAnnotation();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXtendEnumLiteralAccess().getAnnotationsXAnnotationParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XtendEnumLiteral__NameAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXtendEnumLiteralAccess().getNameValidIDParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleValidID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXtendEnumLiteralAccess().getNameValidIDParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__CreateExtensionInfo__NameAssignment_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getCreateExtensionInfoAccess().getNameValidIDParserRuleCall_1_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleValidID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getCreateExtensionInfoAccess().getNameValidIDParserRuleCall_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__CreateExtensionInfo__CreateExpressionAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getCreateExtensionInfoAccess().getCreateExpressionXExpressionParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getCreateExtensionInfoAccess().getCreateExpressionXExpressionParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Parameter__AnnotationsAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterAccess().getAnnotationsXAnnotationParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXAnnotation();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getParameterAccess().getAnnotationsXAnnotationParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Parameter__ExtensionAssignment_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterAccess().getExtensionExtensionKeyword_1_0_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterAccess().getExtensionExtensionKeyword_1_0_0()); 
            }
            match(input,KW_Extension,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getParameterAccess().getExtensionExtensionKeyword_1_0_0()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getParameterAccess().getExtensionExtensionKeyword_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Parameter__AnnotationsAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterAccess().getAnnotationsXAnnotationParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXAnnotation();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getParameterAccess().getAnnotationsXAnnotationParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Parameter__ParameterTypeAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterAccess().getParameterTypeJvmTypeReferenceParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getParameterAccess().getParameterTypeJvmTypeReferenceParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Parameter__VarArgAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterAccess().getVarArgFullStopFullStopFullStopKeyword_3_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterAccess().getVarArgFullStopFullStopFullStopKeyword_3_0()); 
            }
            match(input,KW_FullStopFullStopFullStop,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getParameterAccess().getVarArgFullStopFullStopFullStopKeyword_3_0()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getParameterAccess().getVarArgFullStopFullStopFullStopKeyword_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__Parameter__NameAssignment_4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getParameterAccess().getNameValidIDParserRuleCall_4_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleValidID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getParameterAccess().getNameValidIDParserRuleCall_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAssignment__FeatureAssignment_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAssignmentAccess().getFeatureJvmIdentifiableElementCrossReference_0_1_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAssignmentAccess().getFeatureJvmIdentifiableElementFeatureCallIDParserRuleCall_0_1_0_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleFeatureCallID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAssignmentAccess().getFeatureJvmIdentifiableElementFeatureCallIDParserRuleCall_0_1_0_1()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAssignmentAccess().getFeatureJvmIdentifiableElementCrossReference_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAssignment__ValueAssignment_0_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAssignmentAccess().getValueXAssignmentParserRuleCall_0_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXAssignment();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAssignmentAccess().getValueXAssignmentParserRuleCall_0_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAssignment__FeatureAssignment_1_1_0_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAssignmentAccess().getFeatureJvmIdentifiableElementCrossReference_1_1_0_0_1_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAssignmentAccess().getFeatureJvmIdentifiableElementOpMultiAssignParserRuleCall_1_1_0_0_1_0_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleOpMultiAssign();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAssignmentAccess().getFeatureJvmIdentifiableElementOpMultiAssignParserRuleCall_1_1_0_0_1_0_1()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAssignmentAccess().getFeatureJvmIdentifiableElementCrossReference_1_1_0_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAssignment__RightOperandAssignment_1_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAssignmentAccess().getRightOperandXAssignmentParserRuleCall_1_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXAssignment();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAssignmentAccess().getRightOperandXAssignmentParserRuleCall_1_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XConditionalExpression__ConditionalExpressionAssignment_1_0_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXConditionalExpressionAccess().getConditionalExpressionQuestionMarkKeyword_1_0_0_1_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXConditionalExpressionAccess().getConditionalExpressionQuestionMarkKeyword_1_0_0_1_0()); 
            }
            match(input,KW_QuestionMark,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXConditionalExpressionAccess().getConditionalExpressionQuestionMarkKeyword_1_0_0_1_0()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXConditionalExpressionAccess().getConditionalExpressionQuestionMarkKeyword_1_0_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XConditionalExpression__ThenAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXConditionalExpressionAccess().getThenXExpressionParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXConditionalExpressionAccess().getThenXExpressionParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XConditionalExpression__ElseAssignment_1_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXConditionalExpressionAccess().getElseXExpressionParserRuleCall_1_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXConditionalExpressionAccess().getElseXExpressionParserRuleCall_1_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__ResourcesAssignment_2_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTryCatchFinallyExpressionAccess().getResourcesInitializedVariableDeclarationParserRuleCall_2_0_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleInitializedVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXTryCatchFinallyExpressionAccess().getResourcesInitializedVariableDeclarationParserRuleCall_2_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__ResourcesAssignment_2_0_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTryCatchFinallyExpressionAccess().getResourcesInitializedVariableDeclarationParserRuleCall_2_0_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleInitializedVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXTryCatchFinallyExpressionAccess().getResourcesInitializedVariableDeclarationParserRuleCall_2_0_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__ExpressionAssignment_2_0_5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTryCatchFinallyExpressionAccess().getExpressionXExpressionParserRuleCall_2_0_5_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXTryCatchFinallyExpressionAccess().getExpressionXExpressionParserRuleCall_2_0_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__CatchClausesAssignment_2_0_6_0_0_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTryCatchFinallyExpressionAccess().getCatchClausesXCatchClauseParserRuleCall_2_0_6_0_0_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXCatchClause();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXTryCatchFinallyExpressionAccess().getCatchClausesXCatchClauseParserRuleCall_2_0_6_0_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__FinallyExpressionAssignment_2_0_6_0_0_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTryCatchFinallyExpressionAccess().getFinallyExpressionXExpressionParserRuleCall_2_0_6_0_0_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXTryCatchFinallyExpressionAccess().getFinallyExpressionXExpressionParserRuleCall_2_0_6_0_0_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__FinallyExpressionAssignment_2_0_6_0_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTryCatchFinallyExpressionAccess().getFinallyExpressionXExpressionParserRuleCall_2_0_6_0_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXTryCatchFinallyExpressionAccess().getFinallyExpressionXExpressionParserRuleCall_2_0_6_0_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__ExpressionAssignment_2_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTryCatchFinallyExpressionAccess().getExpressionXExpressionParserRuleCall_2_1_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXTryCatchFinallyExpressionAccess().getExpressionXExpressionParserRuleCall_2_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__CatchClausesAssignment_2_1_1_0_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTryCatchFinallyExpressionAccess().getCatchClausesXCatchClauseParserRuleCall_2_1_1_0_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXCatchClause();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXTryCatchFinallyExpressionAccess().getCatchClausesXCatchClauseParserRuleCall_2_1_1_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__FinallyExpressionAssignment_2_1_1_0_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTryCatchFinallyExpressionAccess().getFinallyExpressionXExpressionParserRuleCall_2_1_1_0_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXTryCatchFinallyExpressionAccess().getFinallyExpressionXExpressionParserRuleCall_2_1_1_0_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTryCatchFinallyExpression__FinallyExpressionAssignment_2_1_1_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTryCatchFinallyExpressionAccess().getFinallyExpressionXExpressionParserRuleCall_2_1_1_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXTryCatchFinallyExpressionAccess().getFinallyExpressionXExpressionParserRuleCall_2_1_1_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XVariableDeclaration__TypeAssignment_1_0_0_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXVariableDeclarationAccess().getTypeJvmTypeReferenceParserRuleCall_1_0_0_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXVariableDeclarationAccess().getTypeJvmTypeReferenceParserRuleCall_1_0_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XVariableDeclaration__NameAssignment_1_0_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXVariableDeclarationAccess().getNameInnerVarIDParserRuleCall_1_0_0_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleInnerVarID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXVariableDeclarationAccess().getNameInnerVarIDParserRuleCall_1_0_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XVariableDeclaration__NameAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXVariableDeclarationAccess().getNameInnerVarIDParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleInnerVarID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXVariableDeclarationAccess().getNameInnerVarIDParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XVariableDeclaration__RightAssignment_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXVariableDeclarationAccess().getRightXExpressionParserRuleCall_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXVariableDeclarationAccess().getRightXExpressionParserRuleCall_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__InitializedVariableDeclaration__TypeAssignment_2_0_0_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getInitializedVariableDeclarationAccess().getTypeJvmTypeReferenceParserRuleCall_2_0_0_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getInitializedVariableDeclarationAccess().getTypeJvmTypeReferenceParserRuleCall_2_0_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__InitializedVariableDeclaration__NameAssignment_2_0_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getInitializedVariableDeclarationAccess().getNameInnerVarIDParserRuleCall_2_0_0_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleInnerVarID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getInitializedVariableDeclarationAccess().getNameInnerVarIDParserRuleCall_2_0_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__InitializedVariableDeclaration__NameAssignment_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getInitializedVariableDeclarationAccess().getNameInnerVarIDParserRuleCall_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleInnerVarID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getInitializedVariableDeclarationAccess().getNameInnerVarIDParserRuleCall_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__InitializedVariableDeclaration__RightAssignment_4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getInitializedVariableDeclarationAccess().getRightXExpressionParserRuleCall_4_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getInitializedVariableDeclarationAccess().getRightXExpressionParserRuleCall_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__VariableModifier__WriteableAssignment_0_0_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getVariableModifierAccess().getWriteableVarKeyword_0_0_0_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getVariableModifierAccess().getWriteableVarKeyword_0_0_0_0()); 
            }
            match(input,KW_Var,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getVariableModifierAccess().getWriteableVarKeyword_0_0_0_0()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getVariableModifierAccess().getWriteableVarKeyword_0_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__VariableModifier__ExtensionAssignment_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getVariableModifierAccess().getExtensionExtensionKeyword_0_1_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getVariableModifierAccess().getExtensionExtensionKeyword_0_1_0()); 
            }
            match(input,KW_Extension,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getVariableModifierAccess().getExtensionExtensionKeyword_0_1_0()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getVariableModifierAccess().getExtensionExtensionKeyword_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__VariableModifier__ExtensionAssignment_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getVariableModifierAccess().getExtensionExtensionKeyword_1_0_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getVariableModifierAccess().getExtensionExtensionKeyword_1_0_0()); 
            }
            match(input,KW_Extension,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getVariableModifierAccess().getExtensionExtensionKeyword_1_0_0()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getVariableModifierAccess().getExtensionExtensionKeyword_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__VariableModifier__WriteableAssignment_1_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getVariableModifierAccess().getWriteableVarKeyword_1_1_0_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getVariableModifierAccess().getWriteableVarKeyword_1_1_0_0()); 
            }
            match(input,KW_Var,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getVariableModifierAccess().getWriteableVarKeyword_1_1_0_0()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getVariableModifierAccess().getWriteableVarKeyword_1_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XConstructorCall__MembersAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXConstructorCallAccess().getMembersMemberParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleMember();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXConstructorCallAccess().getMembersMemberParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__ConstructorAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXbaseConstructorCallAccess().getConstructorJvmConstructorCrossReference_2_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXbaseConstructorCallAccess().getConstructorJvmConstructorQualifiedNameParserRuleCall_2_0_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleQualifiedName();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXbaseConstructorCallAccess().getConstructorJvmConstructorQualifiedNameParserRuleCall_2_0_1()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXbaseConstructorCallAccess().getConstructorJvmConstructorCrossReference_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__TypeArgumentsAssignment_3_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXbaseConstructorCallAccess().getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_3_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmArgumentTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXbaseConstructorCallAccess().getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_3_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__TypeArgumentsAssignment_3_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXbaseConstructorCallAccess().getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_3_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmArgumentTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXbaseConstructorCallAccess().getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_3_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__ExplicitConstructorCallAssignment_4_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXbaseConstructorCallAccess().getExplicitConstructorCallLeftParenthesisKeyword_4_0_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXbaseConstructorCallAccess().getExplicitConstructorCallLeftParenthesisKeyword_4_0_0()); 
            }
            match(input,KW_LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXbaseConstructorCallAccess().getExplicitConstructorCallLeftParenthesisKeyword_4_0_0()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXbaseConstructorCallAccess().getExplicitConstructorCallLeftParenthesisKeyword_4_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__ArgumentsAssignment_4_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXbaseConstructorCallAccess().getArgumentsXShortClosureParserRuleCall_4_1_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXShortClosure();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXbaseConstructorCallAccess().getArgumentsXShortClosureParserRuleCall_4_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__ArgumentsAssignment_4_1_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXbaseConstructorCallAccess().getArgumentsXExpressionParserRuleCall_4_1_1_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXbaseConstructorCallAccess().getArgumentsXExpressionParserRuleCall_4_1_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__ArgumentsAssignment_4_1_1_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXbaseConstructorCallAccess().getArgumentsXExpressionParserRuleCall_4_1_1_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXbaseConstructorCallAccess().getArgumentsXExpressionParserRuleCall_4_1_1_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XbaseConstructorCall__ArgumentsAssignment_5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXbaseConstructorCallAccess().getArgumentsXClosureParserRuleCall_5_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXClosure();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXbaseConstructorCallAccess().getArgumentsXClosureParserRuleCall_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmFormalParameter__ExtensionAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmFormalParameterAccess().getExtensionExtensionKeyword_0_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmFormalParameterAccess().getExtensionExtensionKeyword_0_0()); 
            }
            match(input,KW_Extension,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getJvmFormalParameterAccess().getExtensionExtensionKeyword_0_0()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmFormalParameterAccess().getExtensionExtensionKeyword_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmFormalParameter__ParameterTypeAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmFormalParameterAccess().getParameterTypeJvmTypeReferenceParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getJvmFormalParameterAccess().getParameterTypeJvmTypeReferenceParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmFormalParameter__NameAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmFormalParameterAccess().getNameInnerVarIDParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleInnerVarID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getJvmFormalParameterAccess().getNameInnerVarIDParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__FullJvmFormalParameter__ExtensionAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getFullJvmFormalParameterAccess().getExtensionExtensionKeyword_0_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getFullJvmFormalParameterAccess().getExtensionExtensionKeyword_0_0()); 
            }
            match(input,KW_Extension,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getFullJvmFormalParameterAccess().getExtensionExtensionKeyword_0_0()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getFullJvmFormalParameterAccess().getExtensionExtensionKeyword_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__FullJvmFormalParameter__ParameterTypeAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getFullJvmFormalParameterAccess().getParameterTypeMultiTypeReferenceParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleMultiTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getFullJvmFormalParameterAccess().getParameterTypeMultiTypeReferenceParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__FullJvmFormalParameter__NameAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getFullJvmFormalParameterAccess().getNameInnerVarIDParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleInnerVarID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getFullJvmFormalParameterAccess().getNameInnerVarIDParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__MultiTypeReference__ReferencesAssignment_1_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getMultiTypeReferenceAccess().getReferencesJvmTypeReferenceParserRuleCall_1_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getMultiTypeReferenceAccess().getReferencesJvmTypeReferenceParserRuleCall_1_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__DeclaredParamAssignment_2_0_0_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSwitchExpressionAccess().getDeclaredParamJvmFormalParameterParserRuleCall_2_0_0_0_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmFormalParameter();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXSwitchExpressionAccess().getDeclaredParamJvmFormalParameterParserRuleCall_2_0_0_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__SwitchAssignment_2_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSwitchExpressionAccess().getSwitchXExpressionParserRuleCall_2_0_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXSwitchExpressionAccess().getSwitchXExpressionParserRuleCall_2_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__DeclaredParamAssignment_2_1_0_0_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSwitchExpressionAccess().getDeclaredParamJvmFormalParameterParserRuleCall_2_1_0_0_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmFormalParameter();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXSwitchExpressionAccess().getDeclaredParamJvmFormalParameterParserRuleCall_2_1_0_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__SwitchAssignment_2_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSwitchExpressionAccess().getSwitchXExpressionOrSimpleConstructorCallParserRuleCall_2_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpressionOrSimpleConstructorCall();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXSwitchExpressionAccess().getSwitchXExpressionOrSimpleConstructorCallParserRuleCall_2_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__CasesAssignment_4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSwitchExpressionAccess().getCasesXCasePartParserRuleCall_4_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXCasePart();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXSwitchExpressionAccess().getCasesXCasePartParserRuleCall_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSwitchExpression__DefaultAssignment_5_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSwitchExpressionAccess().getDefaultXExpressionParserRuleCall_5_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXSwitchExpressionAccess().getDefaultXExpressionParserRuleCall_5_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCasePart__TypeGuardAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXCasePartAccess().getTypeGuardMultiTypeReferenceParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleMultiTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXCasePartAccess().getTypeGuardMultiTypeReferenceParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCasePart__CaseAssignment_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXCasePartAccess().getCaseXExpressionParserRuleCall_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXCasePartAccess().getCaseXExpressionParserRuleCall_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCasePart__ThenAssignment_3_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXCasePartAccess().getThenXExpressionParserRuleCall_3_0_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXCasePartAccess().getThenXExpressionParserRuleCall_3_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCasePart__FallThroughAssignment_3_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXCasePartAccess().getFallThroughCommaKeyword_3_1_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXCasePartAccess().getFallThroughCommaKeyword_3_1_0()); 
            }
            match(input,KW_Comma,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXCasePartAccess().getFallThroughCommaKeyword_3_1_0()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXCasePartAccess().getFallThroughCommaKeyword_3_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__SimpleStringLiteral__ValueAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getSimpleStringLiteralAccess().getValueSTRINGTerminalRuleCall_1_0()); 
            }
            match(input,RULE_STRING,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getSimpleStringLiteralAccess().getValueSTRINGTerminalRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichString__ExpressionsAssignment_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringAccess().getExpressionsRichStringLiteralParserRuleCall_1_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleRichStringLiteral();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringAccess().getExpressionsRichStringLiteralParserRuleCall_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichString__ExpressionsAssignment_1_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringAccess().getExpressionsRichStringLiteralStartParserRuleCall_1_1_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleRichStringLiteralStart();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringAccess().getExpressionsRichStringLiteralStartParserRuleCall_1_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichString__ExpressionsAssignment_1_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringAccess().getExpressionsRichStringPartParserRuleCall_1_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleRichStringPart();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringAccess().getExpressionsRichStringPartParserRuleCall_1_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichString__ExpressionsAssignment_1_1_2_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringAccess().getExpressionsRichStringLiteralInbetweenParserRuleCall_1_1_2_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleRichStringLiteralInbetween();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringAccess().getExpressionsRichStringLiteralInbetweenParserRuleCall_1_1_2_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichString__ExpressionsAssignment_1_1_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringAccess().getExpressionsRichStringPartParserRuleCall_1_1_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleRichStringPart();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringAccess().getExpressionsRichStringPartParserRuleCall_1_1_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichString__ExpressionsAssignment_1_1_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringAccess().getExpressionsRichStringLiteralEndParserRuleCall_1_1_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleRichStringLiteralEnd();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringAccess().getExpressionsRichStringLiteralEndParserRuleCall_1_1_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringLiteral__ValueAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringLiteralAccess().getValueRICH_TEXTTerminalRuleCall_1_0()); 
            }
            match(input,RULE_RICH_TEXT,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringLiteralAccess().getValueRICH_TEXTTerminalRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringLiteralStart__ValueAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringLiteralStartAccess().getValueRICH_TEXT_STARTTerminalRuleCall_1_0()); 
            }
            match(input,RULE_RICH_TEXT_START,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringLiteralStartAccess().getValueRICH_TEXT_STARTTerminalRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringLiteralInbetween__ValueAssignment_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringLiteralInbetweenAccess().getValueRICH_TEXT_INBETWEENTerminalRuleCall_1_0_0()); 
            }
            match(input,RULE_RICH_TEXT_INBETWEEN,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringLiteralInbetweenAccess().getValueRICH_TEXT_INBETWEENTerminalRuleCall_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringLiteralInbetween__ValueAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringLiteralInbetweenAccess().getValueCOMMENT_RICH_TEXT_INBETWEENTerminalRuleCall_1_1_0()); 
            }
            match(input,RULE_COMMENT_RICH_TEXT_INBETWEEN,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringLiteralInbetweenAccess().getValueCOMMENT_RICH_TEXT_INBETWEENTerminalRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringLiteralEnd__ValueAssignment_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringLiteralEndAccess().getValueRICH_TEXT_ENDTerminalRuleCall_1_0_0()); 
            }
            match(input,RULE_RICH_TEXT_END,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringLiteralEndAccess().getValueRICH_TEXT_ENDTerminalRuleCall_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringLiteralEnd__ValueAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringLiteralEndAccess().getValueCOMMENT_RICH_TEXT_ENDTerminalRuleCall_1_1_0()); 
            }
            match(input,RULE_COMMENT_RICH_TEXT_END,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringLiteralEndAccess().getValueCOMMENT_RICH_TEXT_ENDTerminalRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__InternalRichString__ExpressionsAssignment_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getInternalRichStringAccess().getExpressionsRichStringLiteralInbetweenParserRuleCall_1_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleRichStringLiteralInbetween();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getInternalRichStringAccess().getExpressionsRichStringLiteralInbetweenParserRuleCall_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__InternalRichString__ExpressionsAssignment_1_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getInternalRichStringAccess().getExpressionsRichStringPartParserRuleCall_1_1_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleRichStringPart();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getInternalRichStringAccess().getExpressionsRichStringPartParserRuleCall_1_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__InternalRichString__ExpressionsAssignment_1_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getInternalRichStringAccess().getExpressionsRichStringLiteralInbetweenParserRuleCall_1_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleRichStringLiteralInbetween();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getInternalRichStringAccess().getExpressionsRichStringLiteralInbetweenParserRuleCall_1_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringForLoop__DeclaredParamAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringForLoopAccess().getDeclaredParamJvmFormalParameterParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmFormalParameter();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringForLoopAccess().getDeclaredParamJvmFormalParameterParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringForLoop__ForExpressionAssignment_4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringForLoopAccess().getForExpressionXExpressionParserRuleCall_4_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringForLoopAccess().getForExpressionXExpressionParserRuleCall_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringForLoop__BeforeAssignment_5_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringForLoopAccess().getBeforeXExpressionParserRuleCall_5_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringForLoopAccess().getBeforeXExpressionParserRuleCall_5_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringForLoop__SeparatorAssignment_6_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringForLoopAccess().getSeparatorXExpressionParserRuleCall_6_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringForLoopAccess().getSeparatorXExpressionParserRuleCall_6_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringForLoop__AfterAssignment_7_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringForLoopAccess().getAfterXExpressionParserRuleCall_7_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringForLoopAccess().getAfterXExpressionParserRuleCall_7_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringForLoop__EachExpressionAssignment_8() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringForLoopAccess().getEachExpressionInternalRichStringParserRuleCall_8_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleInternalRichString();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringForLoopAccess().getEachExpressionInternalRichStringParserRuleCall_8_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringIf__IfAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringIfAccess().getIfXExpressionParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringIfAccess().getIfXExpressionParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringIf__ThenAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringIfAccess().getThenInternalRichStringParserRuleCall_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleInternalRichString();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringIfAccess().getThenInternalRichStringParserRuleCall_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringIf__ElseIfsAssignment_4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringIfAccess().getElseIfsRichStringElseIfParserRuleCall_4_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleRichStringElseIf();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringIfAccess().getElseIfsRichStringElseIfParserRuleCall_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringIf__ElseAssignment_5_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringIfAccess().getElseInternalRichStringParserRuleCall_5_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleInternalRichString();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringIfAccess().getElseInternalRichStringParserRuleCall_5_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringElseIf__IfAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringElseIfAccess().getIfXExpressionParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringElseIfAccess().getIfXExpressionParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__RichStringElseIf__ThenAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getRichStringElseIfAccess().getThenInternalRichStringParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleInternalRichString();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getRichStringElseIfAccess().getThenInternalRichStringParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotation__AnnotationTypeAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationAccess().getAnnotationTypeJvmAnnotationTypeCrossReference_2_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationAccess().getAnnotationTypeJvmAnnotationTypeQualifiedNameParserRuleCall_2_0_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleQualifiedName();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationAccess().getAnnotationTypeJvmAnnotationTypeQualifiedNameParserRuleCall_2_0_1()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationAccess().getAnnotationTypeJvmAnnotationTypeCrossReference_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotation__ElementValuePairsAssignment_3_1_0_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationAccess().getElementValuePairsXAnnotationElementValuePairParserRuleCall_3_1_0_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXAnnotationElementValuePair();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationAccess().getElementValuePairsXAnnotationElementValuePairParserRuleCall_3_1_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotation__ElementValuePairsAssignment_3_1_0_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationAccess().getElementValuePairsXAnnotationElementValuePairParserRuleCall_3_1_0_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXAnnotationElementValuePair();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationAccess().getElementValuePairsXAnnotationElementValuePairParserRuleCall_3_1_0_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotation__ValueAssignment_3_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationAccess().getValueXAnnotationElementValueOrCommaListParserRuleCall_3_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXAnnotationElementValueOrCommaList();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationAccess().getValueXAnnotationElementValueOrCommaListParserRuleCall_3_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValuePair__ElementAssignment_0_0_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValuePairAccess().getElementJvmOperationCrossReference_0_0_0_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValuePairAccess().getElementJvmOperationValidIDParserRuleCall_0_0_0_0_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleValidID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValuePairAccess().getElementJvmOperationValidIDParserRuleCall_0_0_0_0_1()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValuePairAccess().getElementJvmOperationCrossReference_0_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValuePair__ValueAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValuePairAccess().getValueXAnnotationElementValueParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXAnnotationElementValue();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValuePairAccess().getValueXAnnotationElementValueParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValueOrCommaList__ElementsAssignment_0_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getElementsXAnnotationOrExpressionParserRuleCall_0_1_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXAnnotationOrExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getElementsXAnnotationOrExpressionParserRuleCall_0_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValueOrCommaList__ElementsAssignment_0_1_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getElementsXAnnotationOrExpressionParserRuleCall_0_1_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXAnnotationOrExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getElementsXAnnotationOrExpressionParserRuleCall_0_1_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValueOrCommaList__ElementsAssignment_1_1_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getElementsXAnnotationOrExpressionParserRuleCall_1_1_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXAnnotationOrExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getElementsXAnnotationOrExpressionParserRuleCall_1_1_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValue__ElementsAssignment_0_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValueAccess().getElementsXAnnotationOrExpressionParserRuleCall_0_1_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXAnnotationOrExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValueAccess().getElementsXAnnotationOrExpressionParserRuleCall_0_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAnnotationElementValue__ElementsAssignment_0_1_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAnnotationElementValueAccess().getElementsXAnnotationOrExpressionParserRuleCall_0_1_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXAnnotationOrExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAnnotationElementValueAccess().getElementsXAnnotationOrExpressionParserRuleCall_0_1_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XOrExpression__FeatureAssignment_1_0_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXOrExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXOrExpressionAccess().getFeatureJvmIdentifiableElementOpOrParserRuleCall_1_0_0_1_0_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleOpOr();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXOrExpressionAccess().getFeatureJvmIdentifiableElementOpOrParserRuleCall_1_0_0_1_0_1()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXOrExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XOrExpression__RightOperandAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXOrExpressionAccess().getRightOperandXAndExpressionParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXAndExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXOrExpressionAccess().getRightOperandXAndExpressionParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAndExpression__FeatureAssignment_1_0_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAndExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAndExpressionAccess().getFeatureJvmIdentifiableElementOpAndParserRuleCall_1_0_0_1_0_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleOpAnd();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAndExpressionAccess().getFeatureJvmIdentifiableElementOpAndParserRuleCall_1_0_0_1_0_1()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAndExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAndExpression__RightOperandAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAndExpressionAccess().getRightOperandXEqualityExpressionParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXEqualityExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAndExpressionAccess().getRightOperandXEqualityExpressionParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XEqualityExpression__FeatureAssignment_1_0_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXEqualityExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXEqualityExpressionAccess().getFeatureJvmIdentifiableElementOpEqualityParserRuleCall_1_0_0_1_0_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleOpEquality();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXEqualityExpressionAccess().getFeatureJvmIdentifiableElementOpEqualityParserRuleCall_1_0_0_1_0_1()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXEqualityExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XEqualityExpression__RightOperandAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXEqualityExpressionAccess().getRightOperandXRelationalExpressionParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXRelationalExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXEqualityExpressionAccess().getRightOperandXRelationalExpressionParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XRelationalExpression__TypeAssignment_1_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXRelationalExpressionAccess().getTypeJvmTypeReferenceParserRuleCall_1_0_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXRelationalExpressionAccess().getTypeJvmTypeReferenceParserRuleCall_1_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XRelationalExpression__FeatureAssignment_1_1_0_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXRelationalExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_1_0_0_1_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXRelationalExpressionAccess().getFeatureJvmIdentifiableElementOpCompareParserRuleCall_1_1_0_0_1_0_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleOpCompare();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXRelationalExpressionAccess().getFeatureJvmIdentifiableElementOpCompareParserRuleCall_1_1_0_0_1_0_1()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXRelationalExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_1_0_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XRelationalExpression__RightOperandAssignment_1_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXRelationalExpressionAccess().getRightOperandXOtherOperatorExpressionParserRuleCall_1_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXOtherOperatorExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXRelationalExpressionAccess().getRightOperandXOtherOperatorExpressionParserRuleCall_1_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XOtherOperatorExpression__FeatureAssignment_1_0_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXOtherOperatorExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXOtherOperatorExpressionAccess().getFeatureJvmIdentifiableElementOpOtherParserRuleCall_1_0_0_1_0_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleOpOther();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXOtherOperatorExpressionAccess().getFeatureJvmIdentifiableElementOpOtherParserRuleCall_1_0_0_1_0_1()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXOtherOperatorExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XOtherOperatorExpression__RightOperandAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXOtherOperatorExpressionAccess().getRightOperandXAdditiveExpressionParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXAdditiveExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXOtherOperatorExpressionAccess().getRightOperandXAdditiveExpressionParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAdditiveExpression__FeatureAssignment_1_0_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAdditiveExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAdditiveExpressionAccess().getFeatureJvmIdentifiableElementOpAddParserRuleCall_1_0_0_1_0_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleOpAdd();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAdditiveExpressionAccess().getFeatureJvmIdentifiableElementOpAddParserRuleCall_1_0_0_1_0_1()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXAdditiveExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XAdditiveExpression__RightOperandAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXAdditiveExpressionAccess().getRightOperandXMultiplicativeExpressionParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXMultiplicativeExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXAdditiveExpressionAccess().getRightOperandXMultiplicativeExpressionParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMultiplicativeExpression__FeatureAssignment_1_0_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMultiplicativeExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMultiplicativeExpressionAccess().getFeatureJvmIdentifiableElementOpMultiParserRuleCall_1_0_0_1_0_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleOpMulti();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXMultiplicativeExpressionAccess().getFeatureJvmIdentifiableElementOpMultiParserRuleCall_1_0_0_1_0_1()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXMultiplicativeExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMultiplicativeExpression__RightOperandAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMultiplicativeExpressionAccess().getRightOperandXUnaryOperationParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXUnaryOperation();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXMultiplicativeExpressionAccess().getRightOperandXUnaryOperationParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XUnaryOperation__FeatureAssignment_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXUnaryOperationAccess().getFeatureJvmIdentifiableElementCrossReference_0_1_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXUnaryOperationAccess().getFeatureJvmIdentifiableElementOpUnaryParserRuleCall_0_1_0_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleOpUnary();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXUnaryOperationAccess().getFeatureJvmIdentifiableElementOpUnaryParserRuleCall_0_1_0_1()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXUnaryOperationAccess().getFeatureJvmIdentifiableElementCrossReference_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XUnaryOperation__OperandAssignment_0_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXUnaryOperationAccess().getOperandXUnaryOperationParserRuleCall_0_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXUnaryOperation();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXUnaryOperationAccess().getOperandXUnaryOperationParserRuleCall_0_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCastedExpression__TypeAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXCastedExpressionAccess().getTypeJvmTypeReferenceParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXCastedExpressionAccess().getTypeJvmTypeReferenceParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XPostfixOperation__FeatureAssignment_1_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXPostfixOperationAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_1_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXPostfixOperationAccess().getFeatureJvmIdentifiableElementOpPostfixParserRuleCall_1_0_1_0_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleOpPostfix();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXPostfixOperationAccess().getFeatureJvmIdentifiableElementOpPostfixParserRuleCall_1_0_1_0_1()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXPostfixOperationAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__ExplicitStaticAssignment_1_0_0_0_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getExplicitStaticColonColonKeyword_1_0_0_0_1_1_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getExplicitStaticColonColonKeyword_1_0_0_0_1_1_0()); 
            }
            match(input,KW_ColonColon,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getExplicitStaticColonColonKeyword_1_0_0_0_1_1_0()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getExplicitStaticColonColonKeyword_1_0_0_0_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__FeatureAssignment_1_0_0_0_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_0_2_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getFeatureJvmIdentifiableElementFeatureCallIDParserRuleCall_1_0_0_0_2_0_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleFeatureCallID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getFeatureJvmIdentifiableElementFeatureCallIDParserRuleCall_1_0_0_0_2_0_1()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_0_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__ValueAssignment_1_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getValueXAssignmentParserRuleCall_1_0_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXAssignment();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getValueXAssignmentParserRuleCall_1_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__NullSafeAssignment_1_1_0_0_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getNullSafeQuestionMarkFullStopKeyword_1_1_0_0_1_1_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getNullSafeQuestionMarkFullStopKeyword_1_1_0_0_1_1_0()); 
            }
            match(input,KW_QuestionMarkFullStop,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getNullSafeQuestionMarkFullStopKeyword_1_1_0_0_1_1_0()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getNullSafeQuestionMarkFullStopKeyword_1_1_0_0_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__ExplicitStaticAssignment_1_1_0_0_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getExplicitStaticColonColonKeyword_1_1_0_0_1_2_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getExplicitStaticColonColonKeyword_1_1_0_0_1_2_0()); 
            }
            match(input,KW_ColonColon,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getExplicitStaticColonColonKeyword_1_1_0_0_1_2_0()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getExplicitStaticColonColonKeyword_1_1_0_0_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__TypeArgumentsAssignment_1_1_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmArgumentTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__TypeArgumentsAssignment_1_1_1_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_1_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmArgumentTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_1_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__FeatureAssignment_1_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getFeatureJvmIdentifiableElementCrossReference_1_1_2_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getFeatureJvmIdentifiableElementIdOrSuperParserRuleCall_1_1_2_0_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleIdOrSuper();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getFeatureJvmIdentifiableElementIdOrSuperParserRuleCall_1_1_2_0_1()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getFeatureJvmIdentifiableElementCrossReference_1_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__ExplicitOperationCallAssignment_1_1_3_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getExplicitOperationCallLeftParenthesisKeyword_1_1_3_0_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getExplicitOperationCallLeftParenthesisKeyword_1_1_3_0_0()); 
            }
            match(input,KW_LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getExplicitOperationCallLeftParenthesisKeyword_1_1_3_0_0()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getExplicitOperationCallLeftParenthesisKeyword_1_1_3_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__MemberCallArgumentsAssignment_1_1_3_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getMemberCallArgumentsXShortClosureParserRuleCall_1_1_3_1_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXShortClosure();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getMemberCallArgumentsXShortClosureParserRuleCall_1_1_3_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__MemberCallArgumentsAssignment_1_1_3_1_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getMemberCallArgumentsXExpressionParserRuleCall_1_1_3_1_1_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getMemberCallArgumentsXExpressionParserRuleCall_1_1_3_1_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__MemberCallArgumentsAssignment_1_1_3_1_1_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getMemberCallArgumentsXExpressionParserRuleCall_1_1_3_1_1_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getMemberCallArgumentsXExpressionParserRuleCall_1_1_3_1_1_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XMemberFeatureCall__MemberCallArgumentsAssignment_1_1_4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXMemberFeatureCallAccess().getMemberCallArgumentsXClosureParserRuleCall_1_1_4_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXClosure();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXMemberFeatureCallAccess().getMemberCallArgumentsXClosureParserRuleCall_1_1_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSetLiteral__ElementsAssignment_3_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSetLiteralAccess().getElementsXExpressionParserRuleCall_3_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXSetLiteralAccess().getElementsXExpressionParserRuleCall_3_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSetLiteral__ElementsAssignment_3_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSetLiteralAccess().getElementsXExpressionParserRuleCall_3_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXSetLiteralAccess().getElementsXExpressionParserRuleCall_3_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XListLiteral__ElementsAssignment_3_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXListLiteralAccess().getElementsXExpressionParserRuleCall_3_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXListLiteralAccess().getElementsXExpressionParserRuleCall_3_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XListLiteral__ElementsAssignment_3_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXListLiteralAccess().getElementsXExpressionParserRuleCall_3_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXListLiteralAccess().getElementsXExpressionParserRuleCall_3_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XClosure__DeclaredFormalParametersAssignment_1_0_0_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXClosureAccess().getDeclaredFormalParametersJvmFormalParameterParserRuleCall_1_0_0_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmFormalParameter();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXClosureAccess().getDeclaredFormalParametersJvmFormalParameterParserRuleCall_1_0_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XClosure__DeclaredFormalParametersAssignment_1_0_0_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXClosureAccess().getDeclaredFormalParametersJvmFormalParameterParserRuleCall_1_0_0_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmFormalParameter();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXClosureAccess().getDeclaredFormalParametersJvmFormalParameterParserRuleCall_1_0_0_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XClosure__ExplicitSyntaxAssignment_1_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXClosureAccess().getExplicitSyntaxVerticalLineKeyword_1_0_1_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXClosureAccess().getExplicitSyntaxVerticalLineKeyword_1_0_1_0()); 
            }
            match(input,KW_VerticalLine,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXClosureAccess().getExplicitSyntaxVerticalLineKeyword_1_0_1_0()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXClosureAccess().getExplicitSyntaxVerticalLineKeyword_1_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XClosure__ExpressionAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXClosureAccess().getExpressionXExpressionInClosureParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpressionInClosure();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXClosureAccess().getExpressionXExpressionInClosureParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XExpressionInClosure__ExpressionsAssignment_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXExpressionInClosureAccess().getExpressionsXExpressionOrVarDeclarationParserRuleCall_1_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpressionOrVarDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXExpressionInClosureAccess().getExpressionsXExpressionOrVarDeclarationParserRuleCall_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XShortClosure__DeclaredFormalParametersAssignment_0_0_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXShortClosureAccess().getDeclaredFormalParametersJvmFormalParameterParserRuleCall_0_0_1_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmFormalParameter();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXShortClosureAccess().getDeclaredFormalParametersJvmFormalParameterParserRuleCall_0_0_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XShortClosure__DeclaredFormalParametersAssignment_0_0_1_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXShortClosureAccess().getDeclaredFormalParametersJvmFormalParameterParserRuleCall_0_0_1_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmFormalParameter();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXShortClosureAccess().getDeclaredFormalParametersJvmFormalParameterParserRuleCall_0_0_1_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XShortClosure__ExplicitSyntaxAssignment_0_0_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXShortClosureAccess().getExplicitSyntaxVerticalLineKeyword_0_0_2_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXShortClosureAccess().getExplicitSyntaxVerticalLineKeyword_0_0_2_0()); 
            }
            match(input,KW_VerticalLine,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXShortClosureAccess().getExplicitSyntaxVerticalLineKeyword_0_0_2_0()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXShortClosureAccess().getExplicitSyntaxVerticalLineKeyword_0_0_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XShortClosure__ExpressionAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXShortClosureAccess().getExpressionXExpressionParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXShortClosureAccess().getExpressionXExpressionParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XIfExpression__IfAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXIfExpressionAccess().getIfXExpressionParserRuleCall_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXIfExpressionAccess().getIfXExpressionParserRuleCall_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XIfExpression__ThenAssignment_5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXIfExpressionAccess().getThenXExpressionParserRuleCall_5_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXIfExpressionAccess().getThenXExpressionParserRuleCall_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XIfExpression__ElseAssignment_6_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXIfExpressionAccess().getElseXExpressionParserRuleCall_6_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXIfExpressionAccess().getElseXExpressionParserRuleCall_6_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XForLoopExpression__DeclaredParamAssignment_0_0_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXForLoopExpressionAccess().getDeclaredParamJvmFormalParameterParserRuleCall_0_0_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmFormalParameter();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXForLoopExpressionAccess().getDeclaredParamJvmFormalParameterParserRuleCall_0_0_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XForLoopExpression__ForExpressionAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXForLoopExpressionAccess().getForExpressionXExpressionParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXForLoopExpressionAccess().getForExpressionXExpressionParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XForLoopExpression__EachExpressionAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXForLoopExpressionAccess().getEachExpressionXExpressionParserRuleCall_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXForLoopExpressionAccess().getEachExpressionXExpressionParserRuleCall_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBasicForLoopExpression__InitExpressionsAssignment_3_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXBasicForLoopExpressionAccess().getInitExpressionsXExpressionOrVarDeclarationParserRuleCall_3_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpressionOrVarDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXBasicForLoopExpressionAccess().getInitExpressionsXExpressionOrVarDeclarationParserRuleCall_3_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBasicForLoopExpression__InitExpressionsAssignment_3_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXBasicForLoopExpressionAccess().getInitExpressionsXExpressionOrVarDeclarationParserRuleCall_3_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpressionOrVarDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXBasicForLoopExpressionAccess().getInitExpressionsXExpressionOrVarDeclarationParserRuleCall_3_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBasicForLoopExpression__ExpressionAssignment_5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXBasicForLoopExpressionAccess().getExpressionXExpressionParserRuleCall_5_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXBasicForLoopExpressionAccess().getExpressionXExpressionParserRuleCall_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBasicForLoopExpression__UpdateExpressionsAssignment_7_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXBasicForLoopExpressionAccess().getUpdateExpressionsXExpressionParserRuleCall_7_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXBasicForLoopExpressionAccess().getUpdateExpressionsXExpressionParserRuleCall_7_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBasicForLoopExpression__UpdateExpressionsAssignment_7_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXBasicForLoopExpressionAccess().getUpdateExpressionsXExpressionParserRuleCall_7_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXBasicForLoopExpressionAccess().getUpdateExpressionsXExpressionParserRuleCall_7_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBasicForLoopExpression__EachExpressionAssignment_9() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXBasicForLoopExpressionAccess().getEachExpressionXExpressionParserRuleCall_9_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXBasicForLoopExpressionAccess().getEachExpressionXExpressionParserRuleCall_9_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XWhileExpression__PredicateAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXWhileExpressionAccess().getPredicateXExpressionParserRuleCall_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXWhileExpressionAccess().getPredicateXExpressionParserRuleCall_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XWhileExpression__BodyAssignment_5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXWhileExpressionAccess().getBodyXExpressionParserRuleCall_5_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXWhileExpressionAccess().getBodyXExpressionParserRuleCall_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XDoWhileExpression__BodyAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXDoWhileExpressionAccess().getBodyXExpressionParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXDoWhileExpressionAccess().getBodyXExpressionParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XDoWhileExpression__PredicateAssignment_5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXDoWhileExpressionAccess().getPredicateXExpressionParserRuleCall_5_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXDoWhileExpressionAccess().getPredicateXExpressionParserRuleCall_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBlockExpression__ExpressionsAssignment_2_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXBlockExpressionAccess().getExpressionsXExpressionOrVarDeclarationParserRuleCall_2_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpressionOrVarDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXBlockExpressionAccess().getExpressionsXExpressionOrVarDeclarationParserRuleCall_2_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__TypeArgumentsAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFeatureCallAccess().getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmArgumentTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXFeatureCallAccess().getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__TypeArgumentsAssignment_1_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFeatureCallAccess().getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmArgumentTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXFeatureCallAccess().getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__FeatureAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFeatureCallAccess().getFeatureJvmIdentifiableElementCrossReference_2_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFeatureCallAccess().getFeatureJvmIdentifiableElementIdOrSuperParserRuleCall_2_0_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleIdOrSuper();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXFeatureCallAccess().getFeatureJvmIdentifiableElementIdOrSuperParserRuleCall_2_0_1()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXFeatureCallAccess().getFeatureJvmIdentifiableElementCrossReference_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__ExplicitOperationCallAssignment_3_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFeatureCallAccess().getExplicitOperationCallLeftParenthesisKeyword_3_0_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFeatureCallAccess().getExplicitOperationCallLeftParenthesisKeyword_3_0_0()); 
            }
            match(input,KW_LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXFeatureCallAccess().getExplicitOperationCallLeftParenthesisKeyword_3_0_0()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXFeatureCallAccess().getExplicitOperationCallLeftParenthesisKeyword_3_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__FeatureCallArgumentsAssignment_3_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFeatureCallAccess().getFeatureCallArgumentsXShortClosureParserRuleCall_3_1_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXShortClosure();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXFeatureCallAccess().getFeatureCallArgumentsXShortClosureParserRuleCall_3_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__FeatureCallArgumentsAssignment_3_1_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFeatureCallAccess().getFeatureCallArgumentsXExpressionParserRuleCall_3_1_1_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXFeatureCallAccess().getFeatureCallArgumentsXExpressionParserRuleCall_3_1_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__FeatureCallArgumentsAssignment_3_1_1_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFeatureCallAccess().getFeatureCallArgumentsXExpressionParserRuleCall_3_1_1_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXFeatureCallAccess().getFeatureCallArgumentsXExpressionParserRuleCall_3_1_1_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFeatureCall__FeatureCallArgumentsAssignment_4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFeatureCallAccess().getFeatureCallArgumentsXClosureParserRuleCall_4_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXClosure();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXFeatureCallAccess().getFeatureCallArgumentsXClosureParserRuleCall_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XBooleanLiteral__IsTrueAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXBooleanLiteralAccess().getIsTrueTrueKeyword_1_1_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXBooleanLiteralAccess().getIsTrueTrueKeyword_1_1_0()); 
            }
            match(input,KW_True,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXBooleanLiteralAccess().getIsTrueTrueKeyword_1_1_0()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXBooleanLiteralAccess().getIsTrueTrueKeyword_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XNumberLiteral__ValueAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXNumberLiteralAccess().getValueNumberParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleNumber();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXNumberLiteralAccess().getValueNumberParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTypeLiteral__TypeAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTypeLiteralAccess().getTypeJvmTypeCrossReference_3_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTypeLiteralAccess().getTypeJvmTypeQualifiedNameParserRuleCall_3_0_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleQualifiedName();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXTypeLiteralAccess().getTypeJvmTypeQualifiedNameParserRuleCall_3_0_1()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXTypeLiteralAccess().getTypeJvmTypeCrossReference_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XTypeLiteral__ArrayDimensionsAssignment_4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXTypeLiteralAccess().getArrayDimensionsArrayBracketsParserRuleCall_4_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleArrayBrackets();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXTypeLiteralAccess().getArrayDimensionsArrayBracketsParserRuleCall_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XThrowExpression__ExpressionAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXThrowExpressionAccess().getExpressionXExpressionParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXThrowExpressionAccess().getExpressionXExpressionParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XReturnExpression__ExpressionAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXReturnExpressionAccess().getExpressionXExpressionParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXReturnExpressionAccess().getExpressionXExpressionParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSynchronizedExpression__ParamAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSynchronizedExpressionAccess().getParamXExpressionParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXSynchronizedExpressionAccess().getParamXExpressionParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XSynchronizedExpression__ExpressionAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXSynchronizedExpressionAccess().getExpressionXExpressionParserRuleCall_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXSynchronizedExpressionAccess().getExpressionXExpressionParserRuleCall_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCatchClause__DeclaredParamAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXCatchClauseAccess().getDeclaredParamFullJvmFormalParameterParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleFullJvmFormalParameter();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXCatchClauseAccess().getDeclaredParamFullJvmFormalParameterParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XCatchClause__ExpressionAssignment_4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXCatchClauseAccess().getExpressionXExpressionParserRuleCall_4_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXExpression();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXCatchClauseAccess().getExpressionXExpressionParserRuleCall_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionTypeRef__ParamTypesAssignment_0_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFunctionTypeRefAccess().getParamTypesJvmTypeReferenceParserRuleCall_0_1_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXFunctionTypeRefAccess().getParamTypesJvmTypeReferenceParserRuleCall_0_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionTypeRef__ParamTypesAssignment_0_1_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFunctionTypeRefAccess().getParamTypesJvmTypeReferenceParserRuleCall_0_1_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXFunctionTypeRefAccess().getParamTypesJvmTypeReferenceParserRuleCall_0_1_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XFunctionTypeRef__ReturnTypeAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXFunctionTypeRefAccess().getReturnTypeJvmTypeReferenceParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXFunctionTypeRefAccess().getReturnTypeJvmTypeReferenceParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__TypeAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmParameterizedTypeReferenceAccess().getTypeJvmTypeCrossReference_0_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmParameterizedTypeReferenceAccess().getTypeJvmTypeQualifiedNameParserRuleCall_0_0_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleQualifiedName();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getJvmParameterizedTypeReferenceAccess().getTypeJvmTypeQualifiedNameParserRuleCall_0_0_1()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmParameterizedTypeReferenceAccess().getTypeJvmTypeCrossReference_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__ArgumentsAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmArgumentTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__ArgumentsAssignment_1_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmArgumentTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__TypeAssignment_1_4_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmParameterizedTypeReferenceAccess().getTypeJvmTypeCrossReference_1_4_1_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmParameterizedTypeReferenceAccess().getTypeJvmTypeValidIDParserRuleCall_1_4_1_0_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleValidID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getJvmParameterizedTypeReferenceAccess().getTypeJvmTypeValidIDParserRuleCall_1_4_1_0_1()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getJvmParameterizedTypeReferenceAccess().getTypeJvmTypeCrossReference_1_4_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__ArgumentsAssignment_1_4_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_4_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmArgumentTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_4_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmParameterizedTypeReference__ArgumentsAssignment_1_4_2_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_4_2_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmArgumentTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_4_2_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmWildcardTypeReference__ConstraintsAssignment_2_0_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsJvmUpperBoundParserRuleCall_2_0_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmUpperBound();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsJvmUpperBoundParserRuleCall_2_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmWildcardTypeReference__ConstraintsAssignment_2_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsJvmUpperBoundAndedParserRuleCall_2_0_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmUpperBoundAnded();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsJvmUpperBoundAndedParserRuleCall_2_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmWildcardTypeReference__ConstraintsAssignment_2_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsJvmLowerBoundParserRuleCall_2_1_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmLowerBound();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsJvmLowerBoundParserRuleCall_2_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmWildcardTypeReference__ConstraintsAssignment_2_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsJvmLowerBoundAndedParserRuleCall_2_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmLowerBoundAnded();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsJvmLowerBoundAndedParserRuleCall_2_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmUpperBound__TypeReferenceAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmUpperBoundAccess().getTypeReferenceJvmTypeReferenceParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getJvmUpperBoundAccess().getTypeReferenceJvmTypeReferenceParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmUpperBoundAnded__TypeReferenceAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmUpperBoundAndedAccess().getTypeReferenceJvmTypeReferenceParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getJvmUpperBoundAndedAccess().getTypeReferenceJvmTypeReferenceParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmLowerBound__TypeReferenceAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmLowerBoundAccess().getTypeReferenceJvmTypeReferenceParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getJvmLowerBoundAccess().getTypeReferenceJvmTypeReferenceParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmLowerBoundAnded__TypeReferenceAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmLowerBoundAndedAccess().getTypeReferenceJvmTypeReferenceParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmTypeReference();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getJvmLowerBoundAndedAccess().getTypeReferenceJvmTypeReferenceParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmTypeParameter__NameAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmTypeParameterAccess().getNameValidIDParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleValidID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getJvmTypeParameterAccess().getNameValidIDParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmTypeParameter__ConstraintsAssignment_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmTypeParameterAccess().getConstraintsJvmUpperBoundParserRuleCall_1_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmUpperBound();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getJvmTypeParameterAccess().getConstraintsJvmUpperBoundParserRuleCall_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__JvmTypeParameter__ConstraintsAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getJvmTypeParameterAccess().getConstraintsJvmUpperBoundAndedParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleJvmUpperBoundAnded();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getJvmTypeParameterAccess().getConstraintsJvmUpperBoundAndedParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XImportSection__ImportDeclarationsAssignment() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXImportSectionAccess().getImportDeclarationsXImportDeclarationParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXImportDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXImportSectionAccess().getImportDeclarationsXImportDeclarationParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XImportDeclaration__StaticAssignment_1_0_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXImportDeclarationAccess().getStaticStaticKeyword_1_0_0_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXImportDeclarationAccess().getStaticStaticKeyword_1_0_0_0()); 
            }
            match(input,KW_Static,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXImportDeclarationAccess().getStaticStaticKeyword_1_0_0_0()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXImportDeclarationAccess().getStaticStaticKeyword_1_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XImportDeclaration__ExtensionAssignment_1_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXImportDeclarationAccess().getExtensionExtensionKeyword_1_0_1_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXImportDeclarationAccess().getExtensionExtensionKeyword_1_0_1_0()); 
            }
            match(input,KW_Extension,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXImportDeclarationAccess().getExtensionExtensionKeyword_1_0_1_0()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXImportDeclarationAccess().getExtensionExtensionKeyword_1_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XImportDeclaration__ImportedTypeAssignment_1_0_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXImportDeclarationAccess().getImportedTypeJvmDeclaredTypeCrossReference_1_0_2_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXImportDeclarationAccess().getImportedTypeJvmDeclaredTypeQualifiedNameInStaticImportParserRuleCall_1_0_2_0_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleQualifiedNameInStaticImport();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXImportDeclarationAccess().getImportedTypeJvmDeclaredTypeQualifiedNameInStaticImportParserRuleCall_1_0_2_0_1()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXImportDeclarationAccess().getImportedTypeJvmDeclaredTypeCrossReference_1_0_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XImportDeclaration__WildcardAssignment_1_0_3_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXImportDeclarationAccess().getWildcardAsteriskKeyword_1_0_3_0_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXImportDeclarationAccess().getWildcardAsteriskKeyword_1_0_3_0_0()); 
            }
            match(input,KW_Asterisk,FOLLOW_2); if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXImportDeclarationAccess().getWildcardAsteriskKeyword_1_0_3_0_0()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXImportDeclarationAccess().getWildcardAsteriskKeyword_1_0_3_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XImportDeclaration__MemberNameAssignment_1_0_3_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXImportDeclarationAccess().getMemberNameValidIDParserRuleCall_1_0_3_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleValidID();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXImportDeclarationAccess().getMemberNameValidIDParserRuleCall_1_0_3_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XImportDeclaration__ImportedTypeAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXImportDeclarationAccess().getImportedTypeJvmDeclaredTypeCrossReference_1_1_0()); 
            }
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXImportDeclarationAccess().getImportedTypeJvmDeclaredTypeQualifiedNameParserRuleCall_1_1_0_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleQualifiedName();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXImportDeclarationAccess().getImportedTypeJvmDeclaredTypeQualifiedNameParserRuleCall_1_1_0_1()); 
            }

            }

            if (! isBacktracking() ) {
               after(grammarAccess.getXImportDeclarationAccess().getImportedTypeJvmDeclaredTypeCrossReference_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void rule__XImportDeclaration__ImportedNamespaceAssignment_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if (! isBacktracking() ) {
               before(grammarAccess.getXImportDeclarationAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleQualifiedNameWithWildcard();

            state._fsp--;
            if (state.failed) return ;
            if (! isBacktracking() ) {
               after(grammarAccess.getXImportDeclarationAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    public final void synpred23_InternalXtend_fragment() throws RecognitionException {   
        {
        {
        if (! isBacktracking() ) {
           before(grammarAccess.getMemberAccess().getGroup_2_1_5_0()); 
        }
        {
        pushFollow(FOLLOW_2);
        rule__Member__Group_2_1_5_0__0();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred24_InternalXtend_fragment() throws RecognitionException {   
        {
        {
        if (! isBacktracking() ) {
           before(grammarAccess.getMemberAccess().getGroup_2_1_5_1()); 
        }
        {
        pushFollow(FOLLOW_2);
        rule__Member__Group_2_1_5_1__0();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred25_InternalXtend_fragment() throws RecognitionException {   
        {
        {
        if (! isBacktracking() ) {
           before(grammarAccess.getMemberAccess().getGroup_2_1_5_2()); 
        }
        {
        pushFollow(FOLLOW_2);
        rule__Member__Group_2_1_5_2__0();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred26_InternalXtend_fragment() throws RecognitionException {   
        {
        {
        if (! isBacktracking() ) {
           before(grammarAccess.getMemberAccess().getGroup_2_1_5_3()); 
        }
        {
        pushFollow(FOLLOW_2);
        rule__Member__Group_2_1_5_3__0();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred91_InternalXtend_fragment() throws RecognitionException {   
        {
        {
        if (! isBacktracking() ) {
           before(grammarAccess.getXVariableDeclarationAccess().getGroup_1_0()); 
        }
        {
        pushFollow(FOLLOW_2);
        rule__XVariableDeclaration__Group_1_0__0();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred96_InternalXtend_fragment() throws RecognitionException {   
        {
        {
        if (! isBacktracking() ) {
           before(grammarAccess.getXbaseConstructorCallAccess().getArgumentsAssignment_4_1_0()); 
        }
        {
        pushFollow(FOLLOW_2);
        rule__XbaseConstructorCall__ArgumentsAssignment_4_1_0();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred98_InternalXtend_fragment() throws RecognitionException {   
        {
        {
        if (! isBacktracking() ) {
           before(grammarAccess.getXSwitchExpressionAccess().getGroup_2_0()); 
        }
        {
        pushFollow(FOLLOW_2);
        rule__XSwitchExpression__Group_2_0__0();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred100_InternalXtend_fragment() throws RecognitionException {   
        {
        {
        if (! isBacktracking() ) {
           before(grammarAccess.getXExpressionOrSimpleConstructorCallAccess().getXbaseConstructorCallParserRuleCall_0()); 
        }
        {
        pushFollow(FOLLOW_2);
        ruleXbaseConstructorCall();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred106_InternalXtend_fragment() throws RecognitionException {   
        {
        {
        if (! isBacktracking() ) {
           before(grammarAccess.getXAnnotationAccess().getGroup_3_1_0()); 
        }
        {
        pushFollow(FOLLOW_2);
        rule__XAnnotation__Group_3_1_0__0();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred107_InternalXtend_fragment() throws RecognitionException {   
        {
        {
        if (! isBacktracking() ) {
           before(grammarAccess.getXAnnotationElementValueOrCommaListAccess().getGroup_0()); 
        }
        {
        pushFollow(FOLLOW_2);
        rule__XAnnotationElementValueOrCommaList__Group_0__0();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred108_InternalXtend_fragment() throws RecognitionException {   
        {
        {
        if (! isBacktracking() ) {
           before(grammarAccess.getXAnnotationElementValueAccess().getGroup_0()); 
        }
        {
        pushFollow(FOLLOW_2);
        rule__XAnnotationElementValue__Group_0__0();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred132_InternalXtend_fragment() throws RecognitionException {   
        {
        {
        if (! isBacktracking() ) {
           before(grammarAccess.getOpOtherAccess().getGroup_6_1_0()); 
        }
        {
        pushFollow(FOLLOW_2);
        rule__OpOther__Group_6_1_0__0();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred133_InternalXtend_fragment() throws RecognitionException {   
        {
        {
        if (! isBacktracking() ) {
           before(grammarAccess.getOpOtherAccess().getLessThanSignKeyword_6_1_1()); 
        }
        match(input,KW_LessThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred146_InternalXtend_fragment() throws RecognitionException {   
        {
        {
        if (! isBacktracking() ) {
           before(grammarAccess.getXMemberFeatureCallAccess().getMemberCallArgumentsAssignment_1_1_3_1_0()); 
        }
        {
        pushFollow(FOLLOW_2);
        rule__XMemberFeatureCall__MemberCallArgumentsAssignment_1_1_3_1_0();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred150_InternalXtend_fragment() throws RecognitionException {   
        {
        {
        if (! isBacktracking() ) {
           before(grammarAccess.getXPrimaryExpressionAccess().getXSynchronizedExpressionParserRuleCall_3()); 
        }
        {
        pushFollow(FOLLOW_2);
        ruleXSynchronizedExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred151_InternalXtend_fragment() throws RecognitionException {   
        {
        {
        if (! isBacktracking() ) {
           before(grammarAccess.getXPrimaryExpressionAccess().getXFeatureCallParserRuleCall_4()); 
        }
        pushFollow(FOLLOW_2);
        ruleXFeatureCall();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred154_InternalXtend_fragment() throws RecognitionException {   
        {
        {
        if (! isBacktracking() ) {
           before(grammarAccess.getXPrimaryExpressionAccess().getXForLoopExpressionParserRuleCall_7()); 
        }
        {
        pushFollow(FOLLOW_2);
        ruleXForLoopExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred155_InternalXtend_fragment() throws RecognitionException {   
        {
        {
        if (! isBacktracking() ) {
           before(grammarAccess.getXPrimaryExpressionAccess().getXBasicForLoopExpressionParserRuleCall_8()); 
        }
        pushFollow(FOLLOW_2);
        ruleXBasicForLoopExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred168_InternalXtend_fragment() throws RecognitionException {   
        {
        {
        if (! isBacktracking() ) {
           before(grammarAccess.getXExpressionOrVarDeclarationAccess().getXVariableDeclarationParserRuleCall_0()); 
        }
        {
        pushFollow(FOLLOW_2);
        ruleXVariableDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred169_InternalXtend_fragment() throws RecognitionException {   
        {
        {
        if (! isBacktracking() ) {
           before(grammarAccess.getXFeatureCallAccess().getFeatureCallArgumentsAssignment_3_1_0()); 
        }
        {
        pushFollow(FOLLOW_2);
        rule__XFeatureCall__FeatureCallArgumentsAssignment_3_1_0();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred284_InternalXtend_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4_2__0();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred292_InternalXtend_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        rule__XAssignment__Group_1_1__0();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred293_InternalXtend_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        rule__XConditionalExpression__Group_1__0();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred294_InternalXtend_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        rule__XConditionalExpression__Group_1_2__0();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred297_InternalXtend_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        rule__XTryCatchFinallyExpression__Group_2_0_6__0();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred298_InternalXtend_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        rule__XTryCatchFinallyExpression__CatchClausesAssignment_2_0_6_0_0_0();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred299_InternalXtend_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        rule__XTryCatchFinallyExpression__Group_2_0_6_0_0_1__0();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred300_InternalXtend_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        rule__XTryCatchFinallyExpression__CatchClausesAssignment_2_1_1_0_0();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred301_InternalXtend_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        rule__XTryCatchFinallyExpression__Group_2_1_1_0_1__0();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred304_InternalXtend_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        rule__XConstructorCall__Group_1__0();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred306_InternalXtend_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        rule__XbaseConstructorCall__Group_3__0();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred307_InternalXtend_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        rule__XbaseConstructorCall__Group_4__0();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred308_InternalXtend_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        rule__XbaseConstructorCall__ArgumentsAssignment_5();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred319_InternalXtend_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        rule__XSwitchExpression__Group_2_1_0__0();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred332_InternalXtend_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        rule__XAnnotation__Group_3__0();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred342_InternalXtend_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        rule__XOrExpression__Group_1__0();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred343_InternalXtend_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        rule__XAndExpression__Group_1__0();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred344_InternalXtend_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        rule__XEqualityExpression__Group_1__0();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred345_InternalXtend_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        rule__XRelationalExpression__Alternatives_1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred346_InternalXtend_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        rule__XOtherOperatorExpression__Group_1__0();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred347_InternalXtend_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        rule__XAdditiveExpression__Group_1__0();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred348_InternalXtend_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        rule__XMultiplicativeExpression__Group_1__0();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred349_InternalXtend_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        rule__XCastedExpression__Group_1__0();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred350_InternalXtend_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        rule__XPostfixOperation__Group_1__0();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred351_InternalXtend_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        rule__XMemberFeatureCall__Alternatives_1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred353_InternalXtend_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        rule__XMemberFeatureCall__Group_1_1_3__0();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred354_InternalXtend_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        rule__XMemberFeatureCall__MemberCallArgumentsAssignment_1_1_4();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred362_InternalXtend_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        rule__XClosure__Group_1__0();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred369_InternalXtend_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        rule__XIfExpression__Group_6__0();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred378_InternalXtend_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        rule__XFeatureCall__Group_3__0();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred379_InternalXtend_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        rule__XFeatureCall__FeatureCallArgumentsAssignment_4();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred384_InternalXtend_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        rule__XReturnExpression__ExpressionAssignment_2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred385_InternalXtend_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        rule__QualifiedName__Group_1__0();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred387_InternalXtend_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        rule__JvmTypeReference__Group_0_1__0();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred391_InternalXtend_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        rule__JvmParameterizedTypeReference__Group_1__0();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred393_InternalXtend_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        rule__JvmParameterizedTypeReference__Group_1_4__0();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred394_InternalXtend_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        rule__JvmParameterizedTypeReference__Group_1_4_2__0();

        state._fsp--;
        if (state.failed) return ;

        }
    }

    public final boolean synpred23_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred362_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred362_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred297_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred297_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred107_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred107_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred304_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred304_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred391_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred391_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred379_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred379_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred308_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred308_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred293_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred293_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred298_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred298_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred346_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred346_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred354_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred354_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred106_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred106_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred344_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred344_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred350_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred350_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred132_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred132_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred96_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred96_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred345_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred345_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred169_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred169_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred91_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred91_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred154_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred154_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred294_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred294_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred299_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred299_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred284_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred284_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred387_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred387_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred307_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred307_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred349_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred349_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred393_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred393_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred319_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred319_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred306_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred306_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred351_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred351_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred146_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred146_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred301_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred301_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred343_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred343_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred133_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred133_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred385_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred385_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred155_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred155_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred168_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred168_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred100_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred100_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred394_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred394_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred150_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred150_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred348_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred348_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred369_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred369_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred384_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred384_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred300_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred300_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred342_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred342_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred347_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred347_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred108_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred108_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred151_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred151_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred378_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred378_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred353_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred353_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred332_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred332_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred98_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred98_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred292_InternalXtend() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred292_InternalXtend_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA3 dfa3 = new DFA3(this);
    protected DFA5 dfa5 = new DFA5(this);
    protected DFA6 dfa6 = new DFA6(this);
    protected DFA7 dfa7 = new DFA7(this);
    protected DFA8 dfa8 = new DFA8(this);
    protected DFA11 dfa11 = new DFA11(this);
    protected DFA13 dfa13 = new DFA13(this);
    protected DFA15 dfa15 = new DFA15(this);
    protected DFA22 dfa22 = new DFA22(this);
    protected DFA26 dfa26 = new DFA26(this);
    protected DFA31 dfa31 = new DFA31(this);
    protected DFA33 dfa33 = new DFA33(this);
    protected DFA35 dfa35 = new DFA35(this);
    protected DFA40 dfa40 = new DFA40(this);
    protected DFA41 dfa41 = new DFA41(this);
    protected DFA42 dfa42 = new DFA42(this);
    protected DFA48 dfa48 = new DFA48(this);
    protected DFA56 dfa56 = new DFA56(this);
    protected DFA59 dfa59 = new DFA59(this);
    protected DFA60 dfa60 = new DFA60(this);
    protected DFA64 dfa64 = new DFA64(this);
    protected DFA73 dfa73 = new DFA73(this);
    protected DFA107 dfa107 = new DFA107(this);
    protected DFA133 dfa133 = new DFA133(this);
    protected DFA135 dfa135 = new DFA135(this);
    protected DFA138 dfa138 = new DFA138(this);
    protected DFA178 dfa178 = new DFA178(this);
    protected DFA186 dfa186 = new DFA186(this);
    protected DFA198 dfa198 = new DFA198(this);
    protected DFA200 dfa200 = new DFA200(this);
    protected DFA201 dfa201 = new DFA201(this);
    protected DFA202 dfa202 = new DFA202(this);
    protected DFA213 dfa213 = new DFA213(this);
    protected DFA226 dfa226 = new DFA226(this);
    protected DFA240 dfa240 = new DFA240(this);
    protected DFA247 dfa247 = new DFA247(this);
    protected DFA248 dfa248 = new DFA248(this);
    protected DFA256 dfa256 = new DFA256(this);
    protected DFA272 dfa272 = new DFA272(this);
    protected DFA273 dfa273 = new DFA273(this);
    protected DFA278 dfa278 = new DFA278(this);
    protected DFA279 dfa279 = new DFA279(this);
    protected DFA285 dfa285 = new DFA285(this);
    protected DFA287 dfa287 = new DFA287(this);
    protected DFA288 dfa288 = new DFA288(this);
    static final String dfa_1s = "\22\uffff";
    static final String dfa_2s = "\16\4\4\uffff";
    static final String dfa_3s = "\16\44\4\uffff";
    static final String dfa_4s = "\16\uffff\1\1\1\2\1\3\1\4";
    static final String dfa_5s = "\22\uffff}>";
    static final String[] dfa_6s = {
            "\1\4\1\uffff\1\16\7\uffff\1\17\1\20\1\21\10\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15",
            "\1\4\1\uffff\1\16\7\uffff\1\17\1\20\1\21\10\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15",
            "\1\4\1\uffff\1\16\7\uffff\1\17\1\20\1\21\10\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15",
            "\1\4\1\uffff\1\16\7\uffff\1\17\1\20\1\21\10\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15",
            "\1\4\1\uffff\1\16\7\uffff\1\17\1\20\1\21\10\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15",
            "\1\4\1\uffff\1\16\7\uffff\1\17\1\20\1\21\10\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15",
            "\1\4\1\uffff\1\16\7\uffff\1\17\1\20\1\21\10\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15",
            "\1\4\1\uffff\1\16\7\uffff\1\17\1\20\1\21\10\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15",
            "\1\4\1\uffff\1\16\7\uffff\1\17\1\20\1\21\10\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15",
            "\1\4\1\uffff\1\16\7\uffff\1\17\1\20\1\21\10\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15",
            "\1\4\1\uffff\1\16\7\uffff\1\17\1\20\1\21\10\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15",
            "\1\4\1\uffff\1\16\7\uffff\1\17\1\20\1\21\10\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15",
            "\1\4\1\uffff\1\16\7\uffff\1\17\1\20\1\21\10\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15",
            "\1\4\1\uffff\1\16\7\uffff\1\17\1\20\1\21\10\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_1 = DFA.unpackEncodedString(dfa_1s);
    static final char[] dfa_2 = DFA.unpackEncodedStringToUnsignedChars(dfa_2s);
    static final char[] dfa_3 = DFA.unpackEncodedStringToUnsignedChars(dfa_3s);
    static final short[] dfa_4 = DFA.unpackEncodedString(dfa_4s);
    static final short[] dfa_5 = DFA.unpackEncodedString(dfa_5s);
    static final short[][] dfa_6 = unpackEncodedStringArray(dfa_6s);

    class DFA3 extends DFA {

        public DFA3(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = dfa_1;
            this.eof = dfa_1;
            this.min = dfa_2;
            this.max = dfa_3;
            this.accept = dfa_4;
            this.special = dfa_5;
            this.transition = dfa_6;
        }
        public String getDescription() {
            return "3104:1: rule__Type__Alternatives_2 : ( ( ( rule__Type__Group_2_0__0 ) ) | ( ( rule__Type__Group_2_1__0 ) ) | ( ( rule__Type__Group_2_2__0 ) ) | ( ( rule__Type__Group_2_3__0 ) ) );";
        }
    }
    static final String dfa_7s = "\32\uffff";
    static final String dfa_8s = "\23\uffff\6\16\1\uffff";
    static final String dfa_9s = "\16\4\1\uffff\1\7\3\uffff\6\4\1\uffff";
    static final String dfa_10s = "\16\155\1\uffff\1\155\3\uffff\6\155\1\uffff";
    static final String dfa_11s = "\16\uffff\1\1\1\uffff\1\2\1\3\1\4\6\uffff\1\5";
    static final String dfa_12s = "\32\uffff}>";
    static final String[] dfa_13s = {
            "\1\4\1\uffff\1\20\7\uffff\1\21\1\22\1\17\1\16\1\uffff\1\16\5\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16\2\uffff\1\16\1\uffff\3\16\77\uffff\1\16",
            "\1\4\1\uffff\1\20\7\uffff\1\21\1\22\1\17\1\16\1\uffff\1\16\5\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16\2\uffff\1\16\1\uffff\3\16\77\uffff\1\16",
            "\1\4\1\uffff\1\20\7\uffff\1\21\1\22\1\17\1\16\1\uffff\1\16\5\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16\2\uffff\1\16\1\uffff\3\16\77\uffff\1\16",
            "\1\4\1\uffff\1\20\7\uffff\1\21\1\22\1\17\1\16\1\uffff\1\16\5\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16\2\uffff\1\16\1\uffff\3\16\77\uffff\1\16",
            "\1\4\1\uffff\1\20\7\uffff\1\21\1\22\1\17\1\16\1\uffff\1\16\5\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16\2\uffff\1\16\1\uffff\3\16\77\uffff\1\16",
            "\1\4\1\uffff\1\20\7\uffff\1\21\1\22\1\17\1\16\1\uffff\1\16\5\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16\2\uffff\1\16\1\uffff\3\16\77\uffff\1\16",
            "\1\4\1\uffff\1\20\7\uffff\1\21\1\22\1\17\1\16\1\uffff\1\16\5\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16\2\uffff\1\16\1\uffff\3\16\77\uffff\1\16",
            "\1\4\1\uffff\1\20\7\uffff\1\21\1\22\1\17\1\16\1\uffff\1\16\5\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16\2\uffff\1\16\1\uffff\3\16\77\uffff\1\16",
            "\1\4\1\uffff\1\20\7\uffff\1\21\1\22\1\17\1\16\1\uffff\1\16\5\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16\2\uffff\1\16\1\uffff\3\16\77\uffff\1\16",
            "\1\4\1\uffff\1\20\7\uffff\1\21\1\22\1\17\1\16\1\uffff\1\16\5\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16\2\uffff\1\16\1\uffff\3\16\77\uffff\1\16",
            "\1\4\1\uffff\1\20\7\uffff\1\21\1\22\1\17\1\16\1\uffff\1\16\5\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16\2\uffff\1\16\1\uffff\3\16\77\uffff\1\16",
            "\1\4\1\uffff\1\20\7\uffff\1\21\1\22\1\17\1\16\1\uffff\1\16\5\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16\2\uffff\1\16\1\uffff\3\16\77\uffff\1\16",
            "\1\4\1\uffff\1\20\7\uffff\1\21\1\22\1\17\1\16\1\uffff\1\16\5\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16\2\uffff\1\16\1\uffff\3\16\77\uffff\1\16",
            "\1\4\1\uffff\1\20\7\uffff\1\21\1\22\1\17\1\16\1\uffff\1\16\5\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16\2\uffff\1\16\1\uffff\3\16\77\uffff\1\16",
            "",
            "\1\16\10\uffff\1\25\7\uffff\1\16\20\uffff\1\24\1\uffff\1\26\1\27\1\30\21\uffff\1\16\55\uffff\1\23",
            "",
            "",
            "",
            "\3\16\5\uffff\1\31\5\16\1\uffff\2\16\4\uffff\16\16\2\uffff\1\16\1\uffff\3\16\17\uffff\1\16\57\uffff\1\16",
            "\3\16\5\uffff\1\31\5\16\1\uffff\2\16\4\uffff\16\16\2\uffff\1\16\1\uffff\3\16\17\uffff\1\16\57\uffff\1\16",
            "\3\16\5\uffff\1\31\5\16\1\uffff\2\16\4\uffff\16\16\2\uffff\1\16\1\uffff\3\16\17\uffff\1\16\57\uffff\1\16",
            "\3\16\5\uffff\1\31\5\16\1\uffff\2\16\4\uffff\16\16\2\uffff\1\16\1\uffff\3\16\17\uffff\1\16\57\uffff\1\16",
            "\3\16\5\uffff\1\31\5\16\1\uffff\2\16\4\uffff\16\16\2\uffff\1\16\1\uffff\3\16\17\uffff\1\16\57\uffff\1\16",
            "\3\16\5\uffff\1\31\5\16\1\uffff\2\16\4\uffff\16\16\2\uffff\1\16\1\uffff\3\16\17\uffff\1\16\57\uffff\1\16",
            ""
    };

    static final short[] dfa_7 = DFA.unpackEncodedString(dfa_7s);
    static final short[] dfa_8 = DFA.unpackEncodedString(dfa_8s);
    static final char[] dfa_9 = DFA.unpackEncodedStringToUnsignedChars(dfa_9s);
    static final char[] dfa_10 = DFA.unpackEncodedStringToUnsignedChars(dfa_10s);
    static final short[] dfa_11 = DFA.unpackEncodedString(dfa_11s);
    static final short[] dfa_12 = DFA.unpackEncodedString(dfa_12s);
    static final short[][] dfa_13 = unpackEncodedStringArray(dfa_13s);

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = dfa_7;
            this.eof = dfa_8;
            this.min = dfa_9;
            this.max = dfa_10;
            this.accept = dfa_11;
            this.special = dfa_12;
            this.transition = dfa_13;
        }
        public String getDescription() {
            return "3158:1: rule__AnnotationField__Alternatives_2 : ( ( ( rule__AnnotationField__Group_2_0__0 ) ) | ( ( rule__AnnotationField__Group_2_1__0 ) ) | ( ( rule__AnnotationField__Group_2_2__0 ) ) | ( ( rule__AnnotationField__Group_2_3__0 ) ) | ( ( rule__AnnotationField__Group_2_4__0 ) ) );";
        }
    }
    static final String dfa_14s = "\20\uffff";
    static final String dfa_15s = "\16\4\2\uffff";
    static final String dfa_16s = "\16\155\2\uffff";
    static final String dfa_17s = "\16\uffff\1\1\1\2";
    static final String dfa_18s = "\20\uffff}>";
    static final String[] dfa_19s = {
            "\1\4\13\uffff\2\17\1\uffff\1\17\5\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16\2\uffff\1\17\1\uffff\3\17\77\uffff\1\17",
            "\1\4\13\uffff\2\17\1\uffff\1\17\5\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16\2\uffff\1\17\1\uffff\3\17\77\uffff\1\17",
            "\1\4\13\uffff\2\17\1\uffff\1\17\5\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16\2\uffff\1\17\1\uffff\3\17\77\uffff\1\17",
            "\1\4\13\uffff\2\17\1\uffff\1\17\5\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16\2\uffff\1\17\1\uffff\3\17\77\uffff\1\17",
            "\1\4\13\uffff\2\17\1\uffff\1\17\5\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16\2\uffff\1\17\1\uffff\3\17\77\uffff\1\17",
            "\1\4\13\uffff\2\17\1\uffff\1\17\5\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16\2\uffff\1\17\1\uffff\3\17\77\uffff\1\17",
            "\1\4\13\uffff\2\17\1\uffff\1\17\5\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16\2\uffff\1\17\1\uffff\3\17\77\uffff\1\17",
            "\1\4\13\uffff\2\17\1\uffff\1\17\5\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16\2\uffff\1\17\1\uffff\3\17\77\uffff\1\17",
            "\1\4\13\uffff\2\17\1\uffff\1\17\5\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16\2\uffff\1\17\1\uffff\3\17\77\uffff\1\17",
            "\1\4\13\uffff\2\17\1\uffff\1\17\5\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16\2\uffff\1\17\1\uffff\3\17\77\uffff\1\17",
            "\1\4\13\uffff\2\17\1\uffff\1\17\5\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16\2\uffff\1\17\1\uffff\3\17\77\uffff\1\17",
            "\1\4\13\uffff\2\17\1\uffff\1\17\5\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16\2\uffff\1\17\1\uffff\3\17\77\uffff\1\17",
            "\1\4\13\uffff\2\17\1\uffff\1\17\5\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16\2\uffff\1\17\1\uffff\3\17\77\uffff\1\17",
            "\1\4\13\uffff\2\17\1\uffff\1\17\5\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16\2\uffff\1\17\1\uffff\3\17\77\uffff\1\17",
            "",
            ""
    };

    static final short[] dfa_14 = DFA.unpackEncodedString(dfa_14s);
    static final char[] dfa_15 = DFA.unpackEncodedStringToUnsignedChars(dfa_15s);
    static final char[] dfa_16 = DFA.unpackEncodedStringToUnsignedChars(dfa_16s);
    static final short[] dfa_17 = DFA.unpackEncodedString(dfa_17s);
    static final short[] dfa_18 = DFA.unpackEncodedString(dfa_18s);
    static final short[][] dfa_19 = unpackEncodedStringArray(dfa_19s);

    class DFA6 extends DFA {

        public DFA6(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 6;
            this.eot = dfa_14;
            this.eof = dfa_14;
            this.min = dfa_15;
            this.max = dfa_16;
            this.accept = dfa_17;
            this.special = dfa_18;
            this.transition = dfa_19;
        }
        public String getDescription() {
            return "3197:1: rule__AnnotationField__Alternatives_2_0_0 : ( ( ( rule__AnnotationField__Group_2_0_0_0__0 ) ) | ( ( rule__AnnotationField__Group_2_0_0_1__0 ) ) );";
        }
    }
    static final String dfa_20s = "\34\uffff";
    static final String dfa_21s = "\25\uffff\6\16\1\uffff";
    static final String dfa_22s = "\16\4\1\uffff\1\7\5\uffff\6\4\1\uffff";
    static final String dfa_23s = "\16\155\1\uffff\1\155\5\uffff\6\155\1\uffff";
    static final String dfa_24s = "\16\uffff\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\6\uffff\1\7";
    static final String dfa_25s = "\34\uffff}>";
    static final String[] dfa_26s = {
            "\1\4\1\uffff\1\22\7\uffff\1\23\1\24\1\17\1\16\1\uffff\1\16\1\uffff\1\16\1\uffff\1\21\1\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16\2\20\1\16\1\uffff\3\16\77\uffff\1\16",
            "\1\4\1\uffff\1\22\7\uffff\1\23\1\24\1\17\1\16\1\uffff\1\16\1\uffff\1\16\1\uffff\1\21\1\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16\2\20\1\16\1\uffff\3\16\77\uffff\1\16",
            "\1\4\1\uffff\1\22\7\uffff\1\23\1\24\1\17\1\16\1\uffff\1\16\1\uffff\1\16\1\uffff\1\21\1\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16\2\20\1\16\1\uffff\3\16\77\uffff\1\16",
            "\1\4\1\uffff\1\22\7\uffff\1\23\1\24\1\17\1\16\1\uffff\1\16\1\uffff\1\16\1\uffff\1\21\1\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16\2\20\1\16\1\uffff\3\16\77\uffff\1\16",
            "\1\4\1\uffff\1\22\7\uffff\1\23\1\24\1\17\1\16\1\uffff\1\16\1\uffff\1\16\1\uffff\1\21\1\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16\2\20\1\16\1\uffff\3\16\77\uffff\1\16",
            "\1\4\1\uffff\1\22\7\uffff\1\23\1\24\1\17\1\16\1\uffff\1\16\1\uffff\1\16\1\uffff\1\21\1\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16\2\20\1\16\1\uffff\3\16\77\uffff\1\16",
            "\1\4\1\uffff\1\22\7\uffff\1\23\1\24\1\17\1\16\1\uffff\1\16\1\uffff\1\16\1\uffff\1\21\1\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16\2\20\1\16\1\uffff\3\16\77\uffff\1\16",
            "\1\4\1\uffff\1\22\7\uffff\1\23\1\24\1\17\1\16\1\uffff\1\16\1\uffff\1\16\1\uffff\1\21\1\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16\2\20\1\16\1\uffff\3\16\77\uffff\1\16",
            "\1\4\1\uffff\1\22\7\uffff\1\23\1\24\1\17\1\16\1\uffff\1\16\1\uffff\1\16\1\uffff\1\21\1\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16\2\20\1\16\1\uffff\3\16\77\uffff\1\16",
            "\1\4\1\uffff\1\22\7\uffff\1\23\1\24\1\17\1\16\1\uffff\1\16\1\uffff\1\16\1\uffff\1\21\1\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16\2\20\1\16\1\uffff\3\16\77\uffff\1\16",
            "\1\4\1\uffff\1\22\7\uffff\1\23\1\24\1\17\1\16\1\uffff\1\16\1\uffff\1\16\1\uffff\1\21\1\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16\2\20\1\16\1\uffff\3\16\77\uffff\1\16",
            "\1\4\1\uffff\1\22\7\uffff\1\23\1\24\1\17\1\16\1\uffff\1\16\1\uffff\1\16\1\uffff\1\21\1\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16\2\20\1\16\1\uffff\3\16\77\uffff\1\16",
            "\1\4\1\uffff\1\22\7\uffff\1\23\1\24\1\17\1\16\1\uffff\1\16\1\uffff\1\16\1\uffff\1\21\1\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16\2\20\1\16\1\uffff\3\16\77\uffff\1\16",
            "\1\4\1\uffff\1\22\7\uffff\1\23\1\24\1\17\1\16\1\uffff\1\16\1\uffff\1\16\1\uffff\1\21\1\uffff\1\1\1\2\1\3\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16\2\20\1\16\1\uffff\3\16\77\uffff\1\16",
            "",
            "\1\16\10\uffff\1\27\7\uffff\1\16\20\uffff\1\26\1\uffff\1\30\1\31\1\32\21\uffff\1\16\55\uffff\1\25",
            "",
            "",
            "",
            "",
            "",
            "\3\16\5\uffff\1\33\5\16\1\uffff\3\16\1\uffff\1\16\1\uffff\21\16\1\uffff\3\16\17\uffff\1\16\57\uffff\1\16",
            "\3\16\5\uffff\1\33\5\16\1\uffff\3\16\1\uffff\1\16\1\uffff\21\16\1\uffff\3\16\17\uffff\1\16\57\uffff\1\16",
            "\3\16\5\uffff\1\33\5\16\1\uffff\3\16\1\uffff\1\16\1\uffff\21\16\1\uffff\3\16\17\uffff\1\16\57\uffff\1\16",
            "\3\16\5\uffff\1\33\5\16\1\uffff\3\16\1\uffff\1\16\1\uffff\21\16\1\uffff\3\16\17\uffff\1\16\57\uffff\1\16",
            "\3\16\5\uffff\1\33\5\16\1\uffff\3\16\1\uffff\1\16\1\uffff\21\16\1\uffff\3\16\17\uffff\1\16\57\uffff\1\16",
            "\3\16\5\uffff\1\33\5\16\1\uffff\3\16\1\uffff\1\16\1\uffff\21\16\1\uffff\3\16\17\uffff\1\16\57\uffff\1\16",
            ""
    };

    static final short[] dfa_20 = DFA.unpackEncodedString(dfa_20s);
    static final short[] dfa_21 = DFA.unpackEncodedString(dfa_21s);
    static final char[] dfa_22 = DFA.unpackEncodedStringToUnsignedChars(dfa_22s);
    static final char[] dfa_23 = DFA.unpackEncodedStringToUnsignedChars(dfa_23s);
    static final short[] dfa_24 = DFA.unpackEncodedString(dfa_24s);
    static final short[] dfa_25 = DFA.unpackEncodedString(dfa_25s);
    static final short[][] dfa_26 = unpackEncodedStringArray(dfa_26s);

    class DFA7 extends DFA {

        public DFA7(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 7;
            this.eot = dfa_20;
            this.eof = dfa_21;
            this.min = dfa_22;
            this.max = dfa_23;
            this.accept = dfa_24;
            this.special = dfa_25;
            this.transition = dfa_26;
        }
        public String getDescription() {
            return "3218:1: rule__Member__Alternatives_2 : ( ( ( rule__Member__Group_2_0__0 ) ) | ( ( rule__Member__Group_2_1__0 ) ) | ( ( rule__Member__Group_2_2__0 ) ) | ( ( rule__Member__Group_2_3__0 ) ) | ( ( rule__Member__Group_2_4__0 ) ) | ( ( rule__Member__Group_2_5__0 ) ) | ( ( rule__Member__Group_2_6__0 ) ) );";
        }
    }
    static final String dfa_27s = "\24\uffff";
    static final String dfa_28s = "\1\20\2\4\2\uffff\15\4\2\uffff";
    static final String dfa_29s = "\3\155\2\uffff\15\155\2\uffff";
    static final String dfa_30s = "\3\uffff\1\2\1\4\15\uffff\1\3\1\1";
    static final String dfa_31s = "\24\uffff}>";
    static final String[] dfa_32s = {
            "\2\4\1\uffff\1\4\1\uffff\1\3\17\uffff\1\1\1\2\2\uffff\1\4\1\uffff\3\4\77\uffff\1\4",
            "\1\10\13\uffff\2\23\1\uffff\1\23\1\uffff\1\22\3\uffff\1\5\1\6\1\7\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\4\uffff\1\23\1\uffff\3\23\77\uffff\1\23",
            "\1\10\13\uffff\2\23\1\uffff\1\23\1\uffff\1\22\3\uffff\1\5\1\6\1\7\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\4\uffff\1\23\1\uffff\3\23\77\uffff\1\23",
            "",
            "",
            "\1\10\13\uffff\2\23\1\uffff\1\23\1\uffff\1\22\3\uffff\1\5\1\6\1\7\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\4\uffff\1\23\1\uffff\3\23\77\uffff\1\23",
            "\1\10\13\uffff\2\23\1\uffff\1\23\1\uffff\1\22\3\uffff\1\5\1\6\1\7\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\4\uffff\1\23\1\uffff\3\23\77\uffff\1\23",
            "\1\10\13\uffff\2\23\1\uffff\1\23\1\uffff\1\22\3\uffff\1\5\1\6\1\7\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\4\uffff\1\23\1\uffff\3\23\77\uffff\1\23",
            "\1\10\13\uffff\2\23\1\uffff\1\23\1\uffff\1\22\3\uffff\1\5\1\6\1\7\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\4\uffff\1\23\1\uffff\3\23\77\uffff\1\23",
            "\1\10\13\uffff\2\23\1\uffff\1\23\1\uffff\1\22\3\uffff\1\5\1\6\1\7\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\4\uffff\1\23\1\uffff\3\23\77\uffff\1\23",
            "\1\10\13\uffff\2\23\1\uffff\1\23\1\uffff\1\22\3\uffff\1\5\1\6\1\7\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\4\uffff\1\23\1\uffff\3\23\77\uffff\1\23",
            "\1\10\13\uffff\2\23\1\uffff\1\23\1\uffff\1\22\3\uffff\1\5\1\6\1\7\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\4\uffff\1\23\1\uffff\3\23\77\uffff\1\23",
            "\1\10\13\uffff\2\23\1\uffff\1\23\1\uffff\1\22\3\uffff\1\5\1\6\1\7\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\4\uffff\1\23\1\uffff\3\23\77\uffff\1\23",
            "\1\10\13\uffff\2\23\1\uffff\1\23\1\uffff\1\22\3\uffff\1\5\1\6\1\7\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\4\uffff\1\23\1\uffff\3\23\77\uffff\1\23",
            "\1\10\13\uffff\2\23\1\uffff\1\23\1\uffff\1\22\3\uffff\1\5\1\6\1\7\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\4\uffff\1\23\1\uffff\3\23\77\uffff\1\23",
            "\1\10\13\uffff\2\23\1\uffff\1\23\1\uffff\1\22\3\uffff\1\5\1\6\1\7\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\4\uffff\1\23\1\uffff\3\23\77\uffff\1\23",
            "\1\10\13\uffff\2\23\1\uffff\1\23\1\uffff\1\22\3\uffff\1\5\1\6\1\7\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\4\uffff\1\23\1\uffff\3\23\77\uffff\1\23",
            "\1\10\13\uffff\2\23\1\uffff\1\23\1\uffff\1\22\3\uffff\1\5\1\6\1\7\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\4\uffff\1\23\1\uffff\3\23\77\uffff\1\23",
            "",
            ""
    };

    static final short[] dfa_27 = DFA.unpackEncodedString(dfa_27s);
    static final char[] dfa_28 = DFA.unpackEncodedStringToUnsignedChars(dfa_28s);
    static final char[] dfa_29 = DFA.unpackEncodedStringToUnsignedChars(dfa_29s);
    static final short[] dfa_30 = DFA.unpackEncodedString(dfa_30s);
    static final short[] dfa_31 = DFA.unpackEncodedString(dfa_31s);
    static final short[][] dfa_32 = unpackEncodedStringArray(dfa_32s);

    class DFA8 extends DFA {

        public DFA8(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = dfa_27;
            this.eof = dfa_27;
            this.min = dfa_28;
            this.max = dfa_29;
            this.accept = dfa_30;
            this.special = dfa_31;
            this.transition = dfa_32;
        }
        public String getDescription() {
            return "3269:1: rule__Member__Alternatives_2_0_2 : ( ( ( rule__Member__Group_2_0_2_0__0 ) ) | ( ( rule__Member__Group_2_0_2_1__0 ) ) | ( ( rule__Member__Group_2_0_2_2__0 ) ) | ( ( rule__Member__Group_2_0_2_3__0 ) ) );";
        }
    }
    static final String dfa_33s = "\51\uffff";
    static final String dfa_34s = "\1\7\10\0\40\uffff";
    static final String dfa_35s = "\1\155\10\0\40\uffff";
    static final String dfa_36s = "\11\uffff\1\5\33\uffff\1\1\1\2\1\3\1\4";
    static final String dfa_37s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\40\uffff}>";
    static final String[] dfa_38s = {
            "\1\11\1\uffff\1\11\6\uffff\1\3\1\7\1\uffff\1\10\25\uffff\1\2\1\uffff\1\4\1\5\1\6\23\uffff\14\11\1\uffff\14\11\1\uffff\2\11\20\uffff\1\1",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_33 = DFA.unpackEncodedString(dfa_33s);
    static final char[] dfa_34 = DFA.unpackEncodedStringToUnsignedChars(dfa_34s);
    static final char[] dfa_35 = DFA.unpackEncodedStringToUnsignedChars(dfa_35s);
    static final short[] dfa_36 = DFA.unpackEncodedString(dfa_36s);
    static final short[] dfa_37 = DFA.unpackEncodedString(dfa_37s);
    static final short[][] dfa_38 = unpackEncodedStringArray(dfa_38s);

    class DFA11 extends DFA {

        public DFA11(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 11;
            this.eot = dfa_33;
            this.eof = dfa_33;
            this.min = dfa_34;
            this.max = dfa_35;
            this.accept = dfa_36;
            this.special = dfa_37;
            this.transition = dfa_38;
        }
        public String getDescription() {
            return "3344:1: rule__Member__Alternatives_2_1_5 : ( ( ( rule__Member__Group_2_1_5_0__0 ) ) | ( ( rule__Member__Group_2_1_5_1__0 ) ) | ( ( rule__Member__Group_2_1_5_2__0 ) ) | ( ( rule__Member__Group_2_1_5_3__0 ) ) | ( ( rule__Member__Group_2_1_5_4__0 ) ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA11_1 = input.LA(1);

                         
                        int index11_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred23_InternalXtend()) ) {s = 37;}

                        else if ( (synpred24_InternalXtend()) ) {s = 38;}

                        else if ( (synpred25_InternalXtend()) ) {s = 39;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index11_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA11_2 = input.LA(1);

                         
                        int index11_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred23_InternalXtend()) ) {s = 37;}

                        else if ( (synpred24_InternalXtend()) ) {s = 38;}

                        else if ( (synpred25_InternalXtend()) ) {s = 39;}

                        else if ( (synpred26_InternalXtend()) ) {s = 40;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index11_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA11_3 = input.LA(1);

                         
                        int index11_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred23_InternalXtend()) ) {s = 37;}

                        else if ( (synpred24_InternalXtend()) ) {s = 38;}

                        else if ( (synpred25_InternalXtend()) ) {s = 39;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index11_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA11_4 = input.LA(1);

                         
                        int index11_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred23_InternalXtend()) ) {s = 37;}

                        else if ( (synpred24_InternalXtend()) ) {s = 38;}

                        else if ( (synpred25_InternalXtend()) ) {s = 39;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index11_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA11_5 = input.LA(1);

                         
                        int index11_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred23_InternalXtend()) ) {s = 37;}

                        else if ( (synpred24_InternalXtend()) ) {s = 38;}

                        else if ( (synpred25_InternalXtend()) ) {s = 39;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index11_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA11_6 = input.LA(1);

                         
                        int index11_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred23_InternalXtend()) ) {s = 37;}

                        else if ( (synpred24_InternalXtend()) ) {s = 38;}

                        else if ( (synpred25_InternalXtend()) ) {s = 39;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index11_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA11_7 = input.LA(1);

                         
                        int index11_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred23_InternalXtend()) ) {s = 37;}

                        else if ( (synpred24_InternalXtend()) ) {s = 38;}

                         
                        input.seek(index11_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA11_8 = input.LA(1);

                         
                        int index11_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred23_InternalXtend()) ) {s = 37;}

                        else if ( (synpred24_InternalXtend()) ) {s = 38;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index11_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 11, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_39s = "\21\uffff";
    static final String dfa_40s = "\1\20\6\7\1\uffff\1\20\2\uffff\6\7";
    static final String dfa_41s = "\1\155\6\77\1\uffff\1\155\2\uffff\6\77";
    static final String dfa_42s = "\7\uffff\1\3\1\uffff\1\2\1\1\6\uffff";
    static final String dfa_43s = "\21\uffff}>";
    static final String[] dfa_44s = {
            "\1\3\1\7\1\uffff\1\7\25\uffff\1\2\1\uffff\1\4\1\5\1\6\77\uffff\1\1",
            "\1\12\20\uffff\1\10\46\uffff\1\11",
            "\1\12\20\uffff\1\10\46\uffff\1\11",
            "\1\12\20\uffff\1\10\46\uffff\1\11",
            "\1\12\20\uffff\1\10\46\uffff\1\11",
            "\1\12\20\uffff\1\10\46\uffff\1\11",
            "\1\12\20\uffff\1\10\46\uffff\1\11",
            "",
            "\1\15\30\uffff\1\14\1\uffff\1\16\1\17\1\20\77\uffff\1\13",
            "",
            "",
            "\1\12\20\uffff\1\10\46\uffff\1\11",
            "\1\12\20\uffff\1\10\46\uffff\1\11",
            "\1\12\20\uffff\1\10\46\uffff\1\11",
            "\1\12\20\uffff\1\10\46\uffff\1\11",
            "\1\12\20\uffff\1\10\46\uffff\1\11",
            "\1\12\20\uffff\1\10\46\uffff\1\11"
    };

    static final short[] dfa_39 = DFA.unpackEncodedString(dfa_39s);
    static final char[] dfa_40 = DFA.unpackEncodedStringToUnsignedChars(dfa_40s);
    static final char[] dfa_41 = DFA.unpackEncodedStringToUnsignedChars(dfa_41s);
    static final short[] dfa_42 = DFA.unpackEncodedString(dfa_42s);
    static final short[] dfa_43 = DFA.unpackEncodedString(dfa_43s);
    static final short[][] dfa_44 = unpackEncodedStringArray(dfa_44s);

    class DFA13 extends DFA {

        public DFA13(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 13;
            this.eot = dfa_39;
            this.eof = dfa_39;
            this.min = dfa_40;
            this.max = dfa_41;
            this.accept = dfa_42;
            this.special = dfa_43;
            this.transition = dfa_44;
        }
        public String getDescription() {
            return "3410:1: rule__TypeReferenceWithTypeArgs__Alternatives : ( ( ( rule__TypeReferenceWithTypeArgs__Group_0__0 ) ) | ( ( rule__TypeReferenceWithTypeArgs__Group_1__0 ) ) | ( ruleXFunctionTypeRef ) );";
        }
    }
    static final String dfa_45s = "\16\uffff";
    static final String dfa_46s = "\2\uffff\2\7\10\uffff\2\10";
    static final String dfa_47s = "\1\7\1\uffff\1\7\1\11\10\uffff\1\7\1\11";
    static final String dfa_48s = "\1\134\1\uffff\1\24\1\120\10\uffff\1\24\1\106";
    static final String dfa_49s = "\1\uffff\1\1\2\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\2\uffff";
    static final String dfa_50s = "\16\uffff}>";
    static final String[] dfa_51s = {
            "\1\2\1\uffff\1\3\11\uffff\1\10\55\uffff\5\1\1\7\1\4\1\5\4\6\1\uffff\5\10\2\12\4\11\1\12\1\uffff\2\13",
            "",
            "\1\14\11\uffff\1\7\1\uffff\1\10\1\7",
            "\1\15\7\uffff\1\7\64\uffff\1\1\11\uffff\1\10",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\10\11\uffff\1\10\2\uffff\1\1",
            "\1\10\7\uffff\1\10\64\uffff\1\1"
    };

    static final short[] dfa_45 = DFA.unpackEncodedString(dfa_45s);
    static final short[] dfa_46 = DFA.unpackEncodedString(dfa_46s);
    static final char[] dfa_47 = DFA.unpackEncodedStringToUnsignedChars(dfa_47s);
    static final char[] dfa_48 = DFA.unpackEncodedStringToUnsignedChars(dfa_48s);
    static final short[] dfa_49 = DFA.unpackEncodedString(dfa_49s);
    static final short[] dfa_50 = DFA.unpackEncodedString(dfa_50s);
    static final short[][] dfa_51 = unpackEncodedStringArray(dfa_51s);

    class DFA15 extends DFA {

        public DFA15(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 15;
            this.eot = dfa_45;
            this.eof = dfa_46;
            this.min = dfa_47;
            this.max = dfa_48;
            this.accept = dfa_49;
            this.special = dfa_50;
            this.transition = dfa_51;
        }
        public String getDescription() {
            return "3458:1: rule__Operators__Alternatives : ( ( ruleOpMultiAssign ) | ( ruleOpOr ) | ( ruleOpAnd ) | ( ruleOpEquality ) | ( ruleOpCompare ) | ( ruleOpOther ) | ( ruleOpMulti ) | ( ruleOpUnary ) | ( ruleOpPostfix ) );";
        }
    }
    static final String dfa_52s = "\40\uffff";
    static final String dfa_53s = "\1\uffff\35\36\2\uffff";
    static final String dfa_54s = "\36\4\2\uffff";
    static final String dfa_55s = "\1\163\35\167\2\uffff";
    static final String dfa_56s = "\36\uffff\1\2\1\1";
    static final String dfa_57s = "\40\uffff}>";
    static final String[] dfa_58s = {
            "\1\17\1\uffff\1\4\1\36\2\uffff\1\11\1\13\1\36\1\uffff\1\15\1\10\1\3\1\36\3\uffff\1\35\1\24\1\36\1\uffff\1\20\1\21\1\22\1\2\1\23\1\7\1\12\1\25\1\26\1\27\1\30\1\31\2\uffff\1\6\1\16\1\5\1\uffff\1\32\1\33\1\34\1\14\2\uffff\1\36\2\uffff\1\36\11\uffff\2\36\23\uffff\2\36\4\uffff\1\36\5\uffff\1\36\1\uffff\12\36\2\uffff\1\1\6\36",
            "\20\36\1\37\32\36\1\uffff\3\36\1\uffff\3\36\6\uffff\57\36\1\uffff\13\36",
            "\20\36\1\37\32\36\1\uffff\3\36\1\uffff\3\36\6\uffff\57\36\1\uffff\13\36",
            "\20\36\1\37\32\36\1\uffff\3\36\1\uffff\3\36\6\uffff\57\36\1\uffff\13\36",
            "\20\36\1\37\32\36\1\uffff\3\36\1\uffff\3\36\6\uffff\57\36\1\uffff\13\36",
            "\20\36\1\37\32\36\1\uffff\3\36\1\uffff\3\36\6\uffff\57\36\1\uffff\13\36",
            "\20\36\1\37\32\36\1\uffff\3\36\1\uffff\3\36\6\uffff\57\36\1\uffff\13\36",
            "\20\36\1\37\32\36\1\uffff\3\36\1\uffff\3\36\6\uffff\57\36\1\uffff\13\36",
            "\20\36\1\37\32\36\1\uffff\3\36\1\uffff\3\36\6\uffff\57\36\1\uffff\13\36",
            "\20\36\1\37\32\36\1\uffff\3\36\1\uffff\3\36\6\uffff\57\36\1\uffff\13\36",
            "\20\36\1\37\32\36\1\uffff\3\36\1\uffff\3\36\6\uffff\57\36\1\uffff\13\36",
            "\20\36\1\37\32\36\1\uffff\3\36\1\uffff\3\36\6\uffff\57\36\1\uffff\13\36",
            "\20\36\1\37\32\36\1\uffff\3\36\1\uffff\3\36\6\uffff\57\36\1\uffff\13\36",
            "\20\36\1\37\32\36\1\uffff\3\36\1\uffff\3\36\6\uffff\57\36\1\uffff\13\36",
            "\20\36\1\37\32\36\1\uffff\3\36\1\uffff\3\36\6\uffff\57\36\1\uffff\13\36",
            "\20\36\1\37\32\36\1\uffff\3\36\1\uffff\3\36\6\uffff\57\36\1\uffff\13\36",
            "\20\36\1\37\32\36\1\uffff\3\36\1\uffff\3\36\6\uffff\57\36\1\uffff\13\36",
            "\20\36\1\37\32\36\1\uffff\3\36\1\uffff\3\36\6\uffff\57\36\1\uffff\13\36",
            "\20\36\1\37\32\36\1\uffff\3\36\1\uffff\3\36\6\uffff\57\36\1\uffff\13\36",
            "\20\36\1\37\32\36\1\uffff\3\36\1\uffff\3\36\6\uffff\57\36\1\uffff\13\36",
            "\20\36\1\37\32\36\1\uffff\3\36\1\uffff\3\36\6\uffff\57\36\1\uffff\13\36",
            "\20\36\1\37\32\36\1\uffff\3\36\1\uffff\3\36\6\uffff\57\36\1\uffff\13\36",
            "\20\36\1\37\32\36\1\uffff\3\36\1\uffff\3\36\6\uffff\57\36\1\uffff\13\36",
            "\20\36\1\37\32\36\1\uffff\3\36\1\uffff\3\36\6\uffff\57\36\1\uffff\13\36",
            "\20\36\1\37\32\36\1\uffff\3\36\1\uffff\3\36\6\uffff\57\36\1\uffff\13\36",
            "\20\36\1\37\32\36\1\uffff\3\36\1\uffff\3\36\6\uffff\57\36\1\uffff\13\36",
            "\20\36\1\37\32\36\1\uffff\3\36\1\uffff\3\36\6\uffff\57\36\1\uffff\13\36",
            "\20\36\1\37\32\36\1\uffff\3\36\1\uffff\3\36\6\uffff\57\36\1\uffff\13\36",
            "\20\36\1\37\32\36\1\uffff\3\36\1\uffff\3\36\6\uffff\57\36\1\uffff\13\36",
            "\20\36\1\37\32\36\1\uffff\3\36\1\uffff\3\36\6\uffff\57\36\1\uffff\13\36",
            "",
            ""
    };

    static final short[] dfa_52 = DFA.unpackEncodedString(dfa_52s);
    static final short[] dfa_53 = DFA.unpackEncodedString(dfa_53s);
    static final char[] dfa_54 = DFA.unpackEncodedStringToUnsignedChars(dfa_54s);
    static final char[] dfa_55 = DFA.unpackEncodedStringToUnsignedChars(dfa_55s);
    static final short[] dfa_56 = DFA.unpackEncodedString(dfa_56s);
    static final short[] dfa_57 = DFA.unpackEncodedString(dfa_57s);
    static final short[][] dfa_58 = unpackEncodedStringArray(dfa_58s);

    class DFA22 extends DFA {

        public DFA22(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 22;
            this.eot = dfa_52;
            this.eof = dfa_53;
            this.min = dfa_54;
            this.max = dfa_55;
            this.accept = dfa_56;
            this.special = dfa_57;
            this.transition = dfa_58;
        }
        public String getDescription() {
            return "3893:1: rule__XAssignment__Alternatives : ( ( ( rule__XAssignment__Group_0__0 ) ) | ( ( rule__XAssignment__Group_1__0 ) ) );";
        }
    }
    static final String dfa_59s = "\37\uffff";
    static final String dfa_60s = "\1\4\6\0\30\uffff";
    static final String dfa_61s = "\1\155\6\0\30\uffff";
    static final String dfa_62s = "\7\uffff\1\1\1\uffff\1\2\25\uffff";
    static final String dfa_63s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\30\uffff}>";
    static final String[] dfa_64s = {
            "\1\11\1\uffff\1\11\3\uffff\2\11\2\uffff\2\11\1\3\1\7\1\uffff\1\7\2\uffff\1\11\2\uffff\14\11\2\uffff\2\11\1\2\1\uffff\1\4\1\5\1\6\1\11\76\uffff\1\1",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_59 = DFA.unpackEncodedString(dfa_59s);
    static final char[] dfa_60 = DFA.unpackEncodedStringToUnsignedChars(dfa_60s);
    static final char[] dfa_61 = DFA.unpackEncodedStringToUnsignedChars(dfa_61s);
    static final short[] dfa_62 = DFA.unpackEncodedString(dfa_62s);
    static final short[] dfa_63 = DFA.unpackEncodedString(dfa_63s);
    static final short[][] dfa_64 = unpackEncodedStringArray(dfa_64s);

    class DFA26 extends DFA {

        public DFA26(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 26;
            this.eot = dfa_59;
            this.eof = dfa_59;
            this.min = dfa_60;
            this.max = dfa_61;
            this.accept = dfa_62;
            this.special = dfa_63;
            this.transition = dfa_64;
        }
        public String getDescription() {
            return "3977:1: rule__XVariableDeclaration__Alternatives_1 : ( ( ( rule__XVariableDeclaration__Group_1_0__0 ) ) | ( ( rule__XVariableDeclaration__NameAssignment_1_1 ) ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA26_1 = input.LA(1);

                         
                        int index26_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_InternalXtend()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA26_2 = input.LA(1);

                         
                        int index26_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_InternalXtend()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA26_3 = input.LA(1);

                         
                        int index26_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_InternalXtend()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA26_4 = input.LA(1);

                         
                        int index26_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_InternalXtend()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA26_5 = input.LA(1);

                         
                        int index26_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_InternalXtend()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA26_6 = input.LA(1);

                         
                        int index26_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_InternalXtend()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index26_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 26, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_65s = "\74\uffff";
    static final String dfa_66s = "\1\4\10\0\1\uffff\26\0\34\uffff";
    static final String dfa_67s = "\1\163\10\0\1\uffff\26\0\34\uffff";
    static final String dfa_68s = "\11\uffff\1\1\27\uffff\1\2\32\uffff";
    static final String dfa_69s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\uffff\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\34\uffff}>";
    static final String[] dfa_70s = {
            "\1\25\1\uffff\1\13\1\41\2\uffff\1\17\1\21\1\41\1\uffff\1\23\1\16\1\4\1\10\1\uffff\1\11\1\uffff\1\1\1\32\1\41\1\uffff\1\26\1\27\1\30\1\12\1\31\1\15\1\20\1\33\1\34\1\35\1\36\1\37\2\uffff\1\14\1\24\1\3\1\uffff\1\5\1\6\1\7\1\22\2\uffff\1\41\1\uffff\1\11\1\41\11\uffff\2\41\23\uffff\2\41\4\uffff\1\41\5\uffff\1\41\1\uffff\12\41\2\uffff\1\2\6\41",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_65 = DFA.unpackEncodedString(dfa_65s);
    static final char[] dfa_66 = DFA.unpackEncodedStringToUnsignedChars(dfa_66s);
    static final char[] dfa_67 = DFA.unpackEncodedStringToUnsignedChars(dfa_67s);
    static final short[] dfa_68 = DFA.unpackEncodedString(dfa_68s);
    static final short[] dfa_69 = DFA.unpackEncodedString(dfa_69s);
    static final short[][] dfa_70 = unpackEncodedStringArray(dfa_70s);

    class DFA31 extends DFA {

        public DFA31(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 31;
            this.eot = dfa_65;
            this.eof = dfa_65;
            this.min = dfa_66;
            this.max = dfa_67;
            this.accept = dfa_68;
            this.special = dfa_69;
            this.transition = dfa_70;
        }
        public String getDescription() {
            return "4082:1: rule__XbaseConstructorCall__Alternatives_4_1 : ( ( ( rule__XbaseConstructorCall__ArgumentsAssignment_4_1_0 ) ) | ( ( rule__XbaseConstructorCall__Group_4_1_1__0 ) ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA31_1 = input.LA(1);

                         
                        int index31_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index31_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA31_2 = input.LA(1);

                         
                        int index31_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index31_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA31_3 = input.LA(1);

                         
                        int index31_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index31_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA31_4 = input.LA(1);

                         
                        int index31_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index31_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA31_5 = input.LA(1);

                         
                        int index31_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index31_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA31_6 = input.LA(1);

                         
                        int index31_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index31_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA31_7 = input.LA(1);

                         
                        int index31_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index31_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA31_8 = input.LA(1);

                         
                        int index31_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index31_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA31_10 = input.LA(1);

                         
                        int index31_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index31_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA31_11 = input.LA(1);

                         
                        int index31_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index31_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA31_12 = input.LA(1);

                         
                        int index31_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index31_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA31_13 = input.LA(1);

                         
                        int index31_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index31_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA31_14 = input.LA(1);

                         
                        int index31_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index31_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA31_15 = input.LA(1);

                         
                        int index31_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index31_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA31_16 = input.LA(1);

                         
                        int index31_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index31_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA31_17 = input.LA(1);

                         
                        int index31_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index31_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA31_18 = input.LA(1);

                         
                        int index31_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index31_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA31_19 = input.LA(1);

                         
                        int index31_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index31_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA31_20 = input.LA(1);

                         
                        int index31_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index31_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA31_21 = input.LA(1);

                         
                        int index31_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index31_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA31_22 = input.LA(1);

                         
                        int index31_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index31_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA31_23 = input.LA(1);

                         
                        int index31_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index31_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA31_24 = input.LA(1);

                         
                        int index31_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index31_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA31_25 = input.LA(1);

                         
                        int index31_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index31_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA31_26 = input.LA(1);

                         
                        int index31_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index31_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA31_27 = input.LA(1);

                         
                        int index31_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index31_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA31_28 = input.LA(1);

                         
                        int index31_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index31_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA31_29 = input.LA(1);

                         
                        int index31_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index31_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA31_30 = input.LA(1);

                         
                        int index31_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index31_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA31_31 = input.LA(1);

                         
                        int index31_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index31_31);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 31, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_71s = "\1\4\1\0\72\uffff";
    static final String dfa_72s = "\1\163\1\0\72\uffff";
    static final String dfa_73s = "\2\uffff\1\2\70\uffff\1\1";
    static final String dfa_74s = "\1\uffff\1\0\72\uffff}>";
    static final String[] dfa_75s = {
            "\1\2\1\uffff\2\2\2\uffff\3\2\1\uffff\3\2\1\1\1\uffff\1\2\1\uffff\3\2\1\uffff\14\2\2\uffff\3\2\1\uffff\4\2\2\uffff\1\2\2\uffff\1\2\11\uffff\2\2\23\uffff\2\2\4\uffff\1\2\5\uffff\1\2\1\uffff\12\2\2\uffff\7\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_71 = DFA.unpackEncodedStringToUnsignedChars(dfa_71s);
    static final char[] dfa_72 = DFA.unpackEncodedStringToUnsignedChars(dfa_72s);
    static final short[] dfa_73 = DFA.unpackEncodedString(dfa_73s);
    static final short[] dfa_74 = DFA.unpackEncodedString(dfa_74s);
    static final short[][] dfa_75 = unpackEncodedStringArray(dfa_75s);

    class DFA33 extends DFA {

        public DFA33(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 33;
            this.eot = dfa_65;
            this.eof = dfa_65;
            this.min = dfa_71;
            this.max = dfa_72;
            this.accept = dfa_73;
            this.special = dfa_74;
            this.transition = dfa_75;
        }
        public String getDescription() {
            return "4124:1: rule__XSwitchExpression__Alternatives_2 : ( ( ( rule__XSwitchExpression__Group_2_0__0 ) ) | ( ( rule__XSwitchExpression__Group_2_1__0 ) ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA33_1 = input.LA(1);

                         
                        int index33_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_InternalXtend()) ) {s = 59;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index33_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 33, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_76s = "\12\uffff";
    static final String dfa_77s = "\1\4\1\20\1\uffff\6\0\1\uffff";
    static final String dfa_78s = "\1\163\1\155\1\uffff\6\0\1\uffff";
    static final String dfa_79s = "\2\uffff\1\2\6\uffff\1\1";
    static final String dfa_80s = "\3\uffff\1\2\1\4\1\5\1\0\1\3\1\1\1\uffff}>";
    static final String[] dfa_81s = {
            "\1\2\1\uffff\2\2\2\uffff\3\2\1\uffff\4\2\3\uffff\2\2\1\1\1\uffff\14\2\2\uffff\3\2\1\uffff\4\2\2\uffff\1\2\2\uffff\1\2\11\uffff\2\2\23\uffff\2\2\4\uffff\1\2\5\uffff\1\2\1\uffff\12\2\2\uffff\7\2",
            "\1\5\30\uffff\1\4\1\uffff\1\6\1\7\1\10\77\uffff\1\3",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] dfa_76 = DFA.unpackEncodedString(dfa_76s);
    static final char[] dfa_77 = DFA.unpackEncodedStringToUnsignedChars(dfa_77s);
    static final char[] dfa_78 = DFA.unpackEncodedStringToUnsignedChars(dfa_78s);
    static final short[] dfa_79 = DFA.unpackEncodedString(dfa_79s);
    static final short[] dfa_80 = DFA.unpackEncodedString(dfa_80s);
    static final short[][] dfa_81 = unpackEncodedStringArray(dfa_81s);

    class DFA35 extends DFA {

        public DFA35(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 35;
            this.eot = dfa_76;
            this.eof = dfa_76;
            this.min = dfa_77;
            this.max = dfa_78;
            this.accept = dfa_79;
            this.special = dfa_80;
            this.transition = dfa_81;
        }
        public String getDescription() {
            return "4166:1: rule__XExpressionOrSimpleConstructorCall__Alternatives : ( ( ( ruleXbaseConstructorCall ) ) | ( ruleXExpression ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA35_6 = input.LA(1);

                         
                        int index35_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index35_6);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA35_8 = input.LA(1);

                         
                        int index35_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index35_8);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA35_3 = input.LA(1);

                         
                        int index35_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index35_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA35_7 = input.LA(1);

                         
                        int index35_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index35_7);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA35_4 = input.LA(1);

                         
                        int index35_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index35_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA35_5 = input.LA(1);

                         
                        int index35_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index35_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 35, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_82s = "\1\4\6\0\65\uffff";
    static final String dfa_83s = "\1\163\6\0\65\uffff";
    static final String dfa_84s = "\7\uffff\1\2\63\uffff\1\1";
    static final String dfa_85s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\65\uffff}>";
    static final String[] dfa_86s = {
            "\1\7\1\uffff\2\7\2\uffff\3\7\1\uffff\2\7\1\3\1\7\3\uffff\3\7\1\uffff\14\7\2\uffff\2\7\1\2\1\uffff\1\4\1\5\1\6\1\7\2\uffff\1\7\2\uffff\1\7\10\uffff\3\7\23\uffff\2\7\4\uffff\1\7\5\uffff\1\7\1\uffff\12\7\2\uffff\1\1\6\7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_82 = DFA.unpackEncodedStringToUnsignedChars(dfa_82s);
    static final char[] dfa_83 = DFA.unpackEncodedStringToUnsignedChars(dfa_83s);
    static final short[] dfa_84 = DFA.unpackEncodedString(dfa_84s);
    static final short[] dfa_85 = DFA.unpackEncodedString(dfa_85s);
    static final short[][] dfa_86 = unpackEncodedStringArray(dfa_86s);

    class DFA40 extends DFA {

        public DFA40(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 40;
            this.eot = dfa_65;
            this.eof = dfa_65;
            this.min = dfa_82;
            this.max = dfa_83;
            this.accept = dfa_84;
            this.special = dfa_85;
            this.transition = dfa_86;
        }
        public String getDescription() {
            return "4277:1: rule__XAnnotation__Alternatives_3_1 : ( ( ( rule__XAnnotation__Group_3_1_0__0 ) ) | ( ( rule__XAnnotation__ValueAssignment_3_1_1 ) ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA40_1 = input.LA(1);

                         
                        int index40_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_InternalXtend()) ) {s = 59;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index40_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA40_2 = input.LA(1);

                         
                        int index40_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_InternalXtend()) ) {s = 59;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index40_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA40_3 = input.LA(1);

                         
                        int index40_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_InternalXtend()) ) {s = 59;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index40_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA40_4 = input.LA(1);

                         
                        int index40_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_InternalXtend()) ) {s = 59;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index40_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA40_5 = input.LA(1);

                         
                        int index40_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_InternalXtend()) ) {s = 59;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index40_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA40_6 = input.LA(1);

                         
                        int index40_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_InternalXtend()) ) {s = 59;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index40_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 40, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_87s = {
            "\1\2\1\uffff\2\2\2\uffff\3\2\1\uffff\4\2\3\uffff\3\2\1\uffff\14\2\2\uffff\3\2\1\uffff\4\2\2\uffff\1\2\2\uffff\1\2\10\uffff\1\2\1\1\1\2\23\uffff\2\2\4\uffff\1\2\5\uffff\1\2\1\uffff\12\2\2\uffff\7\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_87 = unpackEncodedStringArray(dfa_87s);

    class DFA41 extends DFA {

        public DFA41(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 41;
            this.eot = dfa_65;
            this.eof = dfa_65;
            this.min = dfa_71;
            this.max = dfa_72;
            this.accept = dfa_73;
            this.special = dfa_74;
            this.transition = dfa_87;
        }
        public String getDescription() {
            return "4298:1: rule__XAnnotationElementValueOrCommaList__Alternatives : ( ( ( rule__XAnnotationElementValueOrCommaList__Group_0__0 ) ) | ( ( rule__XAnnotationElementValueOrCommaList__Group_1__0 ) ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA41_1 = input.LA(1);

                         
                        int index41_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred107_InternalXtend()) ) {s = 59;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 41, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA42 extends DFA {

        public DFA42(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 42;
            this.eot = dfa_65;
            this.eof = dfa_65;
            this.min = dfa_71;
            this.max = dfa_72;
            this.accept = dfa_73;
            this.special = dfa_74;
            this.transition = dfa_87;
        }
        public String getDescription() {
            return "4319:1: rule__XAnnotationElementValue__Alternatives : ( ( ( rule__XAnnotationElementValue__Group_0__0 ) ) | ( ruleXAnnotationOrExpression ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA42_1 = input.LA(1);

                         
                        int index42_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_InternalXtend()) ) {s = 59;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 42, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_88s = "\13\uffff";
    static final String dfa_89s = "\1\7\2\uffff\1\11\7\uffff";
    static final String dfa_90s = "\1\122\2\uffff\1\120\7\uffff";
    static final String dfa_91s = "\1\uffff\1\1\1\2\1\uffff\1\4\1\5\1\7\1\10\1\11\1\6\1\3";
    static final String dfa_92s = "\13\uffff}>";
    static final String[] dfa_93s = {
            "\1\6\1\uffff\1\3\11\uffff\1\5\72\uffff\1\1\1\2\1\4\1\7\1\10",
            "",
            "",
            "\1\11\106\uffff\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_88 = DFA.unpackEncodedString(dfa_88s);
    static final char[] dfa_89 = DFA.unpackEncodedStringToUnsignedChars(dfa_89s);
    static final char[] dfa_90 = DFA.unpackEncodedStringToUnsignedChars(dfa_90s);
    static final short[] dfa_91 = DFA.unpackEncodedString(dfa_91s);
    static final short[] dfa_92 = DFA.unpackEncodedString(dfa_92s);
    static final short[][] dfa_93 = unpackEncodedStringArray(dfa_93s);

    class DFA48 extends DFA {

        public DFA48(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 48;
            this.eot = dfa_88;
            this.eof = dfa_88;
            this.min = dfa_89;
            this.max = dfa_90;
            this.accept = dfa_91;
            this.special = dfa_92;
            this.transition = dfa_93;
        }
        public String getDescription() {
            return "4499:1: rule__OpOther__Alternatives : ( ( '->' ) | ( '..<' ) | ( ( rule__OpOther__Group_2__0 ) ) | ( '..' ) | ( '=>' ) | ( ( rule__OpOther__Group_5__0 ) ) | ( ( rule__OpOther__Group_6__0 ) ) | ( '<>' ) | ( '?:' ) );";
        }
    }
    static final String dfa_94s = "\42\uffff";
    static final String dfa_95s = "\4\uffff\35\3\1\uffff";
    static final String dfa_96s = "\1\30\2\4\1\uffff\35\4\1\uffff";
    static final String dfa_97s = "\1\136\2\155\1\uffff\35\167\1\uffff";
    static final String dfa_98s = "\3\uffff\1\2\35\uffff\1\1";
    static final String dfa_99s = "\42\uffff}>";
    static final String[] dfa_100s = {
            "\1\1\104\uffff\1\2\1\3",
            "\1\22\1\uffff\1\7\1\3\2\uffff\1\14\1\16\2\uffff\1\20\1\13\1\6\4\uffff\1\40\1\27\2\uffff\1\23\1\24\1\25\1\5\1\26\1\12\1\15\1\30\1\31\1\32\1\33\1\34\2\uffff\1\11\1\21\1\10\1\uffff\1\35\1\36\1\37\1\17\65\uffff\1\3\10\uffff\1\4",
            "\1\22\1\uffff\1\7\1\3\2\uffff\1\14\1\16\2\uffff\1\20\1\13\1\6\4\uffff\1\40\1\27\2\uffff\1\23\1\24\1\25\1\5\1\26\1\12\1\15\1\30\1\31\1\32\1\33\1\34\2\uffff\1\11\1\21\1\10\1\uffff\1\35\1\36\1\37\1\17\65\uffff\1\3\10\uffff\1\4",
            "",
            "\20\3\1\41\32\3\1\uffff\3\3\1\uffff\3\3\6\uffff\57\3\1\uffff\13\3",
            "\20\3\1\41\32\3\1\uffff\3\3\1\uffff\3\3\6\uffff\57\3\1\uffff\13\3",
            "\20\3\1\41\32\3\1\uffff\3\3\1\uffff\3\3\6\uffff\57\3\1\uffff\13\3",
            "\20\3\1\41\32\3\1\uffff\3\3\1\uffff\3\3\6\uffff\57\3\1\uffff\13\3",
            "\20\3\1\41\32\3\1\uffff\3\3\1\uffff\3\3\6\uffff\57\3\1\uffff\13\3",
            "\20\3\1\41\32\3\1\uffff\3\3\1\uffff\3\3\6\uffff\57\3\1\uffff\13\3",
            "\20\3\1\41\32\3\1\uffff\3\3\1\uffff\3\3\6\uffff\57\3\1\uffff\13\3",
            "\20\3\1\41\32\3\1\uffff\3\3\1\uffff\3\3\6\uffff\57\3\1\uffff\13\3",
            "\20\3\1\41\32\3\1\uffff\3\3\1\uffff\3\3\6\uffff\57\3\1\uffff\13\3",
            "\20\3\1\41\32\3\1\uffff\3\3\1\uffff\3\3\6\uffff\57\3\1\uffff\13\3",
            "\20\3\1\41\32\3\1\uffff\3\3\1\uffff\3\3\6\uffff\57\3\1\uffff\13\3",
            "\20\3\1\41\32\3\1\uffff\3\3\1\uffff\3\3\6\uffff\57\3\1\uffff\13\3",
            "\20\3\1\41\32\3\1\uffff\3\3\1\uffff\3\3\6\uffff\57\3\1\uffff\13\3",
            "\20\3\1\41\32\3\1\uffff\3\3\1\uffff\3\3\6\uffff\57\3\1\uffff\13\3",
            "\20\3\1\41\32\3\1\uffff\3\3\1\uffff\3\3\6\uffff\57\3\1\uffff\13\3",
            "\20\3\1\41\32\3\1\uffff\3\3\1\uffff\3\3\6\uffff\57\3\1\uffff\13\3",
            "\20\3\1\41\32\3\1\uffff\3\3\1\uffff\3\3\6\uffff\57\3\1\uffff\13\3",
            "\20\3\1\41\32\3\1\uffff\3\3\1\uffff\3\3\6\uffff\57\3\1\uffff\13\3",
            "\20\3\1\41\32\3\1\uffff\3\3\1\uffff\3\3\6\uffff\57\3\1\uffff\13\3",
            "\20\3\1\41\32\3\1\uffff\3\3\1\uffff\3\3\6\uffff\57\3\1\uffff\13\3",
            "\20\3\1\41\32\3\1\uffff\3\3\1\uffff\3\3\6\uffff\57\3\1\uffff\13\3",
            "\20\3\1\41\32\3\1\uffff\3\3\1\uffff\3\3\6\uffff\57\3\1\uffff\13\3",
            "\20\3\1\41\32\3\1\uffff\3\3\1\uffff\3\3\6\uffff\57\3\1\uffff\13\3",
            "\20\3\1\41\32\3\1\uffff\3\3\1\uffff\3\3\6\uffff\57\3\1\uffff\13\3",
            "\20\3\1\41\32\3\1\uffff\3\3\1\uffff\3\3\6\uffff\57\3\1\uffff\13\3",
            "\20\3\1\41\32\3\1\uffff\3\3\1\uffff\3\3\6\uffff\57\3\1\uffff\13\3",
            "\20\3\1\41\32\3\1\uffff\3\3\1\uffff\3\3\6\uffff\57\3\1\uffff\13\3",
            "\20\3\1\41\32\3\1\uffff\3\3\1\uffff\3\3\6\uffff\57\3\1\uffff\13\3",
            "\20\3\1\41\32\3\1\uffff\3\3\1\uffff\3\3\6\uffff\57\3\1\uffff\13\3",
            ""
    };

    static final short[] dfa_94 = DFA.unpackEncodedString(dfa_94s);
    static final short[] dfa_95 = DFA.unpackEncodedString(dfa_95s);
    static final char[] dfa_96 = DFA.unpackEncodedStringToUnsignedChars(dfa_96s);
    static final char[] dfa_97 = DFA.unpackEncodedStringToUnsignedChars(dfa_97s);
    static final short[] dfa_98 = DFA.unpackEncodedString(dfa_98s);
    static final short[] dfa_99 = DFA.unpackEncodedString(dfa_99s);
    static final short[][] dfa_100 = unpackEncodedStringArray(dfa_100s);

    class DFA56 extends DFA {

        public DFA56(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 56;
            this.eot = dfa_94;
            this.eof = dfa_95;
            this.min = dfa_96;
            this.max = dfa_97;
            this.accept = dfa_98;
            this.special = dfa_99;
            this.transition = dfa_100;
        }
        public String getDescription() {
            return "4733:1: rule__XMemberFeatureCall__Alternatives_1 : ( ( ( rule__XMemberFeatureCall__Group_1_0__0 ) ) | ( ( rule__XMemberFeatureCall__Group_1_1__0 ) ) );";
        }
    }

    class DFA59 extends DFA {

        public DFA59(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 59;
            this.eot = dfa_65;
            this.eof = dfa_65;
            this.min = dfa_66;
            this.max = dfa_67;
            this.accept = dfa_68;
            this.special = dfa_69;
            this.transition = dfa_70;
        }
        public String getDescription() {
            return "4802:1: rule__XMemberFeatureCall__Alternatives_1_1_3_1 : ( ( ( rule__XMemberFeatureCall__MemberCallArgumentsAssignment_1_1_3_1_0 ) ) | ( ( rule__XMemberFeatureCall__Group_1_1_3_1_1__0 ) ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA59_1 = input.LA(1);

                         
                        int index59_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index59_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA59_2 = input.LA(1);

                         
                        int index59_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index59_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA59_3 = input.LA(1);

                         
                        int index59_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index59_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA59_4 = input.LA(1);

                         
                        int index59_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index59_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA59_5 = input.LA(1);

                         
                        int index59_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index59_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA59_6 = input.LA(1);

                         
                        int index59_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index59_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA59_7 = input.LA(1);

                         
                        int index59_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index59_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA59_8 = input.LA(1);

                         
                        int index59_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index59_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA59_10 = input.LA(1);

                         
                        int index59_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index59_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA59_11 = input.LA(1);

                         
                        int index59_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index59_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA59_12 = input.LA(1);

                         
                        int index59_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index59_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA59_13 = input.LA(1);

                         
                        int index59_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index59_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA59_14 = input.LA(1);

                         
                        int index59_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index59_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA59_15 = input.LA(1);

                         
                        int index59_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index59_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA59_16 = input.LA(1);

                         
                        int index59_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index59_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA59_17 = input.LA(1);

                         
                        int index59_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index59_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA59_18 = input.LA(1);

                         
                        int index59_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index59_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA59_19 = input.LA(1);

                         
                        int index59_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index59_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA59_20 = input.LA(1);

                         
                        int index59_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index59_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA59_21 = input.LA(1);

                         
                        int index59_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index59_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA59_22 = input.LA(1);

                         
                        int index59_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index59_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA59_23 = input.LA(1);

                         
                        int index59_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index59_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA59_24 = input.LA(1);

                         
                        int index59_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index59_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA59_25 = input.LA(1);

                         
                        int index59_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index59_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA59_26 = input.LA(1);

                         
                        int index59_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index59_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA59_27 = input.LA(1);

                         
                        int index59_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index59_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA59_28 = input.LA(1);

                         
                        int index59_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index59_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA59_29 = input.LA(1);

                         
                        int index59_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index59_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA59_30 = input.LA(1);

                         
                        int index59_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index59_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA59_31 = input.LA(1);

                         
                        int index59_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index59_31);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 59, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_101s = "\72\uffff";
    static final String dfa_102s = "\1\4\3\uffff\1\0\53\uffff\1\0\11\uffff";
    static final String dfa_103s = "\1\163\3\uffff\1\0\53\uffff\1\0\11\uffff";
    static final String dfa_104s = "\1\uffff\1\1\1\2\1\3\1\uffff\1\5\35\uffff\1\6\13\uffff\1\7\1\uffff\1\12\1\13\1\14\1\15\1\16\1\17\1\4\1\10\1\11";
    static final String dfa_105s = "\4\uffff\1\0\53\uffff\1\1\11\uffff}>";
    static final String[] dfa_106s = {
            "\1\5\1\uffff\2\5\2\uffff\2\5\1\2\1\uffff\3\5\1\66\3\uffff\2\5\1\1\1\uffff\12\5\1\4\1\5\2\uffff\3\5\1\uffff\4\5\2\uffff\1\65\2\uffff\1\3\11\uffff\2\43\37\uffff\1\57\1\uffff\1\60\1\61\1\62\1\5\4\43\1\63\1\64\2\uffff\1\5\6\43",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_101 = DFA.unpackEncodedString(dfa_101s);
    static final char[] dfa_102 = DFA.unpackEncodedStringToUnsignedChars(dfa_102s);
    static final char[] dfa_103 = DFA.unpackEncodedStringToUnsignedChars(dfa_103s);
    static final short[] dfa_104 = DFA.unpackEncodedString(dfa_104s);
    static final short[] dfa_105 = DFA.unpackEncodedString(dfa_105s);
    static final short[][] dfa_106 = unpackEncodedStringArray(dfa_106s);

    class DFA60 extends DFA {

        public DFA60(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 60;
            this.eot = dfa_101;
            this.eof = dfa_101;
            this.min = dfa_102;
            this.max = dfa_103;
            this.accept = dfa_104;
            this.special = dfa_105;
            this.transition = dfa_106;
        }
        public String getDescription() {
            return "4823:1: rule__XPrimaryExpression__Alternatives : ( ( ruleXConstructorCall ) | ( ruleXBlockExpression ) | ( ruleXSwitchExpression ) | ( ( ruleXSynchronizedExpression ) ) | ( ruleXFeatureCall ) | ( ruleXLiteral ) | ( ruleXIfExpression ) | ( ( ruleXForLoopExpression ) ) | ( ruleXBasicForLoopExpression ) | ( ruleXWhileExpression ) | ( ruleXDoWhileExpression ) | ( ruleXThrowExpression ) | ( ruleXReturnExpression ) | ( ruleXTryCatchFinallyExpression ) | ( ruleXParenthesizedExpression ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA60_4 = input.LA(1);

                         
                        int index60_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred150_InternalXtend()) ) {s = 55;}

                        else if ( (synpred151_InternalXtend()) ) {s = 5;}

                         
                        input.seek(index60_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA60_48 = input.LA(1);

                         
                        int index60_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_InternalXtend()) ) {s = 56;}

                        else if ( (synpred155_InternalXtend()) ) {s = 57;}

                         
                        input.seek(index60_48);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 60, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA64 extends DFA {

        public DFA64(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 64;
            this.eot = dfa_65;
            this.eof = dfa_65;
            this.min = dfa_66;
            this.max = dfa_67;
            this.accept = dfa_68;
            this.special = dfa_69;
            this.transition = dfa_70;
        }
        public String getDescription() {
            return "5015:1: rule__XFeatureCall__Alternatives_3_1 : ( ( ( rule__XFeatureCall__FeatureCallArgumentsAssignment_3_1_0 ) ) | ( ( rule__XFeatureCall__Group_3_1_1__0 ) ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA64_1 = input.LA(1);

                         
                        int index64_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index64_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA64_2 = input.LA(1);

                         
                        int index64_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index64_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA64_3 = input.LA(1);

                         
                        int index64_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index64_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA64_4 = input.LA(1);

                         
                        int index64_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index64_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA64_5 = input.LA(1);

                         
                        int index64_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index64_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA64_6 = input.LA(1);

                         
                        int index64_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index64_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA64_7 = input.LA(1);

                         
                        int index64_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index64_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA64_8 = input.LA(1);

                         
                        int index64_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index64_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA64_10 = input.LA(1);

                         
                        int index64_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index64_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA64_11 = input.LA(1);

                         
                        int index64_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index64_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA64_12 = input.LA(1);

                         
                        int index64_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index64_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA64_13 = input.LA(1);

                         
                        int index64_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index64_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA64_14 = input.LA(1);

                         
                        int index64_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index64_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA64_15 = input.LA(1);

                         
                        int index64_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index64_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA64_16 = input.LA(1);

                         
                        int index64_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index64_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA64_17 = input.LA(1);

                         
                        int index64_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index64_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA64_18 = input.LA(1);

                         
                        int index64_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index64_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA64_19 = input.LA(1);

                         
                        int index64_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index64_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA64_20 = input.LA(1);

                         
                        int index64_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index64_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA64_21 = input.LA(1);

                         
                        int index64_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index64_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA64_22 = input.LA(1);

                         
                        int index64_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index64_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA64_23 = input.LA(1);

                         
                        int index64_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index64_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA64_24 = input.LA(1);

                         
                        int index64_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index64_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA64_25 = input.LA(1);

                         
                        int index64_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index64_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA64_26 = input.LA(1);

                         
                        int index64_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index64_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA64_27 = input.LA(1);

                         
                        int index64_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index64_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA64_28 = input.LA(1);

                         
                        int index64_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index64_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA64_29 = input.LA(1);

                         
                        int index64_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index64_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA64_30 = input.LA(1);

                         
                        int index64_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index64_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA64_31 = input.LA(1);

                         
                        int index64_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index64_31);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 64, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_107s = "\2\uffff\6\11\2\uffff\6\11\1\uffff";
    static final String dfa_108s = "\1\20\1\uffff\6\4\1\20\1\uffff\6\4\1\uffff";
    static final String dfa_109s = "\1\155\1\uffff\6\75\1\155\1\uffff\6\75\1\uffff";
    static final String dfa_110s = "\1\uffff\1\1\7\uffff\1\2\6\uffff\1\3";
    static final String[] dfa_111s = {
            "\1\4\14\uffff\1\1\13\uffff\1\3\1\uffff\1\5\1\6\1\7\77\uffff\1\2",
            "",
            "\3\11\7\uffff\3\11\7\uffff\1\10\14\11\11\uffff\1\11\16\uffff\1\11",
            "\3\11\7\uffff\3\11\7\uffff\1\10\14\11\11\uffff\1\11\16\uffff\1\11",
            "\3\11\7\uffff\3\11\7\uffff\1\10\14\11\11\uffff\1\11\16\uffff\1\11",
            "\3\11\7\uffff\3\11\7\uffff\1\10\14\11\11\uffff\1\11\16\uffff\1\11",
            "\3\11\7\uffff\3\11\7\uffff\1\10\14\11\11\uffff\1\11\16\uffff\1\11",
            "\3\11\7\uffff\3\11\7\uffff\1\10\14\11\11\uffff\1\11\16\uffff\1\11",
            "\1\14\30\uffff\1\13\1\uffff\1\15\1\16\1\17\47\uffff\1\20\27\uffff\1\12",
            "",
            "\3\11\7\uffff\3\11\7\uffff\1\10\14\11\11\uffff\1\11\16\uffff\1\11",
            "\3\11\7\uffff\3\11\7\uffff\1\10\14\11\11\uffff\1\11\16\uffff\1\11",
            "\3\11\7\uffff\3\11\7\uffff\1\10\14\11\11\uffff\1\11\16\uffff\1\11",
            "\3\11\7\uffff\3\11\7\uffff\1\10\14\11\11\uffff\1\11\16\uffff\1\11",
            "\3\11\7\uffff\3\11\7\uffff\1\10\14\11\11\uffff\1\11\16\uffff\1\11",
            "\3\11\7\uffff\3\11\7\uffff\1\10\14\11\11\uffff\1\11\16\uffff\1\11",
            ""
    };
    static final short[] dfa_107 = DFA.unpackEncodedString(dfa_107s);
    static final char[] dfa_108 = DFA.unpackEncodedStringToUnsignedChars(dfa_108s);
    static final char[] dfa_109 = DFA.unpackEncodedStringToUnsignedChars(dfa_109s);
    static final short[] dfa_110 = DFA.unpackEncodedString(dfa_110s);
    static final short[][] dfa_111 = unpackEncodedStringArray(dfa_111s);

    class DFA73 extends DFA {

        public DFA73(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 73;
            this.eot = dfa_39;
            this.eof = dfa_107;
            this.min = dfa_108;
            this.max = dfa_109;
            this.accept = dfa_110;
            this.special = dfa_43;
            this.transition = dfa_111;
        }
        public String getDescription() {
            return "5204:1: rule__XImportDeclaration__Alternatives_1 : ( ( ( rule__XImportDeclaration__Group_1_0__0 ) ) | ( ( rule__XImportDeclaration__ImportedTypeAssignment_1_1 ) ) | ( ( rule__XImportDeclaration__ImportedNamespaceAssignment_1_2 ) ) );";
        }
    }
    static final String dfa_112s = "\47\uffff";
    static final String dfa_113s = "\1\uffff\6\16\1\uffff\6\7\31\uffff";
    static final String dfa_114s = "\1\20\6\4\1\uffff\6\4\1\uffff\30\4";
    static final String dfa_115s = "\7\155\1\uffff\6\155\1\uffff\30\155";
    static final String dfa_116s = "\7\uffff\1\1\6\uffff\1\2\30\uffff";
    static final String dfa_117s = "\47\uffff}>";
    static final String[] dfa_118s = {
            "\1\3\1\7\1\uffff\1\7\25\uffff\1\2\1\uffff\1\4\1\5\1\6\77\uffff\1\1",
            "\3\16\1\7\5\uffff\3\16\1\12\1\16\1\uffff\2\16\3\uffff\1\7\16\16\2\uffff\1\11\1\uffff\1\13\1\14\1\15\17\uffff\1\16\1\uffff\1\7\55\uffff\1\10",
            "\3\16\1\7\5\uffff\3\16\1\12\1\16\1\uffff\2\16\3\uffff\1\7\16\16\2\uffff\1\11\1\uffff\1\13\1\14\1\15\17\uffff\1\16\1\uffff\1\7\55\uffff\1\10",
            "\3\16\1\7\5\uffff\3\16\1\12\1\16\1\uffff\2\16\3\uffff\1\7\16\16\2\uffff\1\11\1\uffff\1\13\1\14\1\15\17\uffff\1\16\1\uffff\1\7\55\uffff\1\10",
            "\3\16\1\7\5\uffff\3\16\1\12\1\16\1\uffff\2\16\3\uffff\1\7\16\16\2\uffff\1\11\1\uffff\1\13\1\14\1\15\17\uffff\1\16\1\uffff\1\7\55\uffff\1\10",
            "\3\16\1\7\5\uffff\3\16\1\12\1\16\1\uffff\2\16\3\uffff\1\7\16\16\2\uffff\1\11\1\uffff\1\13\1\14\1\15\17\uffff\1\16\1\uffff\1\7\55\uffff\1\10",
            "\3\16\1\7\5\uffff\3\16\1\12\1\16\1\uffff\2\16\3\uffff\1\7\16\16\2\uffff\1\11\1\uffff\1\13\1\14\1\15\17\uffff\1\16\1\uffff\1\7\55\uffff\1\10",
            "",
            "\3\7\1\16\5\uffff\3\7\1\21\1\7\1\uffff\2\7\3\uffff\1\16\16\7\2\uffff\1\20\1\uffff\1\22\1\23\1\24\17\uffff\1\7\1\uffff\1\16\55\uffff\1\17",
            "\3\7\1\16\5\uffff\3\7\1\21\1\7\1\uffff\2\7\3\uffff\1\16\16\7\2\uffff\1\20\1\uffff\1\22\1\23\1\24\17\uffff\1\7\1\uffff\1\16\55\uffff\1\17",
            "\3\7\1\16\5\uffff\3\7\1\27\1\7\1\uffff\2\7\3\uffff\1\16\16\7\2\uffff\1\26\1\uffff\1\30\1\31\1\32\17\uffff\1\7\1\uffff\1\16\55\uffff\1\25",
            "\3\7\1\16\5\uffff\3\7\1\21\1\7\1\uffff\2\7\3\uffff\1\16\16\7\2\uffff\1\20\1\uffff\1\22\1\23\1\24\17\uffff\1\7\1\uffff\1\16\55\uffff\1\17",
            "\3\7\1\16\5\uffff\3\7\1\21\1\7\1\uffff\2\7\3\uffff\1\16\16\7\2\uffff\1\20\1\uffff\1\22\1\23\1\24\17\uffff\1\7\1\uffff\1\16\55\uffff\1\17",
            "\3\7\1\16\5\uffff\3\7\1\21\1\7\1\uffff\2\7\3\uffff\1\16\16\7\2\uffff\1\20\1\uffff\1\22\1\23\1\24\17\uffff\1\7\1\uffff\1\16\55\uffff\1\17",
            "",
            "\3\16\1\7\5\uffff\3\16\1\35\1\16\1\uffff\2\16\3\uffff\1\7\16\16\2\uffff\1\34\1\uffff\1\36\1\37\1\40\17\uffff\1\16\1\uffff\1\7\55\uffff\1\33",
            "\3\16\1\7\5\uffff\3\16\1\35\1\16\1\uffff\2\16\3\uffff\1\7\16\16\2\uffff\1\34\1\uffff\1\36\1\37\1\40\17\uffff\1\16\1\uffff\1\7\55\uffff\1\33",
            "\3\16\1\7\5\uffff\3\16\1\43\1\16\1\uffff\2\16\3\uffff\1\7\16\16\2\uffff\1\42\1\uffff\1\44\1\45\1\46\17\uffff\1\16\1\uffff\1\7\55\uffff\1\41",
            "\3\16\1\7\5\uffff\3\16\1\35\1\16\1\uffff\2\16\3\uffff\1\7\16\16\2\uffff\1\34\1\uffff\1\36\1\37\1\40\17\uffff\1\16\1\uffff\1\7\55\uffff\1\33",
            "\3\16\1\7\5\uffff\3\16\1\35\1\16\1\uffff\2\16\3\uffff\1\7\16\16\2\uffff\1\34\1\uffff\1\36\1\37\1\40\17\uffff\1\16\1\uffff\1\7\55\uffff\1\33",
            "\3\16\1\7\5\uffff\3\16\1\35\1\16\1\uffff\2\16\3\uffff\1\7\16\16\2\uffff\1\34\1\uffff\1\36\1\37\1\40\17\uffff\1\16\1\uffff\1\7\55\uffff\1\33",
            "\3\16\1\7\4\uffff\4\16\1\35\1\16\1\uffff\2\16\3\uffff\1\7\16\16\2\uffff\1\34\1\uffff\1\36\1\37\1\40\17\uffff\1\16\1\uffff\1\7\55\uffff\1\33",
            "\3\16\1\7\4\uffff\4\16\1\35\1\16\1\uffff\2\16\3\uffff\1\7\16\16\2\uffff\1\34\1\uffff\1\36\1\37\1\40\17\uffff\1\16\1\uffff\1\7\55\uffff\1\33",
            "\3\16\1\7\4\uffff\4\16\1\43\1\16\1\uffff\2\16\3\uffff\1\7\16\16\2\uffff\1\42\1\uffff\1\44\1\45\1\46\17\uffff\1\16\1\uffff\1\7\55\uffff\1\41",
            "\3\16\1\7\4\uffff\4\16\1\35\1\16\1\uffff\2\16\3\uffff\1\7\16\16\2\uffff\1\34\1\uffff\1\36\1\37\1\40\17\uffff\1\16\1\uffff\1\7\55\uffff\1\33",
            "\3\16\1\7\4\uffff\4\16\1\35\1\16\1\uffff\2\16\3\uffff\1\7\16\16\2\uffff\1\34\1\uffff\1\36\1\37\1\40\17\uffff\1\16\1\uffff\1\7\55\uffff\1\33",
            "\3\16\1\7\4\uffff\4\16\1\35\1\16\1\uffff\2\16\3\uffff\1\7\16\16\2\uffff\1\34\1\uffff\1\36\1\37\1\40\17\uffff\1\16\1\uffff\1\7\55\uffff\1\33",
            "\3\7\1\16\5\uffff\3\7\1\21\1\7\1\uffff\2\7\3\uffff\1\16\16\7\2\uffff\1\20\1\uffff\1\22\1\23\1\24\17\uffff\1\7\1\uffff\1\16\55\uffff\1\17",
            "\3\7\1\16\5\uffff\3\7\1\21\1\7\1\uffff\2\7\3\uffff\1\16\16\7\2\uffff\1\20\1\uffff\1\22\1\23\1\24\17\uffff\1\7\1\uffff\1\16\55\uffff\1\17",
            "\3\7\1\16\5\uffff\3\7\1\27\1\7\1\uffff\2\7\3\uffff\1\16\16\7\2\uffff\1\26\1\uffff\1\30\1\31\1\32\17\uffff\1\7\1\uffff\1\16\55\uffff\1\25",
            "\3\7\1\16\5\uffff\3\7\1\21\1\7\1\uffff\2\7\3\uffff\1\16\16\7\2\uffff\1\20\1\uffff\1\22\1\23\1\24\17\uffff\1\7\1\uffff\1\16\55\uffff\1\17",
            "\3\7\1\16\5\uffff\3\7\1\21\1\7\1\uffff\2\7\3\uffff\1\16\16\7\2\uffff\1\20\1\uffff\1\22\1\23\1\24\17\uffff\1\7\1\uffff\1\16\55\uffff\1\17",
            "\3\7\1\16\5\uffff\3\7\1\21\1\7\1\uffff\2\7\3\uffff\1\16\16\7\2\uffff\1\20\1\uffff\1\22\1\23\1\24\17\uffff\1\7\1\uffff\1\16\55\uffff\1\17",
            "\3\7\1\16\4\uffff\4\7\1\21\1\7\1\uffff\2\7\3\uffff\1\16\16\7\2\uffff\1\20\1\uffff\1\22\1\23\1\24\17\uffff\1\7\1\uffff\1\16\55\uffff\1\17",
            "\3\7\1\16\4\uffff\4\7\1\21\1\7\1\uffff\2\7\3\uffff\1\16\16\7\2\uffff\1\20\1\uffff\1\22\1\23\1\24\17\uffff\1\7\1\uffff\1\16\55\uffff\1\17",
            "\3\7\1\16\4\uffff\4\7\1\27\1\7\1\uffff\2\7\3\uffff\1\16\16\7\2\uffff\1\26\1\uffff\1\30\1\31\1\32\17\uffff\1\7\1\uffff\1\16\55\uffff\1\25",
            "\3\7\1\16\4\uffff\4\7\1\21\1\7\1\uffff\2\7\3\uffff\1\16\16\7\2\uffff\1\20\1\uffff\1\22\1\23\1\24\17\uffff\1\7\1\uffff\1\16\55\uffff\1\17",
            "\3\7\1\16\4\uffff\4\7\1\21\1\7\1\uffff\2\7\3\uffff\1\16\16\7\2\uffff\1\20\1\uffff\1\22\1\23\1\24\17\uffff\1\7\1\uffff\1\16\55\uffff\1\17",
            "\3\7\1\16\4\uffff\4\7\1\21\1\7\1\uffff\2\7\3\uffff\1\16\16\7\2\uffff\1\20\1\uffff\1\22\1\23\1\24\17\uffff\1\7\1\uffff\1\16\55\uffff\1\17"
    };

    static final short[] dfa_112 = DFA.unpackEncodedString(dfa_112s);
    static final short[] dfa_113 = DFA.unpackEncodedString(dfa_113s);
    static final char[] dfa_114 = DFA.unpackEncodedStringToUnsignedChars(dfa_114s);
    static final char[] dfa_115 = DFA.unpackEncodedStringToUnsignedChars(dfa_115s);
    static final short[] dfa_116 = DFA.unpackEncodedString(dfa_116s);
    static final short[] dfa_117 = DFA.unpackEncodedString(dfa_117s);
    static final short[][] dfa_118 = unpackEncodedStringArray(dfa_118s);

    class DFA107 extends DFA {

        public DFA107(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 107;
            this.eot = dfa_112;
            this.eof = dfa_113;
            this.min = dfa_114;
            this.max = dfa_115;
            this.accept = dfa_116;
            this.special = dfa_117;
            this.transition = dfa_118;
        }
        public String getDescription() {
            return "7728:2: ( rule__AnnotationField__TypeAssignment_2_0_0_0_4 )?";
        }
    }
    static final String dfa_119s = "\1\uffff\6\10\2\uffff\6\7\30\uffff";
    static final String dfa_120s = "\1\20\6\4\2\uffff\36\4";
    static final String dfa_121s = "\7\155\2\uffff\36\155";
    static final String dfa_122s = "\7\uffff\1\1\1\2\36\uffff";
    static final String[] dfa_123s = {
            "\1\3\1\7\1\uffff\1\7\25\uffff\1\2\1\uffff\1\4\1\5\1\6\77\uffff\1\1",
            "\3\10\1\7\5\uffff\3\10\1\13\1\10\1\uffff\3\10\1\uffff\1\10\1\7\20\10\1\12\1\uffff\1\14\1\15\1\16\17\uffff\1\10\1\uffff\1\7\55\uffff\1\11",
            "\3\10\1\7\5\uffff\3\10\1\13\1\10\1\uffff\3\10\1\uffff\1\10\1\7\20\10\1\12\1\uffff\1\14\1\15\1\16\17\uffff\1\10\1\uffff\1\7\55\uffff\1\11",
            "\3\10\1\7\5\uffff\3\10\1\13\1\10\1\uffff\3\10\1\uffff\1\10\1\7\20\10\1\12\1\uffff\1\14\1\15\1\16\17\uffff\1\10\1\uffff\1\7\55\uffff\1\11",
            "\3\10\1\7\5\uffff\3\10\1\13\1\10\1\uffff\3\10\1\uffff\1\10\1\7\20\10\1\12\1\uffff\1\14\1\15\1\16\17\uffff\1\10\1\uffff\1\7\55\uffff\1\11",
            "\3\10\1\7\5\uffff\3\10\1\13\1\10\1\uffff\3\10\1\uffff\1\10\1\7\20\10\1\12\1\uffff\1\14\1\15\1\16\17\uffff\1\10\1\uffff\1\7\55\uffff\1\11",
            "\3\10\1\7\5\uffff\3\10\1\13\1\10\1\uffff\3\10\1\uffff\1\10\1\7\20\10\1\12\1\uffff\1\14\1\15\1\16\17\uffff\1\10\1\uffff\1\7\55\uffff\1\11",
            "",
            "",
            "\3\7\1\10\5\uffff\3\7\1\21\1\7\1\uffff\3\7\1\uffff\1\7\1\10\20\7\1\20\1\uffff\1\22\1\23\1\24\17\uffff\1\7\1\uffff\1\10\55\uffff\1\17",
            "\3\7\1\10\5\uffff\3\7\1\21\1\7\1\uffff\3\7\1\uffff\1\7\1\10\20\7\1\20\1\uffff\1\22\1\23\1\24\17\uffff\1\7\1\uffff\1\10\55\uffff\1\17",
            "\3\7\1\10\5\uffff\3\7\1\27\1\7\1\uffff\3\7\1\uffff\1\7\1\10\20\7\1\26\1\uffff\1\30\1\31\1\32\17\uffff\1\7\1\uffff\1\10\55\uffff\1\25",
            "\3\7\1\10\5\uffff\3\7\1\21\1\7\1\uffff\3\7\1\uffff\1\7\1\10\20\7\1\20\1\uffff\1\22\1\23\1\24\17\uffff\1\7\1\uffff\1\10\55\uffff\1\17",
            "\3\7\1\10\5\uffff\3\7\1\21\1\7\1\uffff\3\7\1\uffff\1\7\1\10\20\7\1\20\1\uffff\1\22\1\23\1\24\17\uffff\1\7\1\uffff\1\10\55\uffff\1\17",
            "\3\7\1\10\5\uffff\3\7\1\21\1\7\1\uffff\3\7\1\uffff\1\7\1\10\20\7\1\20\1\uffff\1\22\1\23\1\24\17\uffff\1\7\1\uffff\1\10\55\uffff\1\17",
            "\3\10\1\7\5\uffff\3\10\1\35\1\10\1\uffff\3\10\1\uffff\1\10\1\7\20\10\1\34\1\uffff\1\36\1\37\1\40\17\uffff\1\10\1\uffff\1\7\55\uffff\1\33",
            "\3\10\1\7\5\uffff\3\10\1\35\1\10\1\uffff\3\10\1\uffff\1\10\1\7\20\10\1\34\1\uffff\1\36\1\37\1\40\17\uffff\1\10\1\uffff\1\7\55\uffff\1\33",
            "\3\10\1\7\5\uffff\3\10\1\43\1\10\1\uffff\3\10\1\uffff\1\10\1\7\20\10\1\42\1\uffff\1\44\1\45\1\46\17\uffff\1\10\1\uffff\1\7\55\uffff\1\41",
            "\3\10\1\7\5\uffff\3\10\1\35\1\10\1\uffff\3\10\1\uffff\1\10\1\7\20\10\1\34\1\uffff\1\36\1\37\1\40\17\uffff\1\10\1\uffff\1\7\55\uffff\1\33",
            "\3\10\1\7\5\uffff\3\10\1\35\1\10\1\uffff\3\10\1\uffff\1\10\1\7\20\10\1\34\1\uffff\1\36\1\37\1\40\17\uffff\1\10\1\uffff\1\7\55\uffff\1\33",
            "\3\10\1\7\5\uffff\3\10\1\35\1\10\1\uffff\3\10\1\uffff\1\10\1\7\20\10\1\34\1\uffff\1\36\1\37\1\40\17\uffff\1\10\1\uffff\1\7\55\uffff\1\33",
            "\3\10\1\7\4\uffff\4\10\1\35\1\10\1\uffff\3\10\1\uffff\1\10\1\7\20\10\1\34\1\uffff\1\36\1\37\1\40\17\uffff\1\10\1\uffff\1\7\55\uffff\1\33",
            "\3\10\1\7\4\uffff\4\10\1\35\1\10\1\uffff\3\10\1\uffff\1\10\1\7\20\10\1\34\1\uffff\1\36\1\37\1\40\17\uffff\1\10\1\uffff\1\7\55\uffff\1\33",
            "\3\10\1\7\4\uffff\4\10\1\43\1\10\1\uffff\3\10\1\uffff\1\10\1\7\20\10\1\42\1\uffff\1\44\1\45\1\46\17\uffff\1\10\1\uffff\1\7\55\uffff\1\41",
            "\3\10\1\7\4\uffff\4\10\1\35\1\10\1\uffff\3\10\1\uffff\1\10\1\7\20\10\1\34\1\uffff\1\36\1\37\1\40\17\uffff\1\10\1\uffff\1\7\55\uffff\1\33",
            "\3\10\1\7\4\uffff\4\10\1\35\1\10\1\uffff\3\10\1\uffff\1\10\1\7\20\10\1\34\1\uffff\1\36\1\37\1\40\17\uffff\1\10\1\uffff\1\7\55\uffff\1\33",
            "\3\10\1\7\4\uffff\4\10\1\35\1\10\1\uffff\3\10\1\uffff\1\10\1\7\20\10\1\34\1\uffff\1\36\1\37\1\40\17\uffff\1\10\1\uffff\1\7\55\uffff\1\33",
            "\3\7\1\10\5\uffff\3\7\1\21\1\7\1\uffff\3\7\1\uffff\1\7\1\10\20\7\1\20\1\uffff\1\22\1\23\1\24\17\uffff\1\7\1\uffff\1\10\55\uffff\1\17",
            "\3\7\1\10\5\uffff\3\7\1\21\1\7\1\uffff\3\7\1\uffff\1\7\1\10\20\7\1\20\1\uffff\1\22\1\23\1\24\17\uffff\1\7\1\uffff\1\10\55\uffff\1\17",
            "\3\7\1\10\5\uffff\3\7\1\27\1\7\1\uffff\3\7\1\uffff\1\7\1\10\20\7\1\26\1\uffff\1\30\1\31\1\32\17\uffff\1\7\1\uffff\1\10\55\uffff\1\25",
            "\3\7\1\10\5\uffff\3\7\1\21\1\7\1\uffff\3\7\1\uffff\1\7\1\10\20\7\1\20\1\uffff\1\22\1\23\1\24\17\uffff\1\7\1\uffff\1\10\55\uffff\1\17",
            "\3\7\1\10\5\uffff\3\7\1\21\1\7\1\uffff\3\7\1\uffff\1\7\1\10\20\7\1\20\1\uffff\1\22\1\23\1\24\17\uffff\1\7\1\uffff\1\10\55\uffff\1\17",
            "\3\7\1\10\5\uffff\3\7\1\21\1\7\1\uffff\3\7\1\uffff\1\7\1\10\20\7\1\20\1\uffff\1\22\1\23\1\24\17\uffff\1\7\1\uffff\1\10\55\uffff\1\17",
            "\3\7\1\10\4\uffff\4\7\1\21\1\7\1\uffff\3\7\1\uffff\1\7\1\10\20\7\1\20\1\uffff\1\22\1\23\1\24\17\uffff\1\7\1\uffff\1\10\55\uffff\1\17",
            "\3\7\1\10\4\uffff\4\7\1\21\1\7\1\uffff\3\7\1\uffff\1\7\1\10\20\7\1\20\1\uffff\1\22\1\23\1\24\17\uffff\1\7\1\uffff\1\10\55\uffff\1\17",
            "\3\7\1\10\4\uffff\4\7\1\27\1\7\1\uffff\3\7\1\uffff\1\7\1\10\20\7\1\26\1\uffff\1\30\1\31\1\32\17\uffff\1\7\1\uffff\1\10\55\uffff\1\25",
            "\3\7\1\10\4\uffff\4\7\1\21\1\7\1\uffff\3\7\1\uffff\1\7\1\10\20\7\1\20\1\uffff\1\22\1\23\1\24\17\uffff\1\7\1\uffff\1\10\55\uffff\1\17",
            "\3\7\1\10\4\uffff\4\7\1\21\1\7\1\uffff\3\7\1\uffff\1\7\1\10\20\7\1\20\1\uffff\1\22\1\23\1\24\17\uffff\1\7\1\uffff\1\10\55\uffff\1\17",
            "\3\7\1\10\4\uffff\4\7\1\21\1\7\1\uffff\3\7\1\uffff\1\7\1\10\20\7\1\20\1\uffff\1\22\1\23\1\24\17\uffff\1\7\1\uffff\1\10\55\uffff\1\17"
    };
    static final short[] dfa_119 = DFA.unpackEncodedString(dfa_119s);
    static final char[] dfa_120 = DFA.unpackEncodedStringToUnsignedChars(dfa_120s);
    static final char[] dfa_121 = DFA.unpackEncodedStringToUnsignedChars(dfa_121s);
    static final short[] dfa_122 = DFA.unpackEncodedString(dfa_122s);
    static final short[][] dfa_123 = unpackEncodedStringArray(dfa_123s);

    class DFA133 extends DFA {

        public DFA133(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 133;
            this.eot = dfa_112;
            this.eof = dfa_119;
            this.min = dfa_120;
            this.max = dfa_121;
            this.accept = dfa_122;
            this.special = dfa_117;
            this.transition = dfa_123;
        }
        public String getDescription() {
            return "9888:2: ( rule__Member__TypeAssignment_2_0_2_0_2 )?";
        }
    }
    static final String dfa_124s = "\41\uffff";
    static final String dfa_125s = "\1\7\6\10\32\uffff";
    static final String dfa_126s = "\7\4\2\uffff\30\4";
    static final String dfa_127s = "\7\155\2\uffff\30\155";
    static final String dfa_128s = "\7\uffff\1\2\1\1\30\uffff";
    static final String dfa_129s = "\41\uffff}>";
    static final String[] dfa_130s = {
            "\3\7\6\uffff\3\7\1\3\1\7\1\uffff\3\7\1\uffff\1\7\1\uffff\20\7\1\2\1\uffff\1\4\1\5\1\6\17\uffff\1\7\57\uffff\1\1",
            "\3\10\1\7\5\uffff\3\10\1\13\1\10\1\uffff\3\10\1\uffff\1\10\1\7\20\10\1\12\1\uffff\1\14\1\15\1\16\17\uffff\1\10\1\uffff\1\7\55\uffff\1\11",
            "\3\10\1\7\5\uffff\3\10\1\13\1\10\1\uffff\3\10\1\uffff\1\10\1\7\20\10\1\12\1\uffff\1\14\1\15\1\16\17\uffff\1\10\1\uffff\1\7\55\uffff\1\11",
            "\3\10\1\7\5\uffff\3\10\1\21\1\10\1\uffff\3\10\1\uffff\1\10\1\7\20\10\1\20\1\uffff\1\22\1\23\1\24\17\uffff\1\10\1\uffff\1\7\55\uffff\1\17",
            "\3\10\1\7\5\uffff\3\10\1\13\1\10\1\uffff\3\10\1\uffff\1\10\1\7\20\10\1\12\1\uffff\1\14\1\15\1\16\17\uffff\1\10\1\uffff\1\7\55\uffff\1\11",
            "\3\10\1\7\5\uffff\3\10\1\13\1\10\1\uffff\3\10\1\uffff\1\10\1\7\20\10\1\12\1\uffff\1\14\1\15\1\16\17\uffff\1\10\1\uffff\1\7\55\uffff\1\11",
            "\3\10\1\7\5\uffff\3\10\1\13\1\10\1\uffff\3\10\1\uffff\1\10\1\7\20\10\1\12\1\uffff\1\14\1\15\1\16\17\uffff\1\10\1\uffff\1\7\55\uffff\1\11",
            "",
            "",
            "\3\7\1\10\5\uffff\3\7\1\27\1\7\1\uffff\3\7\1\uffff\1\7\1\10\20\7\1\26\1\uffff\1\30\1\31\1\32\17\uffff\1\7\1\uffff\1\10\55\uffff\1\25",
            "\3\7\1\10\5\uffff\3\7\1\27\1\7\1\uffff\3\7\1\uffff\1\7\1\10\20\7\1\26\1\uffff\1\30\1\31\1\32\17\uffff\1\7\1\uffff\1\10\55\uffff\1\25",
            "\3\7\1\10\5\uffff\3\7\1\35\1\7\1\uffff\3\7\1\uffff\1\7\1\10\20\7\1\34\1\uffff\1\36\1\37\1\40\17\uffff\1\7\1\uffff\1\10\55\uffff\1\33",
            "\3\7\1\10\5\uffff\3\7\1\27\1\7\1\uffff\3\7\1\uffff\1\7\1\10\20\7\1\26\1\uffff\1\30\1\31\1\32\17\uffff\1\7\1\uffff\1\10\55\uffff\1\25",
            "\3\7\1\10\5\uffff\3\7\1\27\1\7\1\uffff\3\7\1\uffff\1\7\1\10\20\7\1\26\1\uffff\1\30\1\31\1\32\17\uffff\1\7\1\uffff\1\10\55\uffff\1\25",
            "\3\7\1\10\5\uffff\3\7\1\27\1\7\1\uffff\3\7\1\uffff\1\7\1\10\20\7\1\26\1\uffff\1\30\1\31\1\32\17\uffff\1\7\1\uffff\1\10\55\uffff\1\25",
            "\3\7\1\10\4\uffff\4\7\1\27\1\7\1\uffff\3\7\1\uffff\1\7\1\10\20\7\1\26\1\uffff\1\30\1\31\1\32\17\uffff\1\7\1\uffff\1\10\55\uffff\1\25",
            "\3\7\1\10\4\uffff\4\7\1\27\1\7\1\uffff\3\7\1\uffff\1\7\1\10\20\7\1\26\1\uffff\1\30\1\31\1\32\17\uffff\1\7\1\uffff\1\10\55\uffff\1\25",
            "\3\7\1\10\4\uffff\4\7\1\35\1\7\1\uffff\3\7\1\uffff\1\7\1\10\20\7\1\34\1\uffff\1\36\1\37\1\40\17\uffff\1\7\1\uffff\1\10\55\uffff\1\33",
            "\3\7\1\10\4\uffff\4\7\1\27\1\7\1\uffff\3\7\1\uffff\1\7\1\10\20\7\1\26\1\uffff\1\30\1\31\1\32\17\uffff\1\7\1\uffff\1\10\55\uffff\1\25",
            "\3\7\1\10\4\uffff\4\7\1\27\1\7\1\uffff\3\7\1\uffff\1\7\1\10\20\7\1\26\1\uffff\1\30\1\31\1\32\17\uffff\1\7\1\uffff\1\10\55\uffff\1\25",
            "\3\7\1\10\4\uffff\4\7\1\27\1\7\1\uffff\3\7\1\uffff\1\7\1\10\20\7\1\26\1\uffff\1\30\1\31\1\32\17\uffff\1\7\1\uffff\1\10\55\uffff\1\25",
            "\3\10\1\7\5\uffff\3\10\1\13\1\10\1\uffff\3\10\1\uffff\1\10\1\7\20\10\1\12\1\uffff\1\14\1\15\1\16\17\uffff\1\10\1\uffff\1\7\55\uffff\1\11",
            "\3\10\1\7\5\uffff\3\10\1\13\1\10\1\uffff\3\10\1\uffff\1\10\1\7\20\10\1\12\1\uffff\1\14\1\15\1\16\17\uffff\1\10\1\uffff\1\7\55\uffff\1\11",
            "\3\10\1\7\5\uffff\3\10\1\21\1\10\1\uffff\3\10\1\uffff\1\10\1\7\20\10\1\20\1\uffff\1\22\1\23\1\24\17\uffff\1\10\1\uffff\1\7\55\uffff\1\17",
            "\3\10\1\7\5\uffff\3\10\1\13\1\10\1\uffff\3\10\1\uffff\1\10\1\7\20\10\1\12\1\uffff\1\14\1\15\1\16\17\uffff\1\10\1\uffff\1\7\55\uffff\1\11",
            "\3\10\1\7\5\uffff\3\10\1\13\1\10\1\uffff\3\10\1\uffff\1\10\1\7\20\10\1\12\1\uffff\1\14\1\15\1\16\17\uffff\1\10\1\uffff\1\7\55\uffff\1\11",
            "\3\10\1\7\5\uffff\3\10\1\13\1\10\1\uffff\3\10\1\uffff\1\10\1\7\20\10\1\12\1\uffff\1\14\1\15\1\16\17\uffff\1\10\1\uffff\1\7\55\uffff\1\11",
            "\3\10\1\7\4\uffff\4\10\1\13\1\10\1\uffff\3\10\1\uffff\1\10\1\7\20\10\1\12\1\uffff\1\14\1\15\1\16\17\uffff\1\10\1\uffff\1\7\55\uffff\1\11",
            "\3\10\1\7\4\uffff\4\10\1\13\1\10\1\uffff\3\10\1\uffff\1\10\1\7\20\10\1\12\1\uffff\1\14\1\15\1\16\17\uffff\1\10\1\uffff\1\7\55\uffff\1\11",
            "\3\10\1\7\4\uffff\4\10\1\21\1\10\1\uffff\3\10\1\uffff\1\10\1\7\20\10\1\20\1\uffff\1\22\1\23\1\24\17\uffff\1\10\1\uffff\1\7\55\uffff\1\17",
            "\3\10\1\7\4\uffff\4\10\1\13\1\10\1\uffff\3\10\1\uffff\1\10\1\7\20\10\1\12\1\uffff\1\14\1\15\1\16\17\uffff\1\10\1\uffff\1\7\55\uffff\1\11",
            "\3\10\1\7\4\uffff\4\10\1\13\1\10\1\uffff\3\10\1\uffff\1\10\1\7\20\10\1\12\1\uffff\1\14\1\15\1\16\17\uffff\1\10\1\uffff\1\7\55\uffff\1\11",
            "\3\10\1\7\4\uffff\4\10\1\13\1\10\1\uffff\3\10\1\uffff\1\10\1\7\20\10\1\12\1\uffff\1\14\1\15\1\16\17\uffff\1\10\1\uffff\1\7\55\uffff\1\11"
    };

    static final short[] dfa_124 = DFA.unpackEncodedString(dfa_124s);
    static final short[] dfa_125 = DFA.unpackEncodedString(dfa_125s);
    static final char[] dfa_126 = DFA.unpackEncodedStringToUnsignedChars(dfa_126s);
    static final char[] dfa_127 = DFA.unpackEncodedStringToUnsignedChars(dfa_127s);
    static final short[] dfa_128 = DFA.unpackEncodedString(dfa_128s);
    static final short[] dfa_129 = DFA.unpackEncodedString(dfa_129s);
    static final short[][] dfa_130 = unpackEncodedStringArray(dfa_130s);

    class DFA135 extends DFA {

        public DFA135(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 135;
            this.eot = dfa_124;
            this.eof = dfa_125;
            this.min = dfa_126;
            this.max = dfa_127;
            this.accept = dfa_128;
            this.special = dfa_129;
            this.transition = dfa_130;
        }
        public String getDescription() {
            return "10022:2: ( rule__Member__NameAssignment_2_0_2_1_3 )?";
        }
    }
    static final String dfa_131s = "\1\7\6\16\32\uffff";
    static final String dfa_132s = "\7\4\1\uffff\6\4\1\uffff\22\4";
    static final String dfa_133s = "\7\155\1\uffff\6\155\1\uffff\22\155";
    static final String dfa_134s = "\7\uffff\1\2\6\uffff\1\1\22\uffff";
    static final String[] dfa_135s = {
            "\3\7\6\uffff\3\7\1\3\1\7\1\uffff\3\7\1\uffff\1\7\1\uffff\20\7\1\2\1\uffff\1\4\1\5\1\6\17\uffff\1\7\57\uffff\1\1",
            "\3\16\1\7\5\uffff\3\16\1\12\1\16\1\uffff\3\16\1\uffff\1\16\1\7\20\16\1\11\1\uffff\1\13\1\14\1\15\17\uffff\1\16\1\uffff\1\7\55\uffff\1\10",
            "\3\16\1\7\5\uffff\3\16\1\12\1\16\1\uffff\3\16\1\uffff\1\16\1\7\20\16\1\11\1\uffff\1\13\1\14\1\15\17\uffff\1\16\1\uffff\1\7\55\uffff\1\10",
            "\3\16\1\7\5\uffff\3\16\1\21\1\16\1\uffff\3\16\1\uffff\1\16\1\7\20\16\1\20\1\uffff\1\22\1\23\1\24\17\uffff\1\16\1\uffff\1\7\55\uffff\1\17",
            "\3\16\1\7\5\uffff\3\16\1\12\1\16\1\uffff\3\16\1\uffff\1\16\1\7\20\16\1\11\1\uffff\1\13\1\14\1\15\17\uffff\1\16\1\uffff\1\7\55\uffff\1\10",
            "\3\16\1\7\5\uffff\3\16\1\12\1\16\1\uffff\3\16\1\uffff\1\16\1\7\20\16\1\11\1\uffff\1\13\1\14\1\15\17\uffff\1\16\1\uffff\1\7\55\uffff\1\10",
            "\3\16\1\7\5\uffff\3\16\1\12\1\16\1\uffff\3\16\1\uffff\1\16\1\7\20\16\1\11\1\uffff\1\13\1\14\1\15\17\uffff\1\16\1\uffff\1\7\55\uffff\1\10",
            "",
            "\3\7\1\16\5\uffff\3\7\1\27\1\7\1\uffff\3\7\1\uffff\1\7\1\16\20\7\1\26\1\uffff\1\30\1\31\1\32\17\uffff\1\7\1\uffff\1\16\55\uffff\1\25",
            "\3\7\1\16\5\uffff\3\7\1\27\1\7\1\uffff\3\7\1\uffff\1\7\1\16\20\7\1\26\1\uffff\1\30\1\31\1\32\17\uffff\1\7\1\uffff\1\16\55\uffff\1\25",
            "\3\7\1\16\5\uffff\3\7\1\35\1\7\1\uffff\3\7\1\uffff\1\7\1\16\20\7\1\34\1\uffff\1\36\1\37\1\40\17\uffff\1\7\1\uffff\1\16\55\uffff\1\33",
            "\3\7\1\16\5\uffff\3\7\1\27\1\7\1\uffff\3\7\1\uffff\1\7\1\16\20\7\1\26\1\uffff\1\30\1\31\1\32\17\uffff\1\7\1\uffff\1\16\55\uffff\1\25",
            "\3\7\1\16\5\uffff\3\7\1\27\1\7\1\uffff\3\7\1\uffff\1\7\1\16\20\7\1\26\1\uffff\1\30\1\31\1\32\17\uffff\1\7\1\uffff\1\16\55\uffff\1\25",
            "\3\7\1\16\5\uffff\3\7\1\27\1\7\1\uffff\3\7\1\uffff\1\7\1\16\20\7\1\26\1\uffff\1\30\1\31\1\32\17\uffff\1\7\1\uffff\1\16\55\uffff\1\25",
            "",
            "\3\7\1\16\4\uffff\4\7\1\27\1\7\1\uffff\3\7\1\uffff\1\7\1\16\20\7\1\26\1\uffff\1\30\1\31\1\32\17\uffff\1\7\1\uffff\1\16\55\uffff\1\25",
            "\3\7\1\16\4\uffff\4\7\1\27\1\7\1\uffff\3\7\1\uffff\1\7\1\16\20\7\1\26\1\uffff\1\30\1\31\1\32\17\uffff\1\7\1\uffff\1\16\55\uffff\1\25",
            "\3\7\1\16\4\uffff\4\7\1\35\1\7\1\uffff\3\7\1\uffff\1\7\1\16\20\7\1\34\1\uffff\1\36\1\37\1\40\17\uffff\1\7\1\uffff\1\16\55\uffff\1\33",
            "\3\7\1\16\4\uffff\4\7\1\27\1\7\1\uffff\3\7\1\uffff\1\7\1\16\20\7\1\26\1\uffff\1\30\1\31\1\32\17\uffff\1\7\1\uffff\1\16\55\uffff\1\25",
            "\3\7\1\16\4\uffff\4\7\1\27\1\7\1\uffff\3\7\1\uffff\1\7\1\16\20\7\1\26\1\uffff\1\30\1\31\1\32\17\uffff\1\7\1\uffff\1\16\55\uffff\1\25",
            "\3\7\1\16\4\uffff\4\7\1\27\1\7\1\uffff\3\7\1\uffff\1\7\1\16\20\7\1\26\1\uffff\1\30\1\31\1\32\17\uffff\1\7\1\uffff\1\16\55\uffff\1\25",
            "\3\16\1\7\5\uffff\3\16\1\12\1\16\1\uffff\3\16\1\uffff\1\16\1\7\20\16\1\11\1\uffff\1\13\1\14\1\15\17\uffff\1\16\1\uffff\1\7\55\uffff\1\10",
            "\3\16\1\7\5\uffff\3\16\1\12\1\16\1\uffff\3\16\1\uffff\1\16\1\7\20\16\1\11\1\uffff\1\13\1\14\1\15\17\uffff\1\16\1\uffff\1\7\55\uffff\1\10",
            "\3\16\1\7\5\uffff\3\16\1\21\1\16\1\uffff\3\16\1\uffff\1\16\1\7\20\16\1\20\1\uffff\1\22\1\23\1\24\17\uffff\1\16\1\uffff\1\7\55\uffff\1\17",
            "\3\16\1\7\5\uffff\3\16\1\12\1\16\1\uffff\3\16\1\uffff\1\16\1\7\20\16\1\11\1\uffff\1\13\1\14\1\15\17\uffff\1\16\1\uffff\1\7\55\uffff\1\10",
            "\3\16\1\7\5\uffff\3\16\1\12\1\16\1\uffff\3\16\1\uffff\1\16\1\7\20\16\1\11\1\uffff\1\13\1\14\1\15\17\uffff\1\16\1\uffff\1\7\55\uffff\1\10",
            "\3\16\1\7\5\uffff\3\16\1\12\1\16\1\uffff\3\16\1\uffff\1\16\1\7\20\16\1\11\1\uffff\1\13\1\14\1\15\17\uffff\1\16\1\uffff\1\7\55\uffff\1\10",
            "\3\16\1\7\4\uffff\4\16\1\12\1\16\1\uffff\3\16\1\uffff\1\16\1\7\20\16\1\11\1\uffff\1\13\1\14\1\15\17\uffff\1\16\1\uffff\1\7\55\uffff\1\10",
            "\3\16\1\7\4\uffff\4\16\1\12\1\16\1\uffff\3\16\1\uffff\1\16\1\7\20\16\1\11\1\uffff\1\13\1\14\1\15\17\uffff\1\16\1\uffff\1\7\55\uffff\1\10",
            "\3\16\1\7\4\uffff\4\16\1\21\1\16\1\uffff\3\16\1\uffff\1\16\1\7\20\16\1\20\1\uffff\1\22\1\23\1\24\17\uffff\1\16\1\uffff\1\7\55\uffff\1\17",
            "\3\16\1\7\4\uffff\4\16\1\12\1\16\1\uffff\3\16\1\uffff\1\16\1\7\20\16\1\11\1\uffff\1\13\1\14\1\15\17\uffff\1\16\1\uffff\1\7\55\uffff\1\10",
            "\3\16\1\7\4\uffff\4\16\1\12\1\16\1\uffff\3\16\1\uffff\1\16\1\7\20\16\1\11\1\uffff\1\13\1\14\1\15\17\uffff\1\16\1\uffff\1\7\55\uffff\1\10",
            "\3\16\1\7\4\uffff\4\16\1\12\1\16\1\uffff\3\16\1\uffff\1\16\1\7\20\16\1\11\1\uffff\1\13\1\14\1\15\17\uffff\1\16\1\uffff\1\7\55\uffff\1\10"
    };
    static final short[] dfa_131 = DFA.unpackEncodedString(dfa_131s);
    static final char[] dfa_132 = DFA.unpackEncodedStringToUnsignedChars(dfa_132s);
    static final char[] dfa_133 = DFA.unpackEncodedStringToUnsignedChars(dfa_133s);
    static final short[] dfa_134 = DFA.unpackEncodedString(dfa_134s);
    static final short[][] dfa_135 = unpackEncodedStringArray(dfa_135s);

    class DFA138 extends DFA {

        public DFA138(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 138;
            this.eot = dfa_124;
            this.eof = dfa_131;
            this.min = dfa_132;
            this.max = dfa_133;
            this.accept = dfa_134;
            this.special = dfa_129;
            this.transition = dfa_135;
        }
        public String getDescription() {
            return "10184:2: ( rule__Member__NameAssignment_2_0_2_2_5 )?";
        }
    }
    static final String dfa_136s = "\50\uffff";
    static final String dfa_137s = "\1\2\47\uffff";
    static final String dfa_138s = "\1\7\1\0\46\uffff";
    static final String dfa_139s = "\1\155\1\0\46\uffff";
    static final String dfa_140s = "\2\uffff\1\2\44\uffff\1\1";
    static final String dfa_141s = "\1\uffff\1\0\46\uffff}>";
    static final String[] dfa_142s = {
            "\1\1\1\uffff\1\2\6\uffff\1\2\2\uffff\1\2\4\uffff\1\2\20\uffff\1\2\1\uffff\3\2\21\uffff\1\2\1\uffff\14\2\1\uffff\14\2\1\uffff\2\2\20\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_136 = DFA.unpackEncodedString(dfa_136s);
    static final short[] dfa_137 = DFA.unpackEncodedString(dfa_137s);
    static final char[] dfa_138 = DFA.unpackEncodedStringToUnsignedChars(dfa_138s);
    static final char[] dfa_139 = DFA.unpackEncodedStringToUnsignedChars(dfa_139s);
    static final short[] dfa_140 = DFA.unpackEncodedString(dfa_140s);
    static final short[] dfa_141 = DFA.unpackEncodedString(dfa_141s);
    static final short[][] dfa_142 = unpackEncodedStringArray(dfa_142s);

    class DFA178 extends DFA {

        public DFA178(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 178;
            this.eot = dfa_136;
            this.eof = dfa_137;
            this.min = dfa_138;
            this.max = dfa_139;
            this.accept = dfa_140;
            this.special = dfa_141;
            this.transition = dfa_142;
        }
        public String getDescription() {
            return "14403:2: ( rule__ParameterizedTypeReferenceWithTypeArgs__Group_1_4_2__0 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA178_1 = input.LA(1);

                         
                        int index178_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalXtend()) ) {s = 39;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index178_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 178, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_143s = "\1\10\11\uffff";
    static final String dfa_144s = "\1\4\7\0\2\uffff";
    static final String dfa_145s = "\1\167\7\0\2\uffff";
    static final String dfa_146s = "\10\uffff\1\2\1\1";
    static final String dfa_147s = "\1\uffff\1\1\1\3\1\4\1\6\1\2\1\0\1\5\2\uffff}>";
    static final String[] dfa_148s = {
            "\3\10\1\6\1\10\1\7\12\10\1\uffff\32\10\1\uffff\3\10\1\uffff\3\10\6\uffff\4\10\1\1\1\2\1\3\1\4\1\5\46\10\1\uffff\13\10",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    static final short[] dfa_143 = DFA.unpackEncodedString(dfa_143s);
    static final char[] dfa_144 = DFA.unpackEncodedStringToUnsignedChars(dfa_144s);
    static final char[] dfa_145 = DFA.unpackEncodedStringToUnsignedChars(dfa_145s);
    static final short[] dfa_146 = DFA.unpackEncodedString(dfa_146s);
    static final short[] dfa_147 = DFA.unpackEncodedString(dfa_147s);
    static final short[][] dfa_148 = unpackEncodedStringArray(dfa_148s);

    class DFA186 extends DFA {

        public DFA186(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 186;
            this.eot = dfa_76;
            this.eof = dfa_143;
            this.min = dfa_144;
            this.max = dfa_145;
            this.accept = dfa_146;
            this.special = dfa_147;
            this.transition = dfa_148;
        }
        public String getDescription() {
            return "15186:2: ( rule__XAssignment__Group_1_1__0 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA186_6 = input.LA(1);

                         
                        int index186_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index186_6);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA186_1 = input.LA(1);

                         
                        int index186_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index186_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA186_5 = input.LA(1);

                         
                        int index186_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index186_5);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA186_2 = input.LA(1);

                         
                        int index186_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index186_2);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA186_3 = input.LA(1);

                         
                        int index186_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index186_3);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA186_7 = input.LA(1);

                         
                        int index186_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index186_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA186_4 = input.LA(1);

                         
                        int index186_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index186_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 186, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_149s = "\155\uffff";
    static final String dfa_150s = "\1\2\154\uffff";
    static final String dfa_151s = "\1\4\1\0\153\uffff";
    static final String dfa_152s = "\1\167\1\0\153\uffff";
    static final String dfa_153s = "\2\uffff\1\2\151\uffff\1\1";
    static final String dfa_154s = "\1\uffff\1\0\153\uffff}>";
    static final String[] dfa_155s = {
            "\10\2\1\1\7\2\1\uffff\32\2\1\uffff\3\2\1\uffff\3\2\6\uffff\57\2\1\uffff\13\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_149 = DFA.unpackEncodedString(dfa_149s);
    static final short[] dfa_150 = DFA.unpackEncodedString(dfa_150s);
    static final char[] dfa_151 = DFA.unpackEncodedStringToUnsignedChars(dfa_151s);
    static final char[] dfa_152 = DFA.unpackEncodedStringToUnsignedChars(dfa_152s);
    static final short[] dfa_153 = DFA.unpackEncodedString(dfa_153s);
    static final short[] dfa_154 = DFA.unpackEncodedString(dfa_154s);
    static final short[][] dfa_155 = unpackEncodedStringArray(dfa_155s);

    class DFA198 extends DFA {

        public DFA198(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 198;
            this.eot = dfa_149;
            this.eof = dfa_150;
            this.min = dfa_151;
            this.max = dfa_152;
            this.accept = dfa_153;
            this.special = dfa_154;
            this.transition = dfa_155;
        }
        public String getDescription() {
            return "17009:2: ( rule__XConstructorCall__Group_1__0 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA198_1 = input.LA(1);

                         
                        int index198_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index198_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 198, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_156s = {
            "\3\2\1\1\14\2\1\uffff\32\2\1\uffff\3\2\1\uffff\3\2\6\uffff\57\2\1\uffff\13\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_156 = unpackEncodedStringArray(dfa_156s);

    class DFA200 extends DFA {

        public DFA200(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 200;
            this.eot = dfa_149;
            this.eof = dfa_150;
            this.min = dfa_151;
            this.max = dfa_152;
            this.accept = dfa_153;
            this.special = dfa_154;
            this.transition = dfa_156;
        }
        public String getDescription() {
            return "17280:2: ( rule__XbaseConstructorCall__Group_3__0 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA200_1 = input.LA(1);

                         
                        int index200_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index200_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 200, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_157s = {
            "\15\2\1\1\2\2\1\uffff\32\2\1\uffff\3\2\1\uffff\3\2\6\uffff\57\2\1\uffff\13\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_157 = unpackEncodedStringArray(dfa_157s);

    class DFA201 extends DFA {

        public DFA201(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 201;
            this.eot = dfa_149;
            this.eof = dfa_150;
            this.min = dfa_151;
            this.max = dfa_152;
            this.accept = dfa_153;
            this.special = dfa_154;
            this.transition = dfa_157;
        }
        public String getDescription() {
            return "17307:2: ( rule__XbaseConstructorCall__Group_4__0 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA201_1 = input.LA(1);

                         
                        int index201_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index201_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 201, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_158s = {
            "\20\2\1\uffff\32\2\1\uffff\3\2\1\uffff\3\2\6\uffff\2\2\1\1\54\2\1\uffff\13\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_158 = unpackEncodedStringArray(dfa_158s);

    class DFA202 extends DFA {

        public DFA202(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 202;
            this.eot = dfa_149;
            this.eof = dfa_150;
            this.min = dfa_151;
            this.max = dfa_152;
            this.accept = dfa_153;
            this.special = dfa_154;
            this.transition = dfa_158;
        }
        public String getDescription() {
            return "17333:2: ( rule__XbaseConstructorCall__ArgumentsAssignment_5 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA202_1 = input.LA(1);

                         
                        int index202_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index202_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 202, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_159s = "\73\uffff";
    static final String dfa_160s = "\1\4\10\0\1\uffff\26\0\33\uffff";
    static final String dfa_161s = "\1\163\10\0\1\uffff\26\0\33\uffff";
    static final String dfa_162s = "\11\uffff\1\1\26\uffff\1\2\32\uffff";
    static final String dfa_163s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\uffff\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\33\uffff}>";
    static final String[] dfa_164s = {
            "\1\25\1\uffff\1\13\1\40\2\uffff\1\17\1\21\1\40\1\uffff\1\23\1\16\1\4\1\10\1\uffff\1\11\1\uffff\1\1\1\32\1\40\1\uffff\1\26\1\27\1\30\1\12\1\31\1\15\1\20\1\33\1\34\1\35\1\36\1\37\2\uffff\1\14\1\24\1\3\1\uffff\1\5\1\6\1\7\1\22\2\uffff\1\40\2\uffff\1\40\11\uffff\2\40\23\uffff\2\40\4\uffff\1\40\5\uffff\1\40\1\uffff\12\40\2\uffff\1\2\6\40",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_159 = DFA.unpackEncodedString(dfa_159s);
    static final char[] dfa_160 = DFA.unpackEncodedStringToUnsignedChars(dfa_160s);
    static final char[] dfa_161 = DFA.unpackEncodedStringToUnsignedChars(dfa_161s);
    static final short[] dfa_162 = DFA.unpackEncodedString(dfa_162s);
    static final short[] dfa_163 = DFA.unpackEncodedString(dfa_163s);
    static final short[][] dfa_164 = unpackEncodedStringArray(dfa_164s);

    class DFA213 extends DFA {

        public DFA213(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 213;
            this.eot = dfa_159;
            this.eof = dfa_159;
            this.min = dfa_160;
            this.max = dfa_161;
            this.accept = dfa_162;
            this.special = dfa_163;
            this.transition = dfa_164;
        }
        public String getDescription() {
            return "18421:2: ( rule__XSwitchExpression__Group_2_1_0__0 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA213_1 = input.LA(1);

                         
                        int index213_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index213_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA213_2 = input.LA(1);

                         
                        int index213_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index213_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA213_3 = input.LA(1);

                         
                        int index213_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index213_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA213_4 = input.LA(1);

                         
                        int index213_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index213_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA213_5 = input.LA(1);

                         
                        int index213_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index213_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA213_6 = input.LA(1);

                         
                        int index213_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index213_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA213_7 = input.LA(1);

                         
                        int index213_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index213_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA213_8 = input.LA(1);

                         
                        int index213_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index213_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA213_10 = input.LA(1);

                         
                        int index213_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index213_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA213_11 = input.LA(1);

                         
                        int index213_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index213_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA213_12 = input.LA(1);

                         
                        int index213_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index213_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA213_13 = input.LA(1);

                         
                        int index213_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index213_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA213_14 = input.LA(1);

                         
                        int index213_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index213_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA213_15 = input.LA(1);

                         
                        int index213_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index213_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA213_16 = input.LA(1);

                         
                        int index213_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index213_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA213_17 = input.LA(1);

                         
                        int index213_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index213_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA213_18 = input.LA(1);

                         
                        int index213_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index213_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA213_19 = input.LA(1);

                         
                        int index213_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index213_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA213_20 = input.LA(1);

                         
                        int index213_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index213_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA213_21 = input.LA(1);

                         
                        int index213_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index213_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA213_22 = input.LA(1);

                         
                        int index213_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index213_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA213_23 = input.LA(1);

                         
                        int index213_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index213_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA213_24 = input.LA(1);

                         
                        int index213_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index213_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA213_25 = input.LA(1);

                         
                        int index213_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index213_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA213_26 = input.LA(1);

                         
                        int index213_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index213_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA213_27 = input.LA(1);

                         
                        int index213_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index213_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA213_28 = input.LA(1);

                         
                        int index213_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index213_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA213_29 = input.LA(1);

                         
                        int index213_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index213_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA213_30 = input.LA(1);

                         
                        int index213_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index213_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA213_31 = input.LA(1);

                         
                        int index213_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index213_31);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 213, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_165s = "\1\2\46\uffff";
    static final String dfa_166s = "\1\4\1\0\45\uffff";
    static final String dfa_167s = "\1\155\1\0\45\uffff";
    static final String dfa_168s = "\2\uffff\1\2\43\uffff\1\1";
    static final String dfa_169s = "\1\uffff\1\0\45\uffff}>";
    static final String[] dfa_170s = {
            "\3\2\1\uffff\1\2\4\uffff\4\2\1\1\2\2\1\uffff\1\2\1\uffff\1\2\1\uffff\21\2\1\uffff\3\2\17\uffff\1\2\2\uffff\1\2\54\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_165 = DFA.unpackEncodedString(dfa_165s);
    static final char[] dfa_166 = DFA.unpackEncodedStringToUnsignedChars(dfa_166s);
    static final char[] dfa_167 = DFA.unpackEncodedStringToUnsignedChars(dfa_167s);
    static final short[] dfa_168 = DFA.unpackEncodedString(dfa_168s);
    static final short[] dfa_169 = DFA.unpackEncodedString(dfa_169s);
    static final short[][] dfa_170 = unpackEncodedStringArray(dfa_170s);

    class DFA226 extends DFA {

        public DFA226(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 226;
            this.eot = dfa_112;
            this.eof = dfa_165;
            this.min = dfa_166;
            this.max = dfa_167;
            this.accept = dfa_168;
            this.special = dfa_169;
            this.transition = dfa_170;
        }
        public String getDescription() {
            return "20337:2: ( rule__XAnnotation__Group_3__0 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA226_1 = input.LA(1);

                         
                        int index226_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred332_InternalXtend()) ) {s = 38;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index226_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 226, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_171s = "\1\1\12\uffff";
    static final String dfa_172s = "\1\4\1\uffff\10\0\1\uffff";
    static final String dfa_173s = "\1\167\1\uffff\10\0\1\uffff";
    static final String dfa_174s = "\1\uffff\1\2\10\uffff\1\1";
    static final String dfa_175s = "\2\uffff\1\0\1\6\1\4\1\5\1\2\1\1\1\7\1\3\1\uffff}>";
    static final String[] dfa_176s = {
            "\3\1\1\2\1\1\1\3\11\1\1\4\1\uffff\32\1\1\uffff\3\1\1\uffff\3\1\6\uffff\21\1\1\5\1\6\1\7\1\10\1\11\31\1\1\uffff\13\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    static final short[] dfa_171 = DFA.unpackEncodedString(dfa_171s);
    static final char[] dfa_172 = DFA.unpackEncodedStringToUnsignedChars(dfa_172s);
    static final char[] dfa_173 = DFA.unpackEncodedStringToUnsignedChars(dfa_173s);
    static final short[] dfa_174 = DFA.unpackEncodedString(dfa_174s);
    static final short[] dfa_175 = DFA.unpackEncodedString(dfa_175s);
    static final short[][] dfa_176 = unpackEncodedStringArray(dfa_176s);

    class DFA240 extends DFA {

        public DFA240(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 240;
            this.eot = dfa_88;
            this.eof = dfa_171;
            this.min = dfa_172;
            this.max = dfa_173;
            this.accept = dfa_174;
            this.special = dfa_175;
            this.transition = dfa_176;
        }
        public String getDescription() {
            return "()* loopback of 22585:2: ( rule__XOtherOperatorExpression__Group_1__0 )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA240_2 = input.LA(1);

                         
                        int index240_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred346_InternalXtend()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index240_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA240_7 = input.LA(1);

                         
                        int index240_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred346_InternalXtend()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index240_7);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA240_6 = input.LA(1);

                         
                        int index240_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred346_InternalXtend()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index240_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA240_9 = input.LA(1);

                         
                        int index240_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred346_InternalXtend()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index240_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA240_4 = input.LA(1);

                         
                        int index240_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred346_InternalXtend()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index240_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA240_5 = input.LA(1);

                         
                        int index240_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred346_InternalXtend()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index240_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA240_3 = input.LA(1);

                         
                        int index240_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred346_InternalXtend()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index240_3);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA240_8 = input.LA(1);

                         
                        int index240_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred346_InternalXtend()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index240_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 240, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA247 extends DFA {

        public DFA247(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 247;
            this.eot = dfa_149;
            this.eof = dfa_150;
            this.min = dfa_151;
            this.max = dfa_152;
            this.accept = dfa_153;
            this.special = dfa_154;
            this.transition = dfa_157;
        }
        public String getDescription() {
            return "24179:2: ( rule__XMemberFeatureCall__Group_1_1_3__0 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA247_1 = input.LA(1);

                         
                        int index247_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred353_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index247_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 247, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA248 extends DFA {

        public DFA248(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 248;
            this.eot = dfa_149;
            this.eof = dfa_150;
            this.min = dfa_151;
            this.max = dfa_152;
            this.accept = dfa_153;
            this.special = dfa_154;
            this.transition = dfa_158;
        }
        public String getDescription() {
            return "24205:2: ( rule__XMemberFeatureCall__MemberCallArgumentsAssignment_1_1_4 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA248_1 = input.LA(1);

                         
                        int index248_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred354_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index248_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 248, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_177s = "\77\uffff";
    static final String dfa_178s = "\1\4\10\0\1\uffff\26\0\37\uffff";
    static final String dfa_179s = "\1\163\10\0\1\uffff\26\0\37\uffff";
    static final String dfa_180s = "\11\uffff\1\1\27\uffff\1\2\35\uffff";
    static final String dfa_181s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\uffff\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\37\uffff}>";
    static final String[] dfa_182s = {
            "\1\25\1\uffff\1\13\1\41\2\uffff\1\17\1\21\1\41\1\uffff\1\23\1\16\1\4\1\10\1\uffff\1\11\1\uffff\1\1\1\32\1\41\1\uffff\1\26\1\27\1\30\1\12\1\31\1\15\1\20\1\33\1\34\1\35\1\36\1\37\2\41\1\14\1\24\1\3\1\uffff\1\5\1\6\1\7\1\22\2\uffff\1\41\1\uffff\1\11\1\41\11\uffff\3\41\22\uffff\2\41\4\uffff\1\41\5\uffff\1\41\1\uffff\12\41\2\uffff\1\2\6\41",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_177 = DFA.unpackEncodedString(dfa_177s);
    static final char[] dfa_178 = DFA.unpackEncodedStringToUnsignedChars(dfa_178s);
    static final char[] dfa_179 = DFA.unpackEncodedStringToUnsignedChars(dfa_179s);
    static final short[] dfa_180 = DFA.unpackEncodedString(dfa_180s);
    static final short[] dfa_181 = DFA.unpackEncodedString(dfa_181s);
    static final short[][] dfa_182 = unpackEncodedStringArray(dfa_182s);

    class DFA256 extends DFA {

        public DFA256(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 256;
            this.eot = dfa_177;
            this.eof = dfa_177;
            this.min = dfa_178;
            this.max = dfa_179;
            this.accept = dfa_180;
            this.special = dfa_181;
            this.transition = dfa_182;
        }
        public String getDescription() {
            return "25178:2: ( rule__XClosure__Group_1__0 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA256_1 = input.LA(1);

                         
                        int index256_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index256_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA256_2 = input.LA(1);

                         
                        int index256_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index256_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA256_3 = input.LA(1);

                         
                        int index256_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index256_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA256_4 = input.LA(1);

                         
                        int index256_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index256_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA256_5 = input.LA(1);

                         
                        int index256_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index256_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA256_6 = input.LA(1);

                         
                        int index256_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index256_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA256_7 = input.LA(1);

                         
                        int index256_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index256_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA256_8 = input.LA(1);

                         
                        int index256_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index256_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA256_10 = input.LA(1);

                         
                        int index256_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index256_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA256_11 = input.LA(1);

                         
                        int index256_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index256_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA256_12 = input.LA(1);

                         
                        int index256_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index256_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA256_13 = input.LA(1);

                         
                        int index256_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index256_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA256_14 = input.LA(1);

                         
                        int index256_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index256_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA256_15 = input.LA(1);

                         
                        int index256_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index256_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA256_16 = input.LA(1);

                         
                        int index256_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index256_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA256_17 = input.LA(1);

                         
                        int index256_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index256_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA256_18 = input.LA(1);

                         
                        int index256_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index256_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA256_19 = input.LA(1);

                         
                        int index256_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index256_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA256_20 = input.LA(1);

                         
                        int index256_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index256_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA256_21 = input.LA(1);

                         
                        int index256_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index256_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA256_22 = input.LA(1);

                         
                        int index256_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index256_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA256_23 = input.LA(1);

                         
                        int index256_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index256_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA256_24 = input.LA(1);

                         
                        int index256_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index256_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA256_25 = input.LA(1);

                         
                        int index256_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index256_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA256_26 = input.LA(1);

                         
                        int index256_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index256_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA256_27 = input.LA(1);

                         
                        int index256_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index256_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA256_28 = input.LA(1);

                         
                        int index256_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index256_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA256_29 = input.LA(1);

                         
                        int index256_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index256_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA256_30 = input.LA(1);

                         
                        int index256_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index256_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA256_31 = input.LA(1);

                         
                        int index256_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index256_31);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 256, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA272 extends DFA {

        public DFA272(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 272;
            this.eot = dfa_149;
            this.eof = dfa_150;
            this.min = dfa_151;
            this.max = dfa_152;
            this.accept = dfa_153;
            this.special = dfa_154;
            this.transition = dfa_157;
        }
        public String getDescription() {
            return "27581:2: ( rule__XFeatureCall__Group_3__0 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA272_1 = input.LA(1);

                         
                        int index272_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred378_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index272_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 272, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA273 extends DFA {

        public DFA273(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 273;
            this.eot = dfa_149;
            this.eof = dfa_150;
            this.min = dfa_151;
            this.max = dfa_152;
            this.accept = dfa_153;
            this.special = dfa_154;
            this.transition = dfa_158;
        }
        public String getDescription() {
            return "27607:2: ( rule__XFeatureCall__FeatureCallArgumentsAssignment_4 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA273_1 = input.LA(1);

                         
                        int index273_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred379_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index273_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 273, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_183s = "\1\72\154\uffff";
    static final String dfa_184s = "\1\4\71\0\63\uffff";
    static final String dfa_185s = "\1\167\71\0\63\uffff";
    static final String dfa_186s = "\72\uffff\1\2\61\uffff\1\1";
    static final String dfa_187s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\63\uffff}>";
    static final String[] dfa_188s = {
            "\1\17\1\72\1\4\1\44\2\72\1\11\1\13\1\42\1\72\1\15\1\10\1\3\1\71\2\72\1\uffff\1\35\1\24\1\41\1\72\1\20\1\21\1\22\1\2\1\23\1\7\1\12\1\25\1\26\1\27\1\30\1\31\2\72\1\6\1\16\1\5\1\72\1\32\1\33\1\34\1\14\1\uffff\1\72\1\70\1\72\1\uffff\1\43\2\72\6\uffff\1\72\1\46\1\47\23\72\1\40\1\37\4\72\1\36\5\72\1\62\1\72\1\63\1\64\1\65\1\45\1\50\1\51\1\55\1\61\1\66\1\67\1\72\1\uffff\1\1\1\52\1\53\1\54\1\56\1\57\1\60\4\72",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_183 = DFA.unpackEncodedString(dfa_183s);
    static final char[] dfa_184 = DFA.unpackEncodedStringToUnsignedChars(dfa_184s);
    static final char[] dfa_185 = DFA.unpackEncodedStringToUnsignedChars(dfa_185s);
    static final short[] dfa_186 = DFA.unpackEncodedString(dfa_186s);
    static final short[] dfa_187 = DFA.unpackEncodedString(dfa_187s);
    static final short[][] dfa_188 = unpackEncodedStringArray(dfa_188s);

    class DFA278 extends DFA {

        public DFA278(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 278;
            this.eot = dfa_149;
            this.eof = dfa_183;
            this.min = dfa_184;
            this.max = dfa_185;
            this.accept = dfa_186;
            this.special = dfa_187;
            this.transition = dfa_188;
        }
        public String getDescription() {
            return "28444:2: ( rule__XReturnExpression__ExpressionAssignment_2 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA278_1 = input.LA(1);

                         
                        int index278_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA278_2 = input.LA(1);

                         
                        int index278_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA278_3 = input.LA(1);

                         
                        int index278_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA278_4 = input.LA(1);

                         
                        int index278_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA278_5 = input.LA(1);

                         
                        int index278_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA278_6 = input.LA(1);

                         
                        int index278_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA278_7 = input.LA(1);

                         
                        int index278_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA278_8 = input.LA(1);

                         
                        int index278_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA278_9 = input.LA(1);

                         
                        int index278_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA278_10 = input.LA(1);

                         
                        int index278_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA278_11 = input.LA(1);

                         
                        int index278_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA278_12 = input.LA(1);

                         
                        int index278_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA278_13 = input.LA(1);

                         
                        int index278_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA278_14 = input.LA(1);

                         
                        int index278_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA278_15 = input.LA(1);

                         
                        int index278_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA278_16 = input.LA(1);

                         
                        int index278_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA278_17 = input.LA(1);

                         
                        int index278_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA278_18 = input.LA(1);

                         
                        int index278_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA278_19 = input.LA(1);

                         
                        int index278_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA278_20 = input.LA(1);

                         
                        int index278_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA278_21 = input.LA(1);

                         
                        int index278_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA278_22 = input.LA(1);

                         
                        int index278_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA278_23 = input.LA(1);

                         
                        int index278_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA278_24 = input.LA(1);

                         
                        int index278_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA278_25 = input.LA(1);

                         
                        int index278_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA278_26 = input.LA(1);

                         
                        int index278_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA278_27 = input.LA(1);

                         
                        int index278_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA278_28 = input.LA(1);

                         
                        int index278_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA278_29 = input.LA(1);

                         
                        int index278_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA278_30 = input.LA(1);

                         
                        int index278_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA278_31 = input.LA(1);

                         
                        int index278_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA278_32 = input.LA(1);

                         
                        int index278_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA278_33 = input.LA(1);

                         
                        int index278_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA278_34 = input.LA(1);

                         
                        int index278_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA278_35 = input.LA(1);

                         
                        int index278_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA278_36 = input.LA(1);

                         
                        int index278_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA278_37 = input.LA(1);

                         
                        int index278_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA278_38 = input.LA(1);

                         
                        int index278_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA278_39 = input.LA(1);

                         
                        int index278_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA278_40 = input.LA(1);

                         
                        int index278_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA278_41 = input.LA(1);

                         
                        int index278_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA278_42 = input.LA(1);

                         
                        int index278_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA278_43 = input.LA(1);

                         
                        int index278_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA278_44 = input.LA(1);

                         
                        int index278_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA278_45 = input.LA(1);

                         
                        int index278_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA278_46 = input.LA(1);

                         
                        int index278_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA278_47 = input.LA(1);

                         
                        int index278_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA278_48 = input.LA(1);

                         
                        int index278_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA278_49 = input.LA(1);

                         
                        int index278_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA278_50 = input.LA(1);

                         
                        int index278_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA278_51 = input.LA(1);

                         
                        int index278_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA278_52 = input.LA(1);

                         
                        int index278_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA278_53 = input.LA(1);

                         
                        int index278_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA278_54 = input.LA(1);

                         
                        int index278_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA278_55 = input.LA(1);

                         
                        int index278_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA278_56 = input.LA(1);

                         
                        int index278_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA278_57 = input.LA(1);

                         
                        int index278_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_InternalXtend()) ) {s = 108;}

                        else if ( (true) ) {s = 58;}

                         
                        input.seek(index278_57);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 278, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_189s = "\1\1\11\uffff";
    static final String dfa_190s = "\1\4\1\uffff\1\4\6\0\1\uffff";
    static final String dfa_191s = "\1\167\1\uffff\1\155\6\0\1\uffff";
    static final String dfa_192s = "\1\uffff\1\2\7\uffff\1\1";
    static final String dfa_193s = "\3\uffff\1\5\1\3\1\4\1\0\1\2\1\1\1\uffff}>";
    static final String[] dfa_194s = {
            "\24\1\1\2\36\1\6\uffff\73\1",
            "",
            "\1\1\1\uffff\2\1\2\uffff\2\1\2\uffff\2\1\1\4\4\uffff\2\1\2\uffff\14\1\2\uffff\2\1\1\5\1\uffff\1\6\1\7\1\10\1\1\46\uffff\1\1\16\uffff\1\1\10\uffff\1\3",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    static final short[] dfa_189 = DFA.unpackEncodedString(dfa_189s);
    static final char[] dfa_190 = DFA.unpackEncodedStringToUnsignedChars(dfa_190s);
    static final char[] dfa_191 = DFA.unpackEncodedStringToUnsignedChars(dfa_191s);
    static final short[] dfa_192 = DFA.unpackEncodedString(dfa_192s);
    static final short[] dfa_193 = DFA.unpackEncodedString(dfa_193s);
    static final short[][] dfa_194 = unpackEncodedStringArray(dfa_194s);

    class DFA279 extends DFA {

        public DFA279(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 279;
            this.eot = dfa_76;
            this.eof = dfa_189;
            this.min = dfa_190;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_194;
        }
        public String getDescription() {
            return "()* loopback of 28849:2: ( rule__QualifiedName__Group_1__0 )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA279_6 = input.LA(1);

                         
                        int index279_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index279_6);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA279_8 = input.LA(1);

                         
                        int index279_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index279_8);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA279_7 = input.LA(1);

                         
                        int index279_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index279_7);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA279_4 = input.LA(1);

                         
                        int index279_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index279_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA279_5 = input.LA(1);

                         
                        int index279_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index279_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA279_3 = input.LA(1);

                         
                        int index279_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index279_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 279, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_195s = "\161\uffff";
    static final String dfa_196s = "\1\2\160\uffff";
    static final String dfa_197s = "\1\4\1\0\157\uffff";
    static final String dfa_198s = "\1\167\1\0\157\uffff";
    static final String dfa_199s = "\2\uffff\1\2\155\uffff\1\1";
    static final String dfa_200s = "\1\uffff\1\0\157\uffff}>";
    static final String[] dfa_201s = {
            "\3\2\1\1\57\2\6\uffff\73\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_195 = DFA.unpackEncodedString(dfa_195s);
    static final short[] dfa_196 = DFA.unpackEncodedString(dfa_196s);
    static final char[] dfa_197 = DFA.unpackEncodedStringToUnsignedChars(dfa_197s);
    static final char[] dfa_198 = DFA.unpackEncodedStringToUnsignedChars(dfa_198s);
    static final short[] dfa_199 = DFA.unpackEncodedString(dfa_199s);
    static final short[] dfa_200 = DFA.unpackEncodedString(dfa_200s);
    static final short[][] dfa_201 = unpackEncodedStringArray(dfa_201s);

    class DFA285 extends DFA {

        public DFA285(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 285;
            this.eot = dfa_195;
            this.eof = dfa_196;
            this.min = dfa_197;
            this.max = dfa_198;
            this.accept = dfa_199;
            this.special = dfa_200;
            this.transition = dfa_201;
        }
        public String getDescription() {
            return "29524:2: ( rule__JvmParameterizedTypeReference__Group_1__0 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA285_1 = input.LA(1);

                         
                        int index285_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred391_InternalXtend()) ) {s = 112;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index285_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 285, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_202s = "\3\uffff\1\2\1\1\1\0\1\3\1\5\1\4\1\uffff}>";
    static final String[] dfa_203s = {
            "\24\1\1\2\36\1\6\uffff\73\1",
            "",
            "\1\1\1\uffff\2\1\2\uffff\2\1\2\uffff\2\1\1\5\4\uffff\2\1\2\uffff\14\1\2\uffff\2\1\1\4\1\uffff\1\6\1\7\1\10\1\1\65\uffff\1\1\10\uffff\1\3",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    static final short[] dfa_202 = DFA.unpackEncodedString(dfa_202s);
    static final short[][] dfa_203 = unpackEncodedStringArray(dfa_203s);

    class DFA287 extends DFA {

        public DFA287(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 287;
            this.eot = dfa_76;
            this.eof = dfa_189;
            this.min = dfa_190;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_202;
            this.transition = dfa_203;
        }
        public String getDescription() {
            return "()* loopback of 29659:2: ( rule__JvmParameterizedTypeReference__Group_1_4__0 )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA287_5 = input.LA(1);

                         
                        int index287_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred393_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index287_5);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA287_4 = input.LA(1);

                         
                        int index287_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred393_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index287_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA287_3 = input.LA(1);

                         
                        int index287_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred393_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index287_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA287_6 = input.LA(1);

                         
                        int index287_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred393_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index287_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA287_8 = input.LA(1);

                         
                        int index287_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred393_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index287_8);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA287_7 = input.LA(1);

                         
                        int index287_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred393_InternalXtend()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index287_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 287, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA288 extends DFA {

        public DFA288(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 288;
            this.eot = dfa_195;
            this.eof = dfa_196;
            this.min = dfa_197;
            this.max = dfa_198;
            this.accept = dfa_199;
            this.special = dfa_200;
            this.transition = dfa_201;
        }
        public String getDescription() {
            return "29794:2: ( rule__JvmParameterizedTypeReference__Group_1_4_2__0 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA288_1 = input.LA(1);

                         
                        int index288_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred394_InternalXtend()) ) {s = 112;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index288_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 288, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_1 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_2 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_3 = new BitSet(new long[]{0x0000400000000002L});
    public static final BitSet FOLLOW_4 = new BitSet(new long[]{0x00003A0000010002L,0x0000200000000000L});
    public static final BitSet FOLLOW_5 = new BitSet(new long[]{0x2000401FFE01C050L});
    public static final BitSet FOLLOW_6 = new BitSet(new long[]{0x2000001FFE01C052L});
    public static final BitSet FOLLOW_7 = new BitSet(new long[]{0x00003A0000010000L,0x0000200000000000L});
    public static final BitSet FOLLOW_8 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_9 = new BitSet(new long[]{0x2000001FFE01C050L});
    public static final BitSet FOLLOW_10 = new BitSet(new long[]{0x2000000000000002L});
    public static final BitSet FOLLOW_11 = new BitSet(new long[]{0x0000001FFE000050L});
    public static final BitSet FOLLOW_12 = new BitSet(new long[]{0x0000001FFE000012L});
    public static final BitSet FOLLOW_13 = new BitSet(new long[]{0x0000000000001C80L});
    public static final BitSet FOLLOW_14 = new BitSet(new long[]{0x20003BFFFEABE050L,0x0000200000000000L});
    public static final BitSet FOLLOW_15 = new BitSet(new long[]{0x20003BFFFEABC052L,0x0000200000000000L});
    public static final BitSet FOLLOW_16 = new BitSet(new long[]{0x0000000000000300L});
    public static final BitSet FOLLOW_17 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_18 = new BitSet(new long[]{0x00003A00000B0000L,0x0000200000000000L});
    public static final BitSet FOLLOW_19 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_20 = new BitSet(new long[]{0x0000001FFE004010L});
    public static final BitSet FOLLOW_21 = new BitSet(new long[]{0x0000000000001480L});
    public static final BitSet FOLLOW_22 = new BitSet(new long[]{0x0000001FFE008010L});
    public static final BitSet FOLLOW_23 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_24 = new BitSet(new long[]{0x20003A0000012020L,0x0000200000000000L});
    public static final BitSet FOLLOW_25 = new BitSet(new long[]{0x20003A0000010000L,0x0000200000000000L});
    public static final BitSet FOLLOW_26 = new BitSet(new long[]{0x20003A7FFE2BE050L,0x0000200000000000L});
    public static final BitSet FOLLOW_27 = new BitSet(new long[]{0x20003A7FFE2BC052L,0x0000200000000000L});
    public static final BitSet FOLLOW_28 = new BitSet(new long[]{0x00003A7FFE2B0010L,0x0000200000000000L});
    public static final BitSet FOLLOW_29 = new BitSet(new long[]{0x00003A7FFE2F0010L,0x0000200000000000L});
    public static final BitSet FOLLOW_30 = new BitSet(new long[]{0x20003A7FFE2BC050L,0x0000200000000000L});
    public static final BitSet FOLLOW_31 = new BitSet(new long[]{0x0000000000100020L});
    public static final BitSet FOLLOW_32 = new BitSet(new long[]{0x0000007FFE000010L});
    public static final BitSet FOLLOW_33 = new BitSet(new long[]{0xE0127B9FFEE3DCD0L,0x000FE7FE82180000L});
    public static final BitSet FOLLOW_34 = new BitSet(new long[]{0x20003BFFFEABC050L,0x0000200000000000L});
    public static final BitSet FOLLOW_35 = new BitSet(new long[]{0x0000007FFE000012L});
    public static final BitSet FOLLOW_36 = new BitSet(new long[]{0x0000001FFE200010L});
    public static final BitSet FOLLOW_37 = new BitSet(new long[]{0x0000019FFE000010L});
    public static final BitSet FOLLOW_38 = new BitSet(new long[]{0x00003BFFFE2B0290L,0x000020001BFFDFFEL});
    public static final BitSet FOLLOW_39 = new BitSet(new long[]{0x0000019FFE000012L});
    public static final BitSet FOLLOW_40 = new BitSet(new long[]{0x20003A7FFE2F0010L,0x0000200000000000L});
    public static final BitSet FOLLOW_41 = new BitSet(new long[]{0x0000000000401020L,0x000E000000000000L});
    public static final BitSet FOLLOW_42 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_43 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_44 = new BitSet(new long[]{0x20003A7FFE2B0010L,0x0000200000000000L});
    public static final BitSet FOLLOW_45 = new BitSet(new long[]{0x0000001FFE800010L});
    public static final BitSet FOLLOW_46 = new BitSet(new long[]{0x0000000000020080L});
    public static final BitSet FOLLOW_47 = new BitSet(new long[]{0x0000000000401000L});
    public static final BitSet FOLLOW_48 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_49 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_50 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_51 = new BitSet(new long[]{0x00013A7FFE2B0010L,0x0000200000000000L});
    public static final BitSet FOLLOW_52 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_53 = new BitSet(new long[]{0x0000000001000002L});
    public static final BitSet FOLLOW_54 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_55 = new BitSet(new long[]{0x0000BA0000010000L,0x0000200000000000L});
    public static final BitSet FOLLOW_56 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_57 = new BitSet(new long[]{0x00007B9FFE61CC50L,0x0000200000000000L});
    public static final BitSet FOLLOW_58 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_59 = new BitSet(new long[]{0x0000000000000280L,0x000000000000003EL});
    public static final BitSet FOLLOW_60 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_61 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_62 = new BitSet(new long[]{0x0000006000200000L});
    public static final BitSet FOLLOW_63 = new BitSet(new long[]{0x0000000000040020L});
    public static final BitSet FOLLOW_64 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_65 = new BitSet(new long[]{0x0004000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_66 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_67 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L});
    public static final BitSet FOLLOW_68 = new BitSet(new long[]{0x00007BFFFE6BCC50L,0x0000200000000000L});
    public static final BitSet FOLLOW_69 = new BitSet(new long[]{0x00007B9FFE41CC50L,0x0000200000000000L});
    public static final BitSet FOLLOW_70 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_71 = new BitSet(new long[]{0x0000006000000000L});
    public static final BitSet FOLLOW_72 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_73 = new BitSet(new long[]{0x8000000000020080L});
    public static final BitSet FOLLOW_74 = new BitSet(new long[]{0xE01A7BFFFEEFDCD0L,0x000FE7FE82180000L});
    public static final BitSet FOLLOW_75 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_76 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_77 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_78 = new BitSet(new long[]{0xE0127BFFFEEBDCD0L,0x000FE7FE82180000L});
    public static final BitSet FOLLOW_79 = new BitSet(new long[]{0x00603E7FFE2B2110L,0x0000200000000000L});
    public static final BitSet FOLLOW_80 = new BitSet(new long[]{0x00403E7FFE2B0112L,0x0000200000000000L});
    public static final BitSet FOLLOW_81 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_82 = new BitSet(new long[]{0x00403E7FFE2B0110L,0x0000200000000000L});
    public static final BitSet FOLLOW_83 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_84 = new BitSet(new long[]{0x0000000000000000L,0x000E000000000000L});
    public static final BitSet FOLLOW_85 = new BitSet(new long[]{0xE2927BFFFEE3DCD0L,0x00FFE7FE82180000L});
    public static final BitSet FOLLOW_86 = new BitSet(new long[]{0x0000000000000002L,0x0030000000000000L});
    public static final BitSet FOLLOW_87 = new BitSet(new long[]{0xE2927BFFFEE3DCD0L,0x000FE7FE82180000L});
    public static final BitSet FOLLOW_88 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_89 = new BitSet(new long[]{0x0000000000000000L,0x0030000000000000L});
    public static final BitSet FOLLOW_90 = new BitSet(new long[]{0xE2927BFFFEE3DCD0L,0x003FE7FE82180000L});
    public static final BitSet FOLLOW_91 = new BitSet(new long[]{0xE2927BFFFEE3DCD2L,0x003FE7FE82180000L});
    public static final BitSet FOLLOW_92 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_93 = new BitSet(new long[]{0x0000380000000000L,0x0030000000000000L});
    public static final BitSet FOLLOW_94 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_95 = new BitSet(new long[]{0x1C00000000000000L});
    public static final BitSet FOLLOW_96 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_97 = new BitSet(new long[]{0xE0127B9FFEE7DCD0L,0x000FE7FE82180000L});
    public static final BitSet FOLLOW_98 = new BitSet(new long[]{0xE0127B9FFEE3DCD0L,0x000FE7FE82180001L});
    public static final BitSet FOLLOW_99 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_100 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000040L});
    public static final BitSet FOLLOW_101 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_102 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000080L});
    public static final BitSet FOLLOW_103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_104 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_105 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001E00L});
    public static final BitSet FOLLOW_106 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001E00L});
    public static final BitSet FOLLOW_107 = new BitSet(new long[]{0x0000000000000280L,0x0000000000002040L});
    public static final BitSet FOLLOW_108 = new BitSet(new long[]{0x0000000000000282L,0x0000000000002040L});
    public static final BitSet FOLLOW_109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_110 = new BitSet(new long[]{0x0000000000080280L,0x000000000007C000L});
    public static final BitSet FOLLOW_111 = new BitSet(new long[]{0x0000000000080282L,0x000000000007C000L});
    public static final BitSet FOLLOW_112 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_113 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_114 = new BitSet(new long[]{0x0000000000080080L});
    public static final BitSet FOLLOW_115 = new BitSet(new long[]{0x0000000000000000L,0x0000000000180000L});
    public static final BitSet FOLLOW_116 = new BitSet(new long[]{0x0000000000000002L,0x0000000000180000L});
    public static final BitSet FOLLOW_117 = new BitSet(new long[]{0x0000000000000000L,0x0000000001E00000L});
    public static final BitSet FOLLOW_118 = new BitSet(new long[]{0x0000000000000002L,0x0000000001E00000L});
    public static final BitSet FOLLOW_119 = new BitSet(new long[]{0x0000000000000000L,0x0000000002180000L});
    public static final BitSet FOLLOW_120 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_121 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
    public static final BitSet FOLLOW_122 = new BitSet(new long[]{0x0000000001000000L,0x0000000060000000L});
    public static final BitSet FOLLOW_123 = new BitSet(new long[]{0x0000000001000002L,0x0000000060000000L});
    public static final BitSet FOLLOW_124 = new BitSet(new long[]{0x0000000001000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_125 = new BitSet(new long[]{0x00007B9FFE61CCD0L,0x0000201000000000L});
    public static final BitSet FOLLOW_126 = new BitSet(new long[]{0x8000000000020000L});
    public static final BitSet FOLLOW_127 = new BitSet(new long[]{0xE0127B9FFEE3FCD0L,0x000FE7FE82180000L});
    public static final BitSet FOLLOW_128 = new BitSet(new long[]{0xE01A7BFFFEEBDCD0L,0x000FE7FE82180000L});
    public static final BitSet FOLLOW_129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_130 = new BitSet(new long[]{0x00087BFFFE6BCC50L,0x0000200000000000L});
    public static final BitSet FOLLOW_131 = new BitSet(new long[]{0xE0127BFFFEE3DCD2L,0x000FE7FE82180000L});
    public static final BitSet FOLLOW_132 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_133 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_134 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_135 = new BitSet(new long[]{0xE0127BFFFEE3DCF0L,0x000FE7FE82180000L});
    public static final BitSet FOLLOW_136 = new BitSet(new long[]{0xE0127B9FFEE3DCF0L,0x000FE7FE82180000L});
    public static final BitSet FOLLOW_137 = new BitSet(new long[]{0xE0127BFFFEE3DCD0L,0x000FE7FE82180000L});
    public static final BitSet FOLLOW_138 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_139 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_140 = new BitSet(new long[]{0xE0127BFFFEE3FCD0L,0x000FE7FE82180000L});
    public static final BitSet FOLLOW_141 = new BitSet(new long[]{0x0000000000000000L,0x0000006000000000L});
    public static final BitSet FOLLOW_142 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_143 = new BitSet(new long[]{0x0000000000000000L,0x0001C00000000000L});
    public static final BitSet FOLLOW_144 = new BitSet(new long[]{0xC000000000000000L,0x000FC1E000000000L});
    public static final BitSet FOLLOW_145 = new BitSet(new long[]{0x8000000000040000L});
    public static final BitSet FOLLOW_146 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_147 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_148 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_149 = new BitSet(new long[]{0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_150 = new BitSet(new long[]{0x0000000000000400L,0x0000001000000000L});
    public static final BitSet FOLLOW_151 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_152 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
    public static final BitSet FOLLOW_153 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_154 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_155 = new BitSet(new long[]{0x00003A0020010000L,0x0000200000000000L});
    public static final BitSet FOLLOW_156 = new BitSet(new long[]{0x00003A0000210000L,0x0000200000000000L});
    public static final BitSet FOLLOW_157 = new BitSet(new long[]{0x00003A0000010000L,0x0000200000200000L});

}