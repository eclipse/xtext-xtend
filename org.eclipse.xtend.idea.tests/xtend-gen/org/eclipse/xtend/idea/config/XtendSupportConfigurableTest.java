/**
 * Copyright (c) 2015 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package org.eclipse.xtend.idea.config;

/**
 * @author dhuebner - Initial contribution and API
 */
@SuppressWarnings("all")
public class XtendSupportConfigurableTest /* implements PsiTestCase  */{
  public Object testPlainJavaOutputConfiguration_01() {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field ModuleRootManager is undefined"
      + "\nThe method or field myModule is undefined"
      + "\nThe method assertEquals(int, Object) is undefined"
      + "\nThe method or field myModule is undefined"
      + "\nThe method assertEquals(int, Object) is undefined"
      + "\nThe method or field FacetManager is undefined"
      + "\nThe method or field myModule is undefined"
      + "\nThe method or field XtendFacetType is undefined"
      + "\nThe method assertNotNull(Object) is undefined"
      + "\nThe method assertTrue(Object) is undefined"
      + "\nThe method assertTrue(Object) is undefined"
      + "\nThe method assertEquals(int, Object) is undefined"
      + "\nThe method addFrameworkSupport(Module) from the type XtendSupportConfigurableTest refers to the missing type Module"
      + "\ngetInstance cannot be resolved"
      + "\ncontentRoots cannot be resolved"
      + "\nsize cannot be resolved"
      + "\ncontentRoots cannot be resolved"
      + "\nsize cannot be resolved"
      + "\ngetInstance cannot be resolved"
      + "\ngetFacetsByType cannot be resolved"
      + "\nTYPEID cannot be resolved"
      + "\nhead cannot be resolved"
      + "\nconfiguration cannot be resolved"
      + "\nstate cannot be resolved"
      + "\noutputDirectory cannot be resolved"
      + "\nendsWith cannot be resolved"
      + "\ntestOutputDirectory cannot be resolved"
      + "\nendsWith cannot be resolved"
      + "\ncontentEntries cannot be resolved"
      + "\nhead cannot be resolved"
      + "\nsourceFolders cannot be resolved"
      + "\nfilter cannot be resolved"
      + "\nfile cannot be resolved"
      + "\npath cannot be resolved"
      + "\nreplace cannot be resolved"
      + "\noutputDirectory cannot be resolved"
      + "\n== cannot be resolved"
      + "\n&& cannot be resolved"
      + "\ntestSource cannot be resolved"
      + "\n! cannot be resolved"
      + "\nsize cannot be resolved");
  }
  
  public Object testPlainJavaOutputConfiguration_02() {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field WriteCommandAction is undefined"
      + "\nThe method or field project is undefined"
      + "\nThe method createModule(String) is undefined"
      + "\nThe method or field VfsUtil is undefined"
      + "\nThe method or field VfsUtil is undefined"
      + "\nThe method or field VfsUtil is undefined"
      + "\nThe method or field PsiTestUtil is undefined"
      + "\nThe method or field PsiTestUtil is undefined"
      + "\nThe method or field PsiTestUtil is undefined"
      + "\nThe method or field ModuleRootManager is undefined"
      + "\nThe method assertEquals(int, Object) is undefined"
      + "\nThe method or field FacetManager is undefined"
      + "\nThe method or field XtendFacetType is undefined"
      + "\nThe method assertNotNull(Object) is undefined"
      + "\nThe method assertFalse(Object) is undefined"
      + "\nThe method assertTrue(Object) is undefined"
      + "\nThe method assertTrue(Object) is undefined"
      + "\nThe method or field ModuleRootManager is undefined"
      + "\nThe method assertEquals(int, Object) is undefined"
      + "\nThe method or field path is undefined"
      + "\nThe method assertEquals(int, Object) is undefined"
      + "\nThe method or field path is undefined"
      + "\nModule cannot be resolved to a type."
      + "\nThe method addFrameworkSupport(Module) from the type XtendSupportConfigurableTest refers to the missing type Module"
      + "\nrunWriteCommandAction cannot be resolved"
      + "\ncreateDirectoryIfMissing cannot be resolved"
      + "\nproject cannot be resolved"
      + "\nbaseDir cannot be resolved"
      + "\nname cannot be resolved"
      + "\ncreateDirectoryIfMissing cannot be resolved"
      + "\ncreateDirectoryIfMissing cannot be resolved"
      + "\naddContentRoot cannot be resolved"
      + "\naddSourceRoot cannot be resolved"
      + "\naddSourceRoot cannot be resolved"
      + "\ngetInstance cannot be resolved"
      + "\ngetSourceRoots cannot be resolved"
      + "\nsize cannot be resolved"
      + "\ngetInstance cannot be resolved"
      + "\ngetFacetsByType cannot be resolved"
      + "\nTYPEID cannot be resolved"
      + "\nhead cannot be resolved"
      + "\nconfiguration cannot be resolved"
      + "\nstate cannot be resolved"
      + "\noutputDirectory cannot be resolved"
      + "\n== cannot be resolved"
      + "\ntestOutputDirectory cannot be resolved"
      + "\noutputDirectory cannot be resolved"
      + "\nendsWith cannot be resolved"
      + "\ntestOutputDirectory cannot be resolved"
      + "\nendsWith cannot be resolved"
      + "\ngetInstance cannot be resolved"
      + "\ngetSourceRoots cannot be resolved"
      + "\nfilter cannot be resolved"
      + "\nreplace cannot be resolved"
      + "\noutputDirectory cannot be resolved"
      + "\n== cannot be resolved"
      + "\nsize cannot be resolved"
      + "\nfilter cannot be resolved"
      + "\nreplace cannot be resolved"
      + "\ntestOutputDirectory cannot be resolved"
      + "\n== cannot be resolved"
      + "\nsize cannot be resolved");
  }
  
  public Object testPlainJavaOutputConfiguration_03() {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field ModuleRootManager is undefined"
      + "\nThe method or field myModule is undefined"
      + "\nThe method assertEquals(int, Object) is undefined"
      + "\nThe method or field myModule is undefined"
      + "\nThe method assertEquals(int, Object) is undefined"
      + "\nThe method or field FacetManager is undefined"
      + "\nThe method or field myModule is undefined"
      + "\nThe method or field XtendFacetType is undefined"
      + "\nThe method assertNotNull(Object) is undefined"
      + "\nThe method assertTrue(Object) is undefined"
      + "\nThe method assertTrue(Object) is undefined"
      + "\nThe method assertEquals(int, Object) is undefined"
      + "\nThe method addFrameworkSupportUsingDetector(Module) from the type XtendSupportConfigurableTest refers to the missing type Module"
      + "\ngetInstance cannot be resolved"
      + "\ncontentRoots cannot be resolved"
      + "\nsize cannot be resolved"
      + "\ncontentRoots cannot be resolved"
      + "\nsize cannot be resolved"
      + "\ngetInstance cannot be resolved"
      + "\ngetFacetsByType cannot be resolved"
      + "\nTYPEID cannot be resolved"
      + "\nhead cannot be resolved"
      + "\nconfiguration cannot be resolved"
      + "\nstate cannot be resolved"
      + "\noutputDirectory cannot be resolved"
      + "\nendsWith cannot be resolved"
      + "\ntestOutputDirectory cannot be resolved"
      + "\nendsWith cannot be resolved"
      + "\ncontentEntries cannot be resolved"
      + "\nhead cannot be resolved"
      + "\nsourceFolders cannot be resolved"
      + "\nfilter cannot be resolved"
      + "\nfile cannot be resolved"
      + "\npath cannot be resolved"
      + "\nreplace cannot be resolved"
      + "\noutputDirectory cannot be resolved"
      + "\n== cannot be resolved"
      + "\n&& cannot be resolved"
      + "\ntestSource cannot be resolved"
      + "\n! cannot be resolved"
      + "\nsize cannot be resolved");
  }
  
  protected void addFrameworkSupportUsingDetector(final /* Module */Object moduleToHandle) {
    throw new Error("Unresolved compilation problems:"
      + "\nFacetBasedFrameworkDetector cannot be resolved to a type."
      + "\nWriteCommandAction.Simple cannot be resolved."
      + "\nThe method getProject() is undefined"
      + "\nIdeaModifiableModelsProvider cannot be resolved."
      + "\nThe method or field FacetTypeRegistry is undefined"
      + "\nThe method or field XtendFacetType is undefined"
      + "\nThe method or field FrameworkDetectorRegistry is undefined"
      + "\nThe method or field XtendFileType is undefined"
      + "\nThe method or field FrameworkDetectorRegistry is undefined"
      + "\nThe method or field FacetManager is undefined"
      + "\nThe method run() of type new Object(){} must override a superclass method."
      + "\nThe method createContentRoot(Module) from the type XtendSupportConfigurableTest refers to the missing type Object"
      + "\nexecute cannot be resolved"
      + "\nthrowException cannot be resolved"
      + "\ngetFacetModifiableModel cannot be resolved"
      + "\ninstance cannot be resolved"
      + "\nfindFacetType cannot be resolved"
      + "\nTYPEID cannot be resolved"
      + "\ntoString cannot be resolved"
      + "\ncreateDefaultConfiguration cannot be resolved"
      + "\ninstance cannot be resolved"
      + "\ngetDetectorIds cannot be resolved"
      + "\nINSTANCE cannot be resolved"
      + "\nhead cannot be resolved"
      + "\ninstance cannot be resolved"
      + "\ngetDetectorById cannot be resolved"
      + "\ngetInstance cannot be resolved"
      + "\ncreateFacet cannot be resolved"
      + "\ngetDefaultFacetName cannot be resolved"
      + "\naddFacet cannot be resolved"
      + "\ncommitFacetModifiableModel cannot be resolved"
      + "\ngetModuleModifiableModel cannot be resolved"
      + "\nsetupFacet cannot be resolved"
      + "\ncommitModuleModifiableModel cannot be resolved"
      + "\ncommit cannot be resolved");
  }
  
  protected Object createContentRoot(final /* Module */Object moduleToHandle) {
    throw new Error("Unresolved compilation problems:"
      + "\nVirtualFile cannot be resolved to a type."
      + "\nThe method getVirtualFile(Object) is undefined"
      + "\nThe method createTempDir(String) is undefined"
      + "\nThe method or field PsiTestUtil is undefined"
      + "\naddContentRoot cannot be resolved");
  }
  
  protected void addFrameworkSupport(final /* Module */Object moduleToHandle) {
    throw new Error("Unresolved compilation problems:"
      + "\nFrameworkSupportConfigurable cannot be resolved to a type."
      + "\nOldFrameworkSupportProviderWrapper.FrameworkSupportConfigurableWrapper cannot be resolved to a type."
      + "\nFrameworkSupportCommunicator cannot be resolved to a type."
      + "\nWriteCommandAction.Simple cannot be resolved."
      + "\nThe method getProject() is undefined"
      + "\nThe method or field ModuleRootManager is undefined"
      + "\nThe method or field FrameworkSupportUtil is undefined"
      + "\nThe method or field XtendLanguage is undefined"
      + "\nThe method or field FrameworkSupportUtil is undefined"
      + "\nFrameworkSupportModelImpl cannot be resolved."
      + "\nThe method or field project is undefined"
      + "\nThe method or field LibrariesContainerFactory is undefined"
      + "\nThe method or field project is undefined"
      + "\nIdeaModifiableModelsProvider cannot be resolved."
      + "\nThe method or field FrameworkSupportCommunicator is undefined"
      + "\nThe method or field Disposer is undefined"
      + "\nThe method or field Disposer is undefined"
      + "\nThe method run() of type new Object(){} must override a superclass method."
      + "\nThe method createContentRoot(Module) from the type XtendSupportConfigurableTest refers to the missing type Object"
      + "\nexecute cannot be resolved"
      + "\nthrowException cannot be resolved"
      + "\ngetInstance cannot be resolved"
      + "\ngetModifiableModel cannot be resolved"
      + "\nfindProvider cannot be resolved"
      + "\nINSTANCE cannot be resolved"
      + "\nID cannot be resolved"
      + "\ngetAllProviders cannot be resolved"
      + "\ncreateContainer cannot be resolved"
      + "\ncreateConfigurable cannot be resolved"
      + "\naddSupport cannot be resolved"
      + "\ngetConfigurable cannot be resolved"
      + "\nEP_NAME cannot be resolved"
      + "\ngetExtensions cannot be resolved"
      + "\nonFrameworkSupportAdded cannot be resolved"
      + "\ncommit cannot be resolved"
      + "\nisDisposed cannot be resolved"
      + "\n! cannot be resolved"
      + "\ndispose cannot be resolved");
  }
}
