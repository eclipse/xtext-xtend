/**
 * Copyright (c) 2015 itemis AG (http://www.itemis.eu) and others.
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 * 
 * SPDX-License-Identifier: EPL-2.0
 */
package org.eclipse.xtend.core.tests.compiler;

import org.eclipse.xtend2.lib.StringConcatenation;
import org.junit.Test;

/**
 * @author Sebastian Zarnekow - Initial contribution and API
 */
@SuppressWarnings("all")
public class CompilerBug462845Test extends AbstractXtendCompilerTest {
  @Test
  public void test_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.Iterator");
    _builder.newLine();
    _builder.append("class C {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("new() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val Iterable<String> iter = [ null ]");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("new Iterator<String>() {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Iterator<String> delegate = iter.iterator");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("override hasNext() {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("delegate.hasNext");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("override next() {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("delegate.next");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("override remove() {}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import java.util.Iterator;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class C {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public C() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("abstract class __C_1 implements Iterator<String> {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("Iterator<String> delegate;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final Iterable<String> _function = new Iterable<String>() {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("public Iterator<String> iterator() {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return null;");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final Iterable<String> iter = _function;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("new __C_1() {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("{");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("delegate = iter.iterator();");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("public boolean hasNext() {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return this.delegate.hasNext();");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("public String next() {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return this.delegate.next();");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("public void remove() {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void test_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.Iterator");
    _builder.newLine();
    _builder.append("class C {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def m() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val Iterable<String> iter = [ null ]");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("new Iterator<String>() {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Iterator<String> delegate = iter.iterator");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("override hasNext() {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("delegate.hasNext");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("override next() {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("delegate.next");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("override remove() {}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import java.util.Iterator;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class C {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public Iterator<String> m() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("abstract class __C_1 implements Iterator<String> {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("Iterator<String> delegate;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("__C_1 _xblockexpression = null;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("{");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("final Iterable<String> _function = new Iterable<String>() {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("public Iterator<String> iterator() {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("return null;");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("final Iterable<String> iter = _function;");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("_xblockexpression = new __C_1() {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("{");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("delegate = iter.iterator();");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("public boolean hasNext() {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("return this.delegate.hasNext();");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("public String next() {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("return this.delegate.next();");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("public void remove() {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _xblockexpression;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void test_03() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.Iterator");
    _builder.newLine();
    _builder.append("class C {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def static m() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val Iterable<String> iter = [ null ]");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("new Iterator<String>() {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Iterator<String> delegate = iter.iterator");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("override hasNext() {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("delegate.hasNext");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("override next() {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("delegate.next");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("override remove() {}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import java.util.Iterator;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class C {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public static Iterator<String> m() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("abstract class __C_1 implements Iterator<String> {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("Iterator<String> delegate;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("__C_1 _xblockexpression = null;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("{");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("final Iterable<String> _function = new Iterable<String>() {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("public Iterator<String> iterator() {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("return null;");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("final Iterable<String> iter = _function;");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("_xblockexpression = new __C_1() {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("{");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("delegate = iter.iterator();");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("public boolean hasNext() {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("return this.delegate.hasNext();");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("public String next() {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("return this.delegate.next();");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("public void remove() {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("return _xblockexpression;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void test_04() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.Iterator");
    _builder.newLine();
    _builder.append("class C {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def void m() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val Iterable<String> iter = [ null ]");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("new Iterator<String>() {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Iterator<String> delegate = iter.iterator");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("override hasNext() {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("delegate.hasNext");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("override next() {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("delegate.next");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("override remove() {}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import java.util.Iterator;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class C {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void m() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("abstract class __C_1 implements Iterator<String> {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("Iterator<String> delegate;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final Iterable<String> _function = new Iterable<String>() {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("public Iterator<String> iterator() {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return null;");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("final Iterable<String> iter = _function;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("new __C_1() {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("{");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("delegate = iter.iterator();");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("public boolean hasNext() {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return this.delegate.hasNext();");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("public String next() {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return this.delegate.next();");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("public void remove() {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
  
  @Test
  public void test_05() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.Iterator");
    _builder.newLine();
    _builder.append("class C {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("val iterator = {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val Iterable<String> iter = [ null ]");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("new Iterator<String>() {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Iterator<String> delegate = iter.iterator");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("override hasNext() {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("delegate.hasNext");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("override next() {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("delegate.next");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("override remove() {}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import java.util.Iterator;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.xbase.lib.Functions.Function0;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@SuppressWarnings(\"all\")");
    _builder_1.newLine();
    _builder_1.append("public class C {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("private final Iterator<String> iterator = new Function0<Iterator<String>>() {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("public Iterator<String> apply() {");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("abstract class __C_1 implements Iterator<String> {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("Iterator<String> delegate;");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("__C_1 _xblockexpression = null;");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("{");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("final Iterable<String> _function = new Iterable<String>() {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("public Iterator<String> iterator() {");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return null;");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("final Iterable<String> iter = _function;");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("_xblockexpression = new __C_1() {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("{");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("delegate = iter.iterator();");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("public boolean hasNext() {");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return this.delegate.hasNext();");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("public String next() {");
    _builder_1.newLine();
    _builder_1.append("            ");
    _builder_1.append("return this.delegate.next();");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("public void remove() {");
    _builder_1.newLine();
    _builder_1.append("          ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("};");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("return _xblockexpression;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}.apply();");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCompilesTo(_builder, _builder_1);
  }
}
