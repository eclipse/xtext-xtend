/*
 * generated by Xtext
 */
package org.eclipse.xtend.ide

import org.eclipse.jface.text.rules.ITokenScanner
import org.eclipse.jface.text.source.IAnnotationHover
import org.eclipse.jface.viewers.ILabelProvider
import org.eclipse.ui.plugin.AbstractUIPlugin
import org.eclipse.ui.views.contentoutline.IContentOutlinePage
import org.eclipse.xtend.core.javaconverter.ASTParserFactory
import org.eclipse.xtend.core.linking.Linker
import org.eclipse.xtend.core.macro.AbstractFileSystemSupport
import org.eclipse.xtend.core.macro.ProcessorInstanceForJvmTypeProvider
import org.eclipse.xtend.core.macro.declaration.IResourceChangeRegistry
import org.eclipse.xtend.core.resource.XtendResourceDescriptionManager
import org.eclipse.xtend.ide.autoedit.AutoEditStrategyProvider
import org.eclipse.xtend.ide.autoedit.TokenTypeToPartitionMapper
import org.eclipse.xtend.ide.builder.JavaProjectPreferencesInitializer
import org.eclipse.xtend.ide.builder.SourceRelativeFileSystemAccess
import org.eclipse.xtend.ide.builder.UIResourceChangeRegistry
import org.eclipse.xtend.ide.builder.XtendParallelBuilderParticipant
import org.eclipse.xtend.ide.builder.XtendUIResourceDescriptionManager
import org.eclipse.xtend.ide.codetemplates.ui.highlighting.FlexerBasedTemplateBodyHighlighter
import org.eclipse.xtend.ide.common.contentassist.antlr.DisabledInternalLexer
import org.eclipse.xtend.ide.common.contentassist.antlr.FlexerBasedContentAssistContextFactory
import org.eclipse.xtend.ide.common.contentassist.antlr.FlexerBasedContentAssistParser
import org.eclipse.xtend.ide.common.contentassist.antlr.FlexerBasedPartialXtendContentAssistParser
import org.eclipse.xtend.ide.common.contentassist.antlr.internal.InternalXtendLexer
import org.eclipse.xtend.ide.common.editor.bracketmatching.XtendBracePairProvider
import org.eclipse.xtend.ide.common.highlighting.XtendHighlightingCalculator
import org.eclipse.xtend.ide.contentassist.EscapeSequenceAwarePrefixMatcher
import org.eclipse.xtend.ide.contentassist.OperatorAwareComparator
import org.eclipse.xtend.ide.contentassist.TemplateProposalProvider
import org.eclipse.xtend.ide.contentassist.XtendContentAssistFactory
import org.eclipse.xtend.ide.contentassist.XtendImportingTypesProposalProvider
import org.eclipse.xtend.ide.contentassist.XtendTemplateContextType
import org.eclipse.xtend.ide.contentassist.antlr.FlexProposalConflictHelper
import org.eclipse.xtend.ide.editor.OccurrenceComputer
import org.eclipse.xtend.ide.editor.OverrideIndicatorModelListener
import org.eclipse.xtend.ide.editor.OverrideIndicatorRulerAction
import org.eclipse.xtend.ide.editor.RichStringAwareSourceViewer
import org.eclipse.xtend.ide.editor.RichStringAwareToggleCommentAction
import org.eclipse.xtend.ide.editor.SingleLineCommentHelper
import org.eclipse.xtend.ide.editor.XtendDoubleClickStrategyProvider
import org.eclipse.xtend.ide.editor.XtendFoldingRegionProvider
import org.eclipse.xtend.ide.editor.XtendNatureAddingEditorCallback
import org.eclipse.xtend.ide.editor.XtendSourceViewerConfiguration
import org.eclipse.xtend.ide.editor.copyqualifiedname.XtendCopyQualifiedNameService
import org.eclipse.xtend.ide.editor.model.XtendDocumentTokenSource
import org.eclipse.xtend.ide.formatting.preferences.FormatterResourceProvider
import org.eclipse.xtend.ide.highlighting.RichStringAwareTokenScanner
import org.eclipse.xtend.ide.highlighting.ShowWhitespaceCharactersActionContributor
import org.eclipse.xtend.ide.highlighting.TokenToAttributeIdMapper
import org.eclipse.xtend.ide.highlighting.XtendHighlightingConfiguration
import org.eclipse.xtend.ide.highlighting.XtendSyntaxColoringPreferencePage
import org.eclipse.xtend.ide.hover.XtendAnnotationHover
import org.eclipse.xtend.ide.hover.XtendHoverDocumentationProvider
import org.eclipse.xtend.ide.hover.XtendHoverProvider
import org.eclipse.xtend.ide.hover.XtendHoverSignatureProvider
import org.eclipse.xtend.ide.hyperlinking.HyperLinkingLabelProvider
import org.eclipse.xtend.ide.hyperlinking.XtendHyperlinkHelper
import org.eclipse.xtend.ide.javaconverter.EclipseASTParserFactory
import org.eclipse.xtend.ide.labeling.XtendLabelProvider
import org.eclipse.xtend.ide.macro.EclipseFileSystemSupportImpl
import org.eclipse.xtend.ide.macro.JdtBasedProcessorProvider
import org.eclipse.xtend.ide.outline.ShowSyntheticMembersContribution
import org.eclipse.xtend.ide.outline.SwitchOutlineModeContribution
import org.eclipse.xtend.ide.outline.XtendOutlineNodeComparator
import org.eclipse.xtend.ide.outline.XtendOutlineNodeFactory
import org.eclipse.xtend.ide.outline.XtendOutlinePage
import org.eclipse.xtend.ide.outline.XtendOutlineWithEditorLinker
import org.eclipse.xtend.ide.outline.XtendQuickOutlineFilterAndSorter
import org.eclipse.xtend.ide.preferences.XtendPreferenceStoreAccess
import org.eclipse.xtend.ide.refactoring.XtendDependentElementsCalculator
import org.eclipse.xtend.ide.refactoring.XtendExpressionUtil
import org.eclipse.xtend.ide.refactoring.XtendJdtRenameParticipantProcessor
import org.eclipse.xtend.ide.refactoring.XtendRefactoringPreferences
import org.eclipse.xtend.ide.refactoring.XtendRenameContextFactory
import org.eclipse.xtend.ide.refactoring.XtendRenameElementProcessor
import org.eclipse.xtend.ide.refactoring.XtendRenameStrategy
import org.eclipse.xtend.ide.refactoring.XtendRenameStrategyProvider
import org.eclipse.xtend.ide.validator.XtendResourceValidator
import org.eclipse.xtend.ide.validator.preferences.XtendValidatorConfigurationBlock
import org.eclipse.xtext.builder.EclipseOutputConfigurationProvider
import org.eclipse.xtext.builder.EclipseResourceFileSystemAccess2
import org.eclipse.xtext.builder.EclipseSourceFolderProvider
import org.eclipse.xtext.builder.IXtextBuilderParticipant
import org.eclipse.xtext.builder.JDTAwareSourceFolderProvider
import org.eclipse.xtext.common.types.ui.refactoring.participant.JvmMemberRenameStrategy
import org.eclipse.xtext.common.types.xtext.ui.ITypesProposalProvider
import org.eclipse.xtext.generator.AbstractFileSystemAccess2
import org.eclipse.xtext.generator.IContextualOutputConfigurationProvider
import org.eclipse.xtext.ide.LexerIdeBindings
import org.eclipse.xtext.ide.editor.bracketmatching.IBracePairProvider
import org.eclipse.xtext.ide.editor.contentassist.antlr.ContentAssistContextFactory
import org.eclipse.xtext.ide.editor.contentassist.antlr.IContentAssistParser
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer
import org.eclipse.xtext.ide.editor.partialEditing.IPartialEditingContentAssistParser
import org.eclipse.xtext.ide.editor.syntaxcoloring.ISemanticHighlightingCalculator
import org.eclipse.xtext.linking.ILinker
import org.eclipse.xtext.parser.antlr.LexerProvider
import org.eclipse.xtext.service.SingletonBinding
import org.eclipse.xtext.ui.codetemplates.ui.highlighting.TemplateBodyHighlighter
import org.eclipse.xtext.ui.editor.IXtextEditorCallback
import org.eclipse.xtext.ui.editor.XtextEditor
import org.eclipse.xtext.ui.editor.XtextSourceViewer
import org.eclipse.xtext.ui.editor.XtextSourceViewerConfiguration
import org.eclipse.xtext.ui.editor.actions.IActionContributor
import org.eclipse.xtext.ui.editor.autoedit.AbstractEditStrategy
import org.eclipse.xtext.ui.editor.autoedit.AbstractEditStrategyProvider
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalComparator
import org.eclipse.xtext.ui.editor.contentassist.IContentAssistantFactory
import org.eclipse.xtext.ui.editor.contentassist.IContextInformationProvider
import org.eclipse.xtext.ui.editor.contentassist.IProposalConflictHelper
import org.eclipse.xtext.ui.editor.contentassist.ITemplateProposalProvider
import org.eclipse.xtext.ui.editor.contentassist.PrefixMatcher
import org.eclipse.xtext.ui.editor.copyqualifiedname.CopyQualifiedNameService
import org.eclipse.xtext.ui.editor.doubleClicking.DoubleClickStrategyProvider
import org.eclipse.xtext.ui.editor.embedded.IEditedResourceProvider
import org.eclipse.xtext.ui.editor.findrefs.DelegatingReferenceFinder
import org.eclipse.xtext.ui.editor.findrefs.IReferenceFinder
import org.eclipse.xtext.ui.editor.folding.IFoldingRegionProvider
import org.eclipse.xtext.ui.editor.hover.IEObjectHoverProvider
import org.eclipse.xtext.ui.editor.hover.html.IEObjectHoverDocumentationProvider
import org.eclipse.xtext.ui.editor.hyperlinking.IHyperlinkHelper
import org.eclipse.xtext.ui.editor.model.DocumentTokenSource
import org.eclipse.xtext.ui.editor.model.IResourceForEditorInputFactory
import org.eclipse.xtext.ui.editor.model.TerminalsTokenTypeToPartitionMapper
import org.eclipse.xtext.ui.editor.occurrences.IOccurrenceComputer
import org.eclipse.xtext.ui.editor.outline.IOutlineTreeProvider
import org.eclipse.xtext.ui.editor.outline.actions.IOutlineContribution
import org.eclipse.xtext.ui.editor.outline.actions.OutlineWithEditorLinker
import org.eclipse.xtext.ui.editor.outline.impl.OutlineFilterAndSorter.IComparator
import org.eclipse.xtext.ui.editor.outline.impl.OutlineNodeFactory
import org.eclipse.xtext.ui.editor.outline.quickoutline.IQuickOutlineContribution
import org.eclipse.xtext.ui.editor.outline.quickoutline.QuickOutlineFilterAndSorter
import org.eclipse.xtext.ui.editor.preferences.IPreferenceStoreAccess
import org.eclipse.xtext.ui.editor.preferences.IPreferenceStoreInitializer
import org.eclipse.xtext.ui.editor.syntaxcoloring.AbstractAntlrTokenToAttributeIdMapper
import org.eclipse.xtext.ui.editor.syntaxcoloring.IHighlightingConfiguration
import org.eclipse.xtext.ui.editor.syntaxcoloring.SyntaxColoringPreferencePage
import org.eclipse.xtext.ui.editor.templates.XtextTemplateContextType
import org.eclipse.xtext.ui.editor.toggleComments.ISingleLineCommentHelper
import org.eclipse.xtext.ui.editor.toggleComments.ToggleSLCommentAction
import org.eclipse.xtext.ui.generator.trace.ITraceForStorageProvider
import org.eclipse.xtext.ui.generator.trace.TraceForStorageProvider
import org.eclipse.xtext.ui.refactoring.IDependentElementsCalculator
import org.eclipse.xtext.ui.refactoring.IRenameStrategy
import org.eclipse.xtext.ui.refactoring.impl.RenameElementProcessor
import org.eclipse.xtext.ui.refactoring.ui.IRenameContextFactory
import org.eclipse.xtext.ui.resource.IResourceUIServiceProvider
import org.eclipse.xtext.ui.validation.AbstractValidatorConfigurationBlock
import org.eclipse.xtext.validation.IResourceValidator
import org.eclipse.xtext.validation.IssueSeveritiesProvider
import org.eclipse.xtext.xbase.ui.contentassist.ParameterContextInformationProvider
import org.eclipse.xtext.xbase.ui.editor.XbaseEditor
import org.eclipse.xtext.xbase.ui.editor.XbaseResourceForEditorInputFactory
import org.eclipse.xtext.xbase.ui.editor.actions.IClipboardActionFactory
import org.eclipse.xtext.xbase.ui.editor.actions.ImportsAwareClipboardAction
import org.eclipse.xtext.xbase.ui.hover.XbaseDeclarativeHoverSignatureProvider
import org.eclipse.xtext.xbase.ui.jvmmodel.refactoring.jdt.JdtRenameRefactoringParticipantProcessor
import org.eclipse.xtext.xbase.ui.refactoring.ExpressionUtil
import org.eclipse.xtext.xbase.ui.validation.XbaseIssueSeveritiesProvider
import com.google.inject.Binder
import com.google.inject.name.Names
import org.eclipse.xtext.ui.refactoring.IReferenceUpdater
import org.eclipse.xtext.xbase.ui.refactoring.XbaseReferenceUpdater
import org.eclipse.xtend.ide.refactoring.XtendReferenceUpdater

/** 
 * Use this class to register components to be used within the IDE.
 */
class XtendUiModule extends org.eclipse.xtend.ide.AbstractXtendUiModule {

	new(AbstractUIPlugin plugin) {
		super(plugin)
	}

	def void configureDebugMode(Binder binder) {
		if (Boolean.getBoolean("org.eclipse.xtext.xtend.debug")) {
			binder.bindConstant().annotatedWith(Names.named(AbstractEditStrategy.DEBUG)).to(true)
		}
		// matches ID of org.eclipse.ui.contexts extension registered in plugin.xml
		binder.bindConstant().annotatedWith(Names.named(XtextEditor.KEY_BINDING_SCOPE)).to("org.eclipse.xtend.ide.XtendEditorScope")
	}

	def void configureOverrideIndicatorSupport(Binder binder) {
		binder.bind(IXtextEditorCallback).annotatedWith(Names.named("OverrideIndicatorModelListener")). // $NON-NLS-1$
		to(OverrideIndicatorModelListener)
		binder.bind(IActionContributor).annotatedWith(Names.named("OverrideIndicatorRulerAction")).to( // $NON-NLS-1$
		OverrideIndicatorRulerAction)
	}

	override void configureHyperlinkLabelProvider(com.google.inject.Binder binder) {
		binder.bind(org.eclipse.jface.viewers.ILabelProvider).annotatedWith(org.eclipse.xtext.ui.editor.hyperlinking.HyperlinkLabelProvider).to(
			HyperLinkingLabelProvider)
	}

	override Class<? extends IAnnotationHover> bindIAnnotationHover() {
		return XtendAnnotationHover
	}

	override Class<? extends IHighlightingConfiguration> bindIHighlightingConfiguration() {
		return XtendHighlightingConfiguration
	}

	override Class<? extends AbstractAntlrTokenToAttributeIdMapper> bindAbstractAntlrTokenToAttributeIdMapper() {
		return TokenToAttributeIdMapper
	}

	override Class<? extends ITokenScanner> bindITokenScanner() {
		return RichStringAwareTokenScanner
	}

	override Class<? extends ISemanticHighlightingCalculator> bindIdeSemanticHighlightingCalculator() {
		return XtendHighlightingCalculator
	}

	def Class<? extends TerminalsTokenTypeToPartitionMapper> bindTerminalsTokenTypeToPartitionMapper() {
		return TokenTypeToPartitionMapper
	}

	override Class<? extends AbstractEditStrategyProvider> bindAbstractEditStrategyProvider() {
		return AutoEditStrategyProvider
	}

	def void configureIShowWhitespaceCharactersActionContributor(Binder binder) {
		binder.bind(IActionContributor).annotatedWith(Names.named("Show Whitespace")).to(ShowWhitespaceCharactersActionContributor)
	}

	def Class<? extends DoubleClickStrategyProvider> bindDoubleClickStrategyProvider() {
		return XtendDoubleClickStrategyProvider
	}

	override Class<? extends IComparator> bindOutlineFilterAndSorter$IComparator() {
		return XtendOutlineNodeComparator
	}

	def Class<? extends QuickOutlineFilterAndSorter> bindQuickOutlineFilterAndSorter() {
		return XtendQuickOutlineFilterAndSorter
	}

	def Class<? extends IFoldingRegionProvider> bindIFoldingRegionProvider() {
		return XtendFoldingRegionProvider
	}

	override Class<? extends IContentOutlinePage> bindIContentOutlinePage() {
		return XtendOutlinePage
	}

	override Class<? extends IHyperlinkHelper> bindIHyperlinkHelper() {
		return XtendHyperlinkHelper
	}

	override Class<? extends IEObjectHoverProvider> bindIEObjectHoverProvider() {
		return XtendHoverProvider
	}

	override Class<? extends EclipseResourceFileSystemAccess2> bindEclipseResourceFileSystemAccess2() {
		return SourceRelativeFileSystemAccess
	}

	override Class<? extends EclipseSourceFolderProvider> bindEclipseSourceFolderProvider() {
		return JDTAwareSourceFolderProvider
	}

	override Class<? extends IXtextBuilderParticipant> bindIXtextBuilderParticipant() {
		return XtendParallelBuilderParticipant
	}

	override Class<? extends ISingleLineCommentHelper> bindISingleLineCommentHelper() {
		return SingleLineCommentHelper
	}

	def Class<? extends XtextSourceViewer.Factory> bindSourceViewerFactory() {
		return RichStringAwareSourceViewer.Factory
	}

	def Class<? extends ToggleSLCommentAction.Factory> bindToggleCommentFactory() {
		return RichStringAwareToggleCommentAction.Factory
	}

	def Class<? extends IOccurrenceComputer> bindIOccurrenceComputer() {
		return OccurrenceComputer
	}

	override Class<? extends IXtextEditorCallback> bindIXtextEditorCallback() {
		return XtendNatureAddingEditorCallback
	}

	def Class<? extends IResourceUIServiceProvider> bindIResourceUIServiceProvider() {
		return XtendResourceUiServiceProvider
	}

	/** 
	 * @since 2.8
	 */
	@SingletonBinding override Class<? extends IBracePairProvider> bindIBracePairProvider() {
		return XtendBracePairProvider
	}

	override void configureIPreferenceStoreInitializer(Binder binder) {
		binder.bind(IPreferenceStoreInitializer).annotatedWith(Names.named("RefactoringPreferences")).to(XtendRefactoringPreferences.Initializer)
	}

	override Class<? extends IRenameContextFactory> bindIRenameContextFactory() {
		return XtendRenameContextFactory
	}

	def Class<? extends RenameElementProcessor> bindRenameElementProcessor() {
		return XtendRenameElementProcessor
	}

	override Class<? extends IRenameStrategy> bindIRenameStrategy() {
		return XtendRenameStrategy
	}

	override java.lang.Class<? extends IDependentElementsCalculator> bindIDependentElementsCalculator() {
		return XtendDependentElementsCalculator
	}

	override void configureJvmMemberRenameStrategy$Provider$Delegate(Binder binder) {
		binder.bind(IRenameStrategy.Provider).annotatedWith(JvmMemberRenameStrategy.Provider.Delegate).to(XtendRenameStrategyProvider)
	}

	def Class<? extends JdtRenameRefactoringParticipantProcessor> bindJdtRenameRefactoringParticipantProcessor() {
		return XtendJdtRenameParticipantProcessor
	}
	
	/**
	 * @since 2.12
	 */
	override Class<? extends IReferenceUpdater> bindIReferenceUpdater() {
		return XtendReferenceUpdater;
	}

	def Class<? extends XbaseDeclarativeHoverSignatureProvider> bindXbaseDeclarativeHoverSignatureProvider() {
		return XtendHoverSignatureProvider
	}

	override Class<? extends IEObjectHoverDocumentationProvider> bindIEObjectHoverDocumentationProvider() {
		return XtendHoverDocumentationProvider
	}

	override Class<? extends org.eclipse.xtext.ui.editor.XtextEditor> bindXtextEditor() {
		return XbaseEditor
	}

	override Class<? extends ITemplateProposalProvider> bindITemplateProposalProvider() {
		return TemplateProposalProvider
	}

	def Class<? extends ITraceForStorageProvider> bindTraceInformation() {
		return TraceForStorageProvider
	}

	def Class<? extends IEditedResourceProvider> bindIEditedResourceProvider() {
		return FormatterResourceProvider
	}

	def void configureFilterSyntheticMembersContribution(Binder binder) {
		binder.bind(IOutlineContribution).annotatedWith(Names.named("FilterSyntheticsContribution")).to(
			ShowSyntheticMembersContribution)
	}

	@org.eclipse.xtext.service.SingletonBinding(eager=true) override Class<? extends org.eclipse.xtext.xbase.ui.validation.XbaseUIValidator> bindXbaseUIValidator() {
		return org.eclipse.xtend.ide.validator.XtendUIValidator
	}

	@SingletonBinding(eager=true) def Class<? extends JavaProjectPreferencesInitializer> bindJavaProjectPreferencesInitializer() {
		return JavaProjectPreferencesInitializer
	}

	override void configureSmartCaretPreferenceInitializer(Binder binder) {
		binder.bind(IPreferenceStoreInitializer).annotatedWith(Names.named("smartCaretPreferenceInitializer")). // $NON-NLS-1$
		to(XtendPreferenceStoreInitializer)
	}

	def Class<? extends IssueSeveritiesProvider> bindIssueSeverityServiceProvider() {
		return XbaseIssueSeveritiesProvider
	}

	def Class<? extends XtextSourceViewerConfiguration> bindSourceViewerConfiguration() {
		return XtendSourceViewerConfiguration
	}

	def Class<? extends DocumentTokenSource> bindDocumentTokenSource() {
		return XtendDocumentTokenSource
	}

	def Class<? extends AbstractValidatorConfigurationBlock> bindAbstractValidatorConfigurationBlock() {
		return XtendValidatorConfigurationBlock
	}

	def Class<? extends ProcessorInstanceForJvmTypeProvider> bindProcessorInstanceForJvmTypeProvider() {
		return JdtBasedProcessorProvider
	}

	override Class<? extends IContentAssistantFactory> bindIContentAssistantFactory() {
		return XtendContentAssistFactory
	}

	override Class<? extends IResourceForEditorInputFactory> bindIResourceForEditorInputFactory() {
		return XbaseResourceForEditorInputFactory
	}

	def Class<? extends IContextInformationProvider> bindIContextInformationProvider() {
		return ParameterContextInformationProvider
	}

	def Class<? extends PrefixMatcher.CamelCase> bindCamelCasePrefixMatcher() {
		return EscapeSequenceAwarePrefixMatcher
	}

	override Class<? extends ILabelProvider> bindILabelProvider() {
		return XtendLabelProvider
	}

	def Class<? extends IReferenceFinder> bindIReferenceFinder() {
		return DelegatingReferenceFinder
	}

	def Class<? extends ICompletionProposalComparator> bindICompletionProposalComparator() {
		return OperatorAwareComparator
	}

	def Class<? extends AbstractFileSystemSupport> bindAbstractFileSystemSupport() {
		return EclipseFileSystemSupportImpl
	}

	override Class<? extends CopyQualifiedNameService> bindCopyQualifiedNameService() {
		return XtendCopyQualifiedNameService
	}

	override Class<? extends IContentAssistParser> bindIContentAssistParser() {
		return FlexerBasedContentAssistParser
	}

	override void configureContentAssistLexerProvider(Binder binder) {
		binder.bind(InternalXtendLexer).toProvider(LexerProvider.create(DisabledInternalLexer))
		binder.bind(DisabledInternalLexer).toProvider(LexerProvider.create(DisabledInternalLexer))
	}

	override void configureContentAssistLexer(Binder binder) {
		binder.bind(Lexer).annotatedWith(Names.named(LexerIdeBindings.CONTENT_ASSIST)).to(DisabledInternalLexer)
	}

	def Class<? extends ContentAssistContextFactory> bindContentAssistContextFactory() {
		return FlexerBasedContentAssistContextFactory
	}

	override Class<? extends IProposalConflictHelper> bindIProposalConflictHelper() {
		return FlexProposalConflictHelper
	}

	def Class<? extends TemplateBodyHighlighter> bindTemplateBodyHighlighter() {
		return FlexerBasedTemplateBodyHighlighter
	}

	def Class<? extends IPreferenceStoreAccess> bindPreferenceStoreAccess() {
		return XtendPreferenceStoreAccess
	}

	def Class<? extends ExpressionUtil> bindExpressionUtil() {
		return XtendExpressionUtil
	}

	def Class<? extends OutlineNodeFactory> bindOutlineNodeFactory() {
		return XtendOutlineNodeFactory
	}

	override Class<? extends ITypesProposalProvider> bindITypesProposalProvider() {
		return XtendImportingTypesProposalProvider
	}

	def Class<? extends IOutlineTreeProvider.ModeAware> bindIOutlineTreeProvider_ModeAware() {
		return org.eclipse.xtend.ide.outline.XtendOutlineModes
	}

	def void configureSwitchOutlineModeContribution(Binder binder) {
		binder.bind(IOutlineContribution).annotatedWith(Names.named("SwitchOutlineModeContribution")).to(SwitchOutlineModeContribution)
	}

	def void configureSwitchQuickOutlineModeContribution(Binder binder) {
		binder.bind(IQuickOutlineContribution).annotatedWith(Names.named("SwitchQuickOutlineModeContribution")).to(SwitchOutlineModeContribution)
	}

	@org.eclipse.xtext.service.SingletonBinding(eager=true) def Class<? extends IResourceChangeRegistry> bindResourceChangeRegistry() {
		return UIResourceChangeRegistry
	}

	override Class<? extends IPartialEditingContentAssistParser> bindIPartialEditingContentAssistParser() {
		return FlexerBasedPartialXtendContentAssistParser
	}

	def Class<? extends ILinker> bindILinker() {
		return Linker
	}

	def Class<? extends OutlineWithEditorLinker> bindOutlineWithEditorLinker() {
		return XtendOutlineWithEditorLinker
	}

	def Class<? extends XtendResourceDescriptionManager> bindXtendUIResourceDescriptionManager() {
		return XtendUIResourceDescriptionManager
	}

	def Class<? extends IClipboardActionFactory> bindIClipboardActionFactory() {
		return ImportsAwareClipboardAction.Factory
	}

	override Class<? extends IContextualOutputConfigurationProvider> bindIContextualOutputConfigurationProvider() {
		return EclipseOutputConfigurationProvider
	}

	override Class<? extends AbstractFileSystemAccess2> bindAbstractFileSystemAccess2() {
		return EclipseResourceFileSystemAccess2
	}

	def Class<? extends IResourceValidator> bindIResourceValidator() {
		return XtendResourceValidator
	}

	override Class<? extends XtextTemplateContextType> bindXtextTemplateContextType() {
		return XtendTemplateContextType
	}

	def Class<? extends ASTParserFactory> bindASTParserFactory() {
		return EclipseASTParserFactory
	}
	
	def Class<? extends SyntaxColoringPreferencePage> bindSyntaxColoringPreferencePage() {
		return XtendSyntaxColoringPreferencePage
	}
}
